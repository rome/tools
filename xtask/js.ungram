// Javascript Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

// NOTES
//
// - "manual__" prefix is used to _exclude_ those method from being autogenerated
//   and they will be manually implemented

Ident = 'ident'
Script = 'shebang'? items:Stmt*
Module = 'shebang'? items:ModuleItem*

///////////////
// STATEMENTS
///////////////

Stmt =
	BlockStmt
	| EmptyStmt
	| ExprStmt
	| IfStmt
	| DoWhileStmt
	| WhileStmt
	| ForStmt
	| ForInStmt
	| ForOfStmt
	| ContinueStmt
	| BreakStmt
	| ReturnStmt
	| WithStmt
	| LabelledStmt
	| SwitchStmt
	| ThrowStmt
	| TryStmt
	| DebuggerStmt
	|	FnDecl
	| ClassDecl
	| VarDecl
	| TsEnum
	| TsTypeAliasDecl
	| TsNamespaceDecl
	| TsModuleDecl
	| TsInterfaceDecl


// Block statement
BlockStmt = '{' stmts:Stmt* '}'


// Empty statemnet
EmptyStmt = ';'?


// Expression statement
ExprStmt = Expr


// while statement
WhileStmt = 'while' Condition cons:Stmt

// do while statement
DoWhileStmt = 'do'  cons:Stmt 'while' condition:Condition ';'?


// if statement
IfStmt = 'if' Condition manual__cons:Stmt 'else' manual__alt:Stmt


// for..in statement
ForStmt =
	'for'
	'('
	init:ForStmtInit?
	test:ForStmtTest?
	update:ForStmtUpdate?
	')'
	cons:Stmt

ForStmtInit = inner:ForHead ';'
ForHead = VarDecl | Expr | NameRef

ForStmtTest = expr:Expr ';'

ForStmtUpdate = expr:Expr


// for..in statement
ForInStmt = 'for' '(' left:ForStmtInit 'in' right:Expr ')' cons:Stmt

// for..of statement
ForOfStmt = 'for' '(' left:ForStmtInit 'of' right:Expr ')' cons:Stmt


// continue statement
ContinueStmt = 'continue' NameRef ';'?


// break statement
BreakStmt = 'break' 'ident'? ';'


// return statement
ReturnStmt = 'return' value:Expr ';'?

// with statement
WithStmt = 'with' condition:Condition cons:Stmt

// labelled statement
LabelledStmt = label:Name ':' Stmt

// switch statement
SwitchStmt =
	'switch'
	test:Condition
	'{'
	cases:SwitchCase*
	'}'

SwitchCase = CaseClause | DefaultClause

CaseClause = 'case' test:Expr ':' cons:Stmt*
DefaultClause = 'default' ':' cons:Stmt*


// throw statement
ThrowStmt = 'throw' exception:Expr ';'

// try..catch..finally statement

TryStmt = 'try' test:BlockStmt handler:CatchClause? finalizer:Finalizer?

// TODO: fix it, the pattern is not mandatory anymore
CatchClause = 'catch' '(' error:Pattern ')' cons:BlockStmt
Finalizer = 'finally' cons:BlockStmt


// debugger statement
DebuggerStmt = 'debugger' ';'?


///////////////
// EXPRESSIONS
///////////////

// Expression
Expr =
	ArrowExpr
	| Literal
	| Template
	| NameRef
	| ThisExpr
	| ArrayExpr
	| ObjectExpr
	| GroupingExpr
	| BracketExpr
	| DotExpr
	| NewExpr
	| CallExpr
	| UnaryExpr
	| BinExpr
	| CondExpr
	| AssignExpr
	| SequenceExpr
	| FnExpr
	| ClassExpr
	| NewTarget
	| ImportMeta
	| SuperCall
	| ImportCall
	| YieldExpr
	| AwaitExpr
	| PrivatePropAccess
	| TsNonNull
	| TsAssertion
	| TsConstAssertion


// the backtick is just a placeholder, there's
Template = '`'

// This Expression
ThisExpr = 'this'

// Dot exprssion
// TODO: review the 'super' token
// https://github.com/rome/tools/issues/1729
DotExpr = 'super'? object:Expr '.' prop:Name

// new expression
NewExpr = 'new' type_args:TsTypeArgs? object:Expr arguments:ArgList

// call expression
CallExpr = type_args:TsTypeArgs? callee:Expr arguments:ArgList

// await expression
AwaitExpr = 'await' Expr

// yield expressoin
YieldExpr = 'yield' '*'? value:Expr

// super call expression
SuperCall = 'super' arguments:ArgList

// import call exression
ImportCall = 'import' '(' argument:Expr ')'

// new target expression
NewTarget = 'new' '.' 'target'

// conditional expression
CondExpr = manual__test: Expr '?' manual__cons: Expr  ':' manual__alt: Expr

// import meta expression
ImportMeta = 'import' '.'

// function expression
FnExpr =
	'async'?
	'function'
	'*'?
	name:Name
	type_params:TsTypeParams?
	parameters:ArgList
	':'?
	return_type:TsType?
	body:BlockStmt

// Arrow expression
ArrowExpr =
	'async'?
	type_params:TsTypeParams?
	params:ArrowExprParams?
	'=>'
	':'?
	return_type:TsType?
	manual__body:ExprOrBlock

ArrowExprParams =
	Name
	| ParameterList

// Object expression
ObjectExpr = '{' props:ObjectProp* '}'

// class expression
ClassExpr =
	'class'
	Name
	type_params:TsTypeParams?
	parent:Expr?
	'implements'?
	implements:TsExprWithTypeArgs?
	body:ClassBody

ClassBody =  '{' elements:ClassElement* '}'


ClassElement =
	EmptyStmt
	| Method
	// probably PrivateProp is not needed
	| PrivateProp
	| ClassProp
	| Constructor
	| TsIndexSignature
	| Getter
	| Setter

Constructor =
	accessibility:TsAccessibility?
	name:PropName
	type_params:TsTypeParams?
	parameters:ParameterList
	body:BlockStmt


ConstructorParameters =
		'(' parameters:ConstructorParamOrPat* ')'


ConstructorParamOrPat =
	TsConstructorParam
	| Pattern



// This type is here only to matain compatiblity with rslit_parser
// A private property should only have the hash (#) or have the
// keyword `private` in the typescript version
PrivateProp = ClassProp
// @ematipico: they way it's written now is awful and can be improved a lot
ClassProp =
	'declare'?
	'abstract'?
	'static'?
	accessibility:TsAccessibility?
	'#'?
	key:PropName
	'?'?
	'!'?
	ty:TsType
	'='?
	value:Expr?
	';'?

// Array expression
ArrayExpr = '[' elements:ExprOrSpread* ']'

ExprOrSpread =
	Expr
	| SpreadElement
	// @ematipico these have been added because the current enums are not flatten
	| Literal
	| ObjectExpr
	| ArrayExpr
	| GroupingExpr

// assign expression
AssignExpr =
  manual__lhs:PatternOrExpr
  operator:(
		'=' |'+=' | '-=' | '*=' | '%=' |
		'**=' | '>>=' | '<<=' | '>>>=' | '&=' |
		'|=' | '^=' | '&&=' | '||=' | '??='
  )
  manual__rhs:PatternOrExpr


PatternOrExpr = Pattern | Expr

// sequence expression
SequenceExpr =
	// @ematipico correct grammar should be "exprs: (Expr (',' Expr)*)"
	exprs:Expr*
	BinExpr


// grouping expression
GroupingExpr = '(' inner:Expr ')'

// bracket expression
BracketExpr =  'super'? manual__object:Expr '[' manual__prop:Expr ']'


// binary expression
BinExpr =
  manual__lhs:Expr
  operator:(
		'<' | '>' | '<=' | '>=' | '==' | '===' | '!=' | '!=='
		| '+' | '-' | '*' | '/' | '%' | '**' | '<<' | '>>' | '>>>'
		| '&' | '|' | '^' | '??' | '||' | '&&' | 'in' | 'instanceof'
  )
  manual__rhs:Expr

// unary expression
UnaryExpr =
  lhs:Expr
	// @ematipico this is here for compability
	expr:Expr
  operator:(
		'++' | '--' | 'delete' | 'void' | 'typeof' | '+' | '-' | '~'
		| '!' | 'await'
  )
  rhs:Expr

// Literals
Literal =
	'string'
	| 'true'
	| 'false'
	| 'number'
	| 'regex'
	| 'float'
	| 'big_int'

Null = 'null'
Undefined = 'undefined'

ExprOrBlock =
	Expr
	| BlockStmt
	| Literal

ParameterList = '(' parameters:Pattern* ')'
ArgList = '(' args:Expr* ')'


///////////////
// PATTERNS
///////////////

Pattern =
	SinglePattern
	| RestPattern
	| AssignPattern
	| ObjectPattern
	| ArrayPattern
	| ExprPattern

// single pattern
SinglePattern
	= name:Name '?'? '!'? ':'? ty:TsType

// rest pattern
RestPattern = '...' pat:Pattern

// array pattern
ArrayPattern = '[' elements:Pattern* ']' '!' ':' ty:TsType

// object pattern
ObjectPattern = '{' elements:ObjectPatternProp* '}'

// object pattern prop
ObjectPatternProp =
	AssignPattern
	| KeyValuePattern
	| RestPattern
	| SinglePattern

// assign pattern
AssignPattern = key:Pattern ':'? ty:TsType '=' value:Expr

// key value pattern
KeyValuePattern = key:PropName ':' manual__value:Pattern


// expression pattern
ExprPattern = Expr




///////////////
// PROPS
///////////////
ObjectProp =
	LiteralProp
	| Getter
	| Setter
	| SpreadProp
	| InitializedProp
	| IdentProp
	| Method


// literal prop
LiteralProp = manual__key:PropName ':' manual__value:Expr

PropName =
	ComputedPropertyName
	| Literal
	| Ident
	| Name


// computed property
ComputedPropertyName = '[' Expr ']'

// private property access
PrivatePropAccess = lhs:Expr '.' rhs:PrivateName

// spread property
SpreadProp = '...' value:Expr

// initialised property
InitializedProp = key:Name '=' value:Expr

// property identifier
IdentProp = Name

///////////////
// MISCELLANEOUS
///////////////

Getter =  'get' key:PropName parameters:ParameterList  body:BlockStmt

Setter = 'set' key:PropName parameters:ParameterList  body:BlockStmt

Method =
	'static'?
	'async'?
	'*'?
	name:PropName
	type_params:TsTypeParams?
	parameters:ParameterList
	':'?
	return_type:TsType?
	body:BlockStmt

SpreadElement = '...' element:Expr

PrivateName = '#' Name

Name = 'ident'

Condition = '(' condition:Expr ')'

NameRef = 'ident'

///////////////
// DECLARATIONS
///////////////

Decl =
	FnDecl
	| ClassDecl
	| VarDecl
	| TsEnum
	| TsTypeAliasDecl
	| TsNamespaceDecl
	| TsModuleDecl
	| TsInterfaceDecl

FnDecl =
	'async'?
	'function'
	'*'?
	Name
	type_parameters:TsTypeParams?
	parameters:ParameterList
	':'?
	return_type:TsType?
	body:BlockStmt

VarDecl = 'var' 'const' manual__:'let' declared:Declarator* ';'?

// @ematipico: should we consider ClassDecl = ClassExpr ?
ClassDecl  = 'class' Name ('extends' parent:NameRef)? body:ClassBody

Declarator = pattern:Pattern '!' '=' value:Expr


///////////////
// MODULE SYNTAX
///////////////

// module item
ModuleItem =
	ImportDecl
	| ExportNamed
	| ExportDefaultDecl
	| ExportDefaultExpr
	| ExportWildcard
	| ExportDecl
	| TsImportEqualsDecl
	| TsExportAssignment
	| TsNamespaceExportDecl
	| Stmt

ImportDecl =
	'import'
	imports:ImportClause*
	'type'?
	'from'
	asserted_object:ObjectExpr
	'assert'?
	';'?

// export default declaration
ExportDefaultDecl = 'export' 'default'? 'type'? decl:DefaultDecl
DefaultDecl =
	FnDecl
	| ClassDecl


// export default expression
ExportDefaultExpr = 'export' 'type'? 'default'? expr:Expr

// export wildcard
ExportWildcard = 'export' 'type'? '*' 'as'? Ident? 'from'


// export declaration
ExportDecl = 'export' 'type'? Decl


// typescript export assignment
TsExportAssignment = 'export' '=' Expr ';'?


// typescript namespace export
TsNamespaceExportDecl = 'export' 'as' 'namespace' Ident? ';'?

ImportClause =
	WildcardImport
	| NamedImports
	| Name
	| ImportStringSpecifier


NamedImports = '{' specifiers:Specifier* '}'


Specifier = name:Ident manual__:'as'? manual__alias:Name


// this is not currently implemented in rslint parser
ImportStringSpecifier = 'string'


WildcardImport = '*' 'as'? Ident?

// @ematipico this one is not entirly correct I think..
ExportNamed = 'export' 'type'? 'from'?  '{' specifiers:Specifier* '}'

///////////////
// TYPESCRIPT
///////////////
//
// Below here we want to keep all the TypeScript types
// Typescript definitions
//

TsImportEqualsDecl =
	('import' | 'export') Ident '=' module:TsModuleRef ';'?


TsModuleRef =
	TsExternalModuleRef |
	TsEntityName


TsExternalModuleRef = 'require' '(' 'string' ')'

TsType =
	TsAny
	| TsUnknown
	| TsNumber
	| TsObject
	| TsBoolean
	| TsBigint
	| TsString
	| TsSymbol
	| TsVoid
	| TsUndefined
	| TsNull
	| TsNever
	| TsThis
	| TsLiteral
	| TsPredicate
	| TsTuple
	| TsParen
	| TsTypeRef
	| TsTemplate
	| TsMappedType
	| TsImport
	| TsArray
	| TsIndexedArray
	| TsTypeOperator
	| TsIntersection
	| TsUnion
	| TsFnType
	| TsConstructorType
	| TsConditionalType
	| TsObjectType
	| TsInfer


TsAny = 'any'
TsUnknown = 'unknown'
TsNumber = Ident
TsObject = Ident
TsBoolean = Ident
TsBigint = Ident
TsString = Ident
TsSymbol = Ident
TsVoid = 'void'
TsUndefined = 'undefined'
TsNull= 'null'
TsNever = 'never'
TsThis = 'this'
TsLiteral = Ident


// typescript tuples
TsTuple = '[' elements:TsTupleElement ']'
// @ematipico: this is ugly and it's here only to maintain compatibility
// with the current parser API
TsTupleElement = Ident ':' '?' '...'? ty:TsType

TsParen = '(' ty:TsType ')'

// typescript type reference
TsTypeRef = name:TsEntityName type_args:TsTypeArgs


// typescript enum
TsEnum = 'const'? 'enum'  Ident '{' members:TsEnumMember* '}'
TsEnumMember = Ident '=' value:Expr

// typescript template literal types
TsTemplate = elements:TsTemplateElement
// @ematipico: this is broken and it's here only for compatibility
TsTemplateElement = ty:TsType '}'


// typescript mappend type
// plus and minus should be mutually exclusive
TsMappedType =
	'{'
	readonly_modifier:TsMappedTypeReadonly?
	'-'?
	'+'?
	'?'?
	param:TsMappedTypeParam
	':'
	ty:TsType
	'}'
	';'?

TsMappedTypeReadonly = '-'? '+'? 'readonly'?

// @ematipico: this type is correct and it's here only for compatibility
TsMappedTypeParam = '['? name:TsTypeName? ']'? Ident? ty:TsType


// typescript array
TsArray = '[' ty:TsType ']'

// typescript indexed array
TsIndexedArray = '[' ty:TsType ']'


// typescript predicate
TsPredicate = lhs:TsThisOrMore rhs:TsType
TsThisOrMore = TsThis | TsTypeName

// typescript type operator
TsTypeOperator = ty:TsType

// typescript intersection
// @ematipico this one should contains the "|" operator
TsIntersection = types:TsType*

// typescript union
// @ematipico this one should contains the "&" operator
TsUnion = types:TsType*


// typescript function type
// Example: (something: String) => bool
TsFnType = params:ParameterList '=>' return_type:TsType?


// typescript constructor type
// Exapmle: new (something: String): SomethingElse
TsConstructorType = 'new' params:ParameterList ':' return_type:TsType?


// typescript conditional type
// @ematipico example? can't understand what grammar it is
TsConditionalType = ty:TsType '?' ':' extends:TsExtends
TsExtends = 'extends' ty:TsType


// typescript object type
TsObjectType = '{' members:TsTypeElement* '}'


// typescript infer
TsInfer = 'infer' Ident

// typescript import
// @ematipico not sure where the dot token should be placed
// @ematipico not sure where type_args should be placed
// TsImport = 'import' '(' qualifier:TsEntityName '.' ')' type_args:TsTypeArgs


// typescrit namesapce
// TODO: not sure where to put the dot
// https://github.com/rome/tools/issues/1729
TsNamespaceDecl = 'declare' Ident '.'? TsNamespaceBody
TsNamespaceBody = TsModuleBlock | TsNamespaceDecl
TsModuleBlock = '{' items:ModuleItem '}'


// type alias declaration
TsTypeAliasDecl = 'type' type_params:TsTypeParams '=' TsType
TsTypeParams = '<'? params:TsTypeParam '>'?
TsTypeParam = Ident constraint:TsConstraint default:TsDefault

TsDefault = '=' ty:TsType
TsConstraint = 'extends' ty:TsType



// typescript module declaration
// TODO: where does the dot go exactly?
TsModuleDecl = 'declare' 'global'? 'module' '.'? Ident body:TsNamespaceBody


// typescript interface declaration
// TODO: extends and its children should be optional, together
TsInterfaceDecl =
	'declare'? 'interface' type_params:TsTypeParams
	'extends'? extends:TsExprWithTypeArgs?
	'{' members:TsTypeElement '}'


TsExprWithTypeArgs = item:TsEntityName type_params:TsTypeArgs
TsTypeElement =
	TsCallSignatureDecl
	| TsConstructSignatureDecl
	| TsPropertySignature
	| TsMethodSignature
	| TsIndexSignature

TsEntityName =
	TsTypeName
	| TsQualifiedPath

TsTypeName = Ident
TsQualifiedPath = lhs:TsEntityName '.' rhs:TsTypeName


TsTypeArgs = '<' args:TsType '>'


// @ematipico we should make an example here
TsCallSignatureDecl =  type_params:TsTypeParams parameters:ParameterList  ':' return_type:TsType
TsConstructSignatureDecl =
	'new'
	type_params:TsTypeParams
	parameters:ParameterList
	// these two should be optional together
	':'? return_type:TsType

// typescript property signature
TsPropertySignature = 'readonly'? prop:Expr '?' ':' ty:TsType

// typescript method signature
TsMethodSignature =
	'readonly'?
	key:Expr
	type_params:TsTypeParams
	parameters:ParameterList
	'?'?
	':'
	return_type:TsType

// @ematipico not sure where the dot goes here
TsImport = 'import' type_args:TsTypeArgs '.'? '(' qualifier:TsEntityName ')'

// typescript index signature
TsIndexSignature = 'readonly'? '[' pat:SinglePattern ':' ty:TsType ']'

// typescript type of access
TsAccessibility = 'private' | 'readonly'


TsConstructorParam = 'readonly' pat:Pattern

TsNonNull = expr:Expr '!'

TsAssertion = expr:Expr Ident '<' ty:TsType '>'

TsConstAssertion = expr:Expr Ident '<' 'const' '>'
