// Javascript Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          				-- comment
//   Name =      				-- non-terminal definition
//   'ident'     				-- token (terminal)
//   A B         				-- sequence
//   A | B       				-- alternation
//   A*          				-- zero or more repetition
//   (A (',' A)* ','?)	        -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)	            -- repetition of node A separated by ',' without a trailing comma
//   A?          				-- zero or one repetition
//   (A)         				-- same as A
//   label:A     				-- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Unknown nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree
//


///////////////
// UNKNOWN NODES
///////////////
// SyntaxElement is a generic data structure that is meant to track nodes and tokens
// in cases where we care about both types
//
// As Unknown* node will need to yield both tokens and nodes without discrimination,
// and their children will need to yield nodes and tokens as well.
// For this reason, SyntaxElement = SyntaxElement
SyntaxElement = SyntaxElement

JsUnknown = SyntaxElement*
JsUnknownStatement = SyntaxElement*
JsUnknownExpression = SyntaxElement*
JsUnknownMember = SyntaxElement*
JsUnknownBinding = SyntaxElement*
JsUnknownAssignment = SyntaxElement*
JsUnknownModifier = SyntaxElement*
JsUnknownImportAssertionEntry = SyntaxElement*
JsUnknownNamedImportSpecifier = SyntaxElement*

Ident = 'ident'

JsAnyRoot =
	JsScript | JsModule | JsExpressionSnipped

JsScript =
	interpreter: 'js_shebang'?
	directives: JsDirectiveList
	statements: JsStatementList
	eof: 'EOF'

JsModule =
	interpreter: 'js_shebang'?
	directives: JsDirectiveList
	items: JsModuleItemList
	eof: 'EOF'

JsExpressionSnipped =
	expression: JsAnyExpression
	eof: 'EOF'


JsDirective =
	value: 'js_string_literal'
	';'?

JsDirectiveList = JsDirective*

///////////////
// STATEMENTS
///////////////

JsAnyStatement =
	JsBlockStatement
	| JsBreakStatement
	| JsClassDeclaration
	| JsContinueStatement
	| JsDebuggerStatement
	| JsDoWhileStatement
	| JsEmptyStatement
	| JsExpressionStatement
	| JsForInStatement
	| JsForOfStatement
	| JsForStatement
	| JsIfStatement
	| JsLabeledStatement
	| JsReturnStatement
	| JsSwitchStatement
	| JsThrowStatement
	| JsTryFinallyStatement
	| JsTryStatement
	| JsUnknownStatement
	| JsVariableStatement
	| JsWhileStatement
	| JsWithStatement
	| TsEnum
	| TsInterfaceDecl
	| TsModuleDecl
	| TsNamespaceDecl
	| TsTypeAliasDecl
  | JsFunctionDeclaration


JsBlockStatement =
	'{'
	statements: JsStatementList
	'}'

JsStatementList = JsAnyStatement*

JsEmptyStatement =
    ';'

JsExpressionStatement =
    expression: JsAnyExpression ';'?


JsWhileStatement =
    'while' '(' test: JsAnyExpression ')'
    body: JsAnyStatement


JsDoWhileStatement =
    'do'
    body: JsAnyStatement
    'while' '(' test: JsAnyExpression ')'
    ';'?


// if statement
JsIfStatement =
	'if' '(' test: JsAnyExpression ')'
	consequent: JsAnyStatement
	else_clause: JsElseClause?

JsElseClause =
	'else'
	alternate: JsAnyStatement


// for..in statement
JsForStatement =
	'for'
	'('
	initializer: JsAnyForInitializer?
	first_semi: ';'
	test: JsAnyExpression?
	second_semi: ';'
	update: JsAnyExpression?
	')'
	body: JsAnyStatement

JsAnyForInitializer = JsVariableDeclarations | JsAnyExpression

// for..in statement
JsForInStatement =
	'for'
	'('
	initializer: JsAnyForInOrOfInitializer
	'in'
	expression: JsAnyExpression
	')'
	body: JsAnyStatement

// for..of statement
JsForOfStatement =
	'for'
	'await'?
	'('
	initializer: JsAnyForInOrOfInitializer
	'of'
	expression: JsAnyExpression
	')'
	body: JsAnyStatement

JsAnyForInOrOfInitializer =
	JsAnyAssignmentPattern
	| JsForVariableDeclaration

JsForVariableDeclaration =
	kind_token: ('var' | 'let' | 'const')
	declaration: JsVariableDeclaration

JsBreakStatement =
    'break'
    (label: 'ident')?
    ';'?

JsContinueStatement =
    'continue'
    (label: 'ident')?
    ';'?


JsReturnStatement =
    'return'
    argument: JsAnyExpression?
    ';'?


JsWithStatement =
    'with' '(' object: JsAnyExpression ')'
    body: JsAnyStatement


JsLabeledStatement =
    label: 'ident' ':'
    body: JsAnyStatement


JsSwitchStatement =
    'switch' '(' discriminant: JsAnyExpression ')'
    '{'
    cases: JsSwitchCaseList
    '}'

JsSwitchCaseList = JsAnySwitchClause*

JsAnySwitchClause = JsCaseClause | JsDefaultClause
JsCaseClause = 'case' test: JsAnyExpression ':' consequent: JsStatementList
JsDefaultClause = 'default' ':' consequent: JsStatementList


JsThrowStatement =
    'throw'
    argument: JsAnyExpression
    ';'?

// try..catch..finally statement
JsTryStatement =
    'try'
    body: JsBlockStatement
    catch_clause: JsCatchClause

JsTryFinallyStatement =
    'try'
    body: JsBlockStatement
    catch_clause: JsCatchClause?
    finally_clause: JsFinallyClause

JsCatchClause =
    'catch'
    declaration: JsCatchDeclaration?
    body: JsBlockStatement

JsCatchDeclaration =
    '(' binding: JsAnyBindingPattern ')'

JsFinallyClause =
    'finally'
    body: JsBlockStatement


// debugger statement
JsDebuggerStatement =
	'debugger' ';'?


///////////////
// EXPRESSIONS
///////////////

// Expression
JsAnyExpression =
	JsAnyLiteralExpression
	| CallExpr
	| ImportMeta
	| JsArrayExpression
	| JsArrowFunctionExpression
	| JsAssignmentExpression
	| JsAwaitExpression
	| JsBinaryExpression
	| JsClassExpression
	| JsComputedMemberExpression
	| JsConditionalExpression
	| JsFunctionExpression
	| JsIdentifierExpression
	| JsImportCallExpression
	| JsLogicalExpression
	| JsObjectExpression
	| JsParenthesizedExpression
	| JsPostUpdateExpression
	| JsPreUpdateExpression
	| JsSequenceExpression
	| JsStaticMemberExpression
	| JsSuperExpression
	| JsThisExpression
	| JsUnaryExpression
	| JsUnknownExpression
	| JsYieldExpression
	| NewExpr
	| NewTarget
	| Template
	| TsAssertion
	| TsConstAssertion
	| TsNonNull


Template =
	tag: JsAnyExpression?
	l_tick: '`'
	elements: TemplateElementList
	r_tick: '`'

TemplateElementList = AnyTemplateElement*

AnyTemplateElement =
	TemplateChunkElement
	| TemplateElement

TemplateChunkElement = 'template_chunk'

TemplateElement =
	'dollar_curly'
	expression: JsAnyExpression
	'}'

JsThisExpression = 'this'

JsSuperExpression = 'super'

// new expression
NewExpr = 'new' object:JsAnyExpression type_args:TsTypeArgs?  arguments: JsCallArguments?

// call expression
CallExpr =
	callee:JsAnyExpression
	optional_chain_token: '?.'?
	type_args:TsTypeArgs?
	arguments: JsCallArguments


JsAwaitExpression =
	'await'
	argument: JsAnyExpression


JsYieldExpression =
	'yield'
	argument: JsYieldArgument?

JsYieldArgument =
	'*'?
	expression: JsAnyExpression

JsImportCallExpression =
	'import'
	'('
	argument: JsAnyExpression
	')'

// new target expression
NewTarget = 'new' '.' 'target'


JsConditionalExpression =
	test: JsAnyExpression
	'?'
	consequent: JsAnyExpression
	':'
	alternate: JsAnyExpression

// import meta expression
ImportMeta = 'import' '.' 'meta'

JsFunctionExpression =
	'async'?
	'function'
	'*'?
	id: JsAnyBinding?
	type_parameters: TsTypeParams?
	parameters: JsParameters
	return_type: TsTypeAnnotation?
	body: JsFunctionBody


JsArrowFunctionExpression =
	'async'?
	type_parameters: TsTypeParams?
	parameters: JsAnyArrowFunctionParameters?
	return_type: TsTypeAnnotation?
	'=>'
	body: JsAnyArrowFunctionBody

JsAnyArrowFunctionParameters = JsParameters | JsAnyBinding
JsAnyArrowFunctionBody = JsAnyExpression | JsFunctionBody

// Array expression
JsArrayExpression =
	'['
	elements: JsArrayElementList
	']'

JsArrayElementList = (JsAnyArrayElement (',' JsAnyArrayElement)* ','?)

JsAnyArrayElement =
	JsAnyExpression
	| JsSpread
	| JsArrayHole

JsArrayHole = hole: ''?

JsAssignmentExpression =
  left: JsAnyAssignmentPattern
  operator_token: (
		'=' |'+=' | '-=' | '*=' | '/=' | '%=' |
		'**=' | '>>=' | '<<=' | '>>>=' | '&=' |
		'|=' | '^=' | '&&=' | '||=' | '??='
  )
  right: JsAnyExpression


JsSequenceExpression =
	left: JsAnyExpression
	comma: ','
	right: JsAnyExpression


JsParenthesizedExpression =
	'(' expression: JsAnyExpression ')'


JsIdentifierExpression = name: JsReferenceIdentifier

// a.b
// a.#b
JsStaticMemberExpression =
	object: JsAnyExpression
	operator: ('.' | '?.')
	member: JsAnyName

// a[b]
JsComputedMemberExpression =
	object: JsAnyExpression
	optional_chain: '?.'?
	'['
	member: JsAnyExpression
	']'

JsBinaryExpression =
    left: JsAnyExpression
    operator: (
    	'<' | '>' | '<=' | '>=' | '==' | '===' | '!=' | '!=='
    	| '+' | '-' | '*' | '/' | '%' | '**' | '<<' | '>>' | '>>>'
    	| '&' | '|' | '^' | 'in' | 'instanceof'
		)
    right: JsAnyExpression

JsLogicalExpression =
	left: JsAnyExpression
	operator: ('??' | '||' | '&&')
	right: JsAnyExpression

// unary expression
JsUnaryExpression =
  operator: ('delete' | 'void' | 'typeof' | '+' | '-' | '~' | '!')
  argument: JsAnyExpression

JsPreUpdateExpression =
    operator: ('++' | '--')
    operand: JsAnyAssignment

JsPostUpdateExpression =
    operand: JsAnyAssignment
    operator: ('++' | '--')


///////////////
// OBJECTS
///////////////
JsAnyObjectMemberName =
	JsLiteralMemberName
	| JsComputedMemberName

JsObjectExpression =
	'{'
	members: JsObjectMemberList
	'}'

JsObjectMemberList = (JsAnyObjectMember (',' JsAnyObjectMember)* ','?)

JsAnyObjectMember =
	JsPropertyObjectMember
	| JsMethodObjectMember
	| JsGetterObjectMember
	| JsSetterObjectMember
	| JsShorthandPropertyObjectMember
	| JsSpread
	| JsUnknownMember


// { a: 5, b: () => {} }
//   ^^^^  ^^^^^^^^^^^
JsPropertyObjectMember =
	name: JsAnyObjectMemberName
	':'
	value: JsAnyExpression

// { get a() {} }
//   ^^^^^^^^^^
JsGetterObjectMember =
	'get'
	name: JsAnyObjectMemberName
	'('')'
	return_type: TsTypeAnnotation?
	body: JsFunctionBody

//  { set a(value) {} }
//    ^^^^^^^^^^^^^^^
JsSetterObjectMember =
	'set'
	name: JsAnyObjectMemberName
	'('
	parameter: JsAnyBindingPattern
	')'
	body: JsFunctionBody

// { a() {}, async b() {}, async * c() {} }
//   ^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^
JsMethodObjectMember =
	'async'?
	'*'?
	name: JsAnyObjectMemberName
	type_params: TsTypeParams?
	parameters: JsParameters
	return_type: TsTypeAnnotation?
	body: JsFunctionBody

// { a }
//   ^
JsShorthandPropertyObjectMember = name: JsReferenceIdentifier

///////////////
// CLASSES
///////////////

JsClassDeclaration  =
	'class'
	id: JsAnyBinding
	extends_clause: JsExtendsClause?
	implements_clause: TsImplementsClause?
	'{'
	members: JsClassMemberList
	'}'


JsClassExpression =
	'class'
	id: JsAnyBinding?
	extends_clause: JsExtendsClause?
	implements_clause: TsImplementsClause?
	'{'
	members: JsClassMemberList
	'}'

JsClassMemberList = JsAnyClassMember*


TsImplementsClause =
	'implements'
	interfaces: TsTypeList

TsTypeList = (TsExprWithTypeArgs (',' TsExprWithTypeArgs)*)

// class Test extends A {}
//            ^^^^^^^^^
JsExtendsClause =
	'extends'
	super_class: JsAnyExpression

// class Test { #test; }
//              ^^^^^
JsPrivateClassMemberName = '#' id: 'ident'

JsAnyClassMemberName =
	JsLiteralMemberName
	| JsComputedMemberName
	| JsPrivateClassMemberName

JsAnyClassMember =
	JsConstructorClassMember
	| JsPropertyClassMember
	| JsMethodClassMember
	| JsGetterClassMember
	| JsSetterClassMember
	| JsEmptyClassMember
	| TsIndexSignature
	| JsUnknownMember

// class Test { constructor() {} }
//              ^^^^^^^^^^^^^^^^
// class Test { "constructor"() {} }
//              ^^^^^^^^^^^^^^^^^^
// class Test { 'constructor'() {} }
//              ^^^^^^^^^^^^^^^^^^
JsConstructorClassMember =
	access_modifier: ('private' | 'protected' | 'public')?
	name: JsLiteralMemberName
	type_parameters: TsTypeParams?
	parameters: JsConstructorParameters
	body: JsFunctionBody

JsConstructorParameters =
	'('
	parameters: JsConstructorParameterList
	')'

JsConstructorParameterList = (JsAnyConstructorParameter (',' JsAnyConstructorParameter)* ','?)

JsAnyConstructorParameter =
	TsConstructorParam
	| JsAnyBindingPattern
	| JsBindingPatternWithDefault

// class Test { a; b = 1; static c; }
//              ^^ ^^^^^^ ^^^^^^^^^
JsPropertyClassMember =
	'declare'?
	access_modifier: ('private' | 'protected' | 'public')?
	'static'?
	'readonly'?
	'abstract'?
	name: JsAnyClassMemberName
	'?'?
	'!'?
	type: TsTypeAnnotation?
	value: JsInitializerClause?
	';'?

// class Test { a() {} }
//              ^^^^^^
JsMethodClassMember =
	access_modifier: ('private' | 'protected' | 'public')?
	'static'?
	'abstract'?
	'async'?
	'*'?
	name: JsAnyClassMemberName
	type_parameters: TsTypeParams?
	parameters: JsParameters
	return_type: TsTypeAnnotation?
	body: JsFunctionBody

// class Test { get a() {} }
//              ^^^^^^^^^^
JsGetterClassMember =
	access_modifier: ('private' | 'protected' | 'public')?
	'static'?
	'abstract'?
	'get'
	name: JsAnyClassMemberName
	'(' ')'
	return_type: TsTypeAnnotation?
	body: JsFunctionBody

// class Test { set a(v) {} }
//              ^^^^^^^^^^^
JsSetterClassMember =
	access_modifier: ('private' | 'protected' | 'public')?
	'static'?
	'abstract'?
	'set'
	name: JsAnyClassMemberName
	'('
	parameter: JsAnyBindingPattern
	')'
	body: JsFunctionBody

JsEmptyClassMember = ';'

///////////////
// ASSIGNMENT TARGETS
///////////////

JsAnyAssignment =
	JsIdentifierAssignment
	| JsStaticMemberAssignment
	| JsComputedMemberAssignment
	| JsParenthesizedAssignment
	| JsUnknownAssignment


JsAssignmentWithDefault =
	pattern: JsAnyAssignmentPattern
	'='
	default: JsAnyExpression

// (a) = "test"
// ^^^
JsParenthesizedAssignment =
	'('
	assignment: JsAnyAssignment
	')'

// Assignment to an identifier from the lexical scope
// b = "test"
// ^
JsIdentifierAssignment = name: 'ident'

// a.b = a.#b = "test"
// ^^^   ^^^^
JsStaticMemberAssignment =
	object: JsAnyExpression
	'.'
	member: JsAnyName

// a['b'] = a[expr] = "test"
// ^^^^^^   ^^^^^^^
JsComputedMemberAssignment =
	object: JsAnyExpression
	'['
	member: JsAnyExpression
	']'

JsAnyAssignmentPattern =
	JsAnyAssignment
	| JsArrayAssignmentPattern
	| JsObjectAssignmentPattern


// [a, b = "b", ...rest] = bar
// ^^^^^^^^^^^^^^^^^^^^^^
JsArrayAssignmentPattern =
	'['
	elements: JsArrayAssignmentPatternElementList
	']'

JsArrayAssignmentPatternElementList = (JsAnyArrayAssignmentPatternElement (',' JsAnyArrayAssignmentPatternElement)* ','?)

JsAnyArrayAssignmentPatternElement =
	JsAssignmentWithDefault
	| JsAnyAssignmentPattern
	| JsArrayAssignmentPatternRestElement
	| JsArrayHole
	| JsUnknownAssignment

// [a, b, ...rest] = [];
//        ^^^^^^^
JsArrayAssignmentPatternRestElement =
	'...'
	pattern: JsAnyAssignmentPattern

// ({a, b: x, ...rest} = c)
//  ^^^^^^^^^^^^^^^^^^
JsObjectAssignmentPattern =
	'{'
	properties: JsObjectAssignmentPatternPropertyList
	'}'

JsObjectAssignmentPatternPropertyList = (JsAnyObjectAssignmentPatternMember (',' JsAnyObjectAssignmentPatternMember)* ','?)

JsAnyObjectAssignmentPatternMember =
	JsObjectAssignmentPatternShorthandProperty
	| JsObjectAssignmentPatternProperty
	| JsObjectAssignmentPatternRest
	| JsUnknownAssignment

// ({ x } = b) or ({ x = "test" } = b)
//    ^              ^^^^^^^^^^
JsObjectAssignmentPatternShorthandProperty =
	identifier: JsAnyAssignment
	init: JsInitializerClause?

// ({ x: a } = b) or ({ x: a = "test" } = b)
//    ^^^^              ^^^^^^^^^^^^^
JsObjectAssignmentPatternProperty =
	member: JsName
	':'
	pattern: JsAnyAssignmentPattern
	init: JsInitializerClause?

// ({ a, ...b } = a)
//       ^^^^
JsObjectAssignmentPatternRest =
	'...'
	target: JsAnyAssignment

///////////////
// BINDINGS
///////////////

JsAnyBinding =
	JsIdentifierBinding
	| JsUnknownBinding

// Binds a value to an identifier.
// let x = OR function(test) {}
//     ^               ^^^^
JsIdentifierBinding =
	name: 'ident'

// [ a = "b"] = [];
//   ^^^^^^^
JsBindingPatternWithDefault =
	pattern: JsAnyBindingPattern
	'='
	default: JsAnyExpression

JsAnyBindingPattern =
	JsAnyBinding
	| JsArrayBindingPattern
	| JsObjectBindingPattern

// let [a, b] = [1, 2];
//     ^^^^^^
JsArrayBindingPattern =
	'['
	elements: JsArrayBindingPatternElementList
	']'

JsArrayBindingPatternElementList = (JsAnyArrayBindingPatternElement (',' JsAnyArrayBindingPatternElement)* ','?)

JsAnyArrayBindingPatternElement =
	JsArrayHole
	| JsAnyBindingPattern
	| JsBindingPatternWithDefault
	| JsArrayBindingPatternRestElement

JsArrayBindingPatternRestElement =
	'...'
	pattern: JsAnyBindingPattern

// let { a, b} = c;
//     ^^^^^^^
JsObjectBindingPattern =
	'{'
	properties: JsObjectBindingPatternPropertyList
	'}'

JsObjectBindingPatternPropertyList = (JsAnyObjectBindingPatternMember (',' JsAnyObjectBindingPatternMember)* ','?)

JsAnyObjectBindingPatternMember =
	JsObjectBindingPatternProperty
	| JsObjectBindingPatternRest
	| JsObjectBindingPatternShorthandProperty
	| JsIdentifierBinding
	| JsUnknownBinding

// let { a: b.m } = {}
//       ^^^^^^
// let { a: b.m = "test" } = {}
//       ^^^^^^^^^^^^^^^
JsObjectBindingPatternProperty =
	member: JsAnyObjectMemberName
	':'
	pattern: JsAnyBindingPattern
	init: JsInitializerClause?

// let { a } = c
//       ^
// let { a = "test" } = c
//       ^^^^^^^^^^
JsObjectBindingPatternShorthandProperty =
	identifier: JsAnyBinding
	init: JsInitializerClause?

// let { ...a } = c
//       ^^^^
JsObjectBindingPatternRest =
	'...'
	binding: JsAnyBinding


///////////////
// LITERALS
///////////////

JsAnyLiteralExpression =
	JsStringLiteralExpression
	| JsNumberLiteralExpression
	| JsBigIntLiteralExpression
	| JsBooleanLiteralExpression
	| JsNullLiteralExpression
	| JsRegexLiteralExpression

// "abcd" | 'abcd'
JsStringLiteralExpression = value: 'js_string_literal'

// 4, 5.5, 0x00, ...
JsNumberLiteralExpression = value: 'js_number_literal'

// 45n
JsBigIntLiteralExpression =  value: 'js_big_int_literal'

// true, false
JsBooleanLiteralExpression = value_token: ('true' | 'false')

// null
JsNullLiteralExpression = value: 'null'

JsRegexLiteralExpression = value: 'js_regex_literal'


///////////////
// DECLARATIONS
///////////////

JsFunctionDeclaration =
	'async'?
	'function'
	'*'?
	id: JsAnyBinding
	type_parameters: TsTypeParams?
	parameters: JsParameters
	return_type: TsTypeAnnotation?
	body: JsFunctionBody

TsTypeAnnotation =
	':'
	type: TsType

// let a, b = c;
JsVariableStatement =
    declarations: JsVariableDeclarations ';'?

// Declaration of multiple variables
// let a, b = c;
// ^^^^^^^^
JsVariableDeclarations =
    kind: ('var' | 'const' | 'let')
    items: JsVariableDeclarationList

JsVariableDeclarationList = (JsVariableDeclaration (',' JsVariableDeclaration)*)

// let b = c;
//     ^^^^^
JsVariableDeclaration =
    id: JsAnyBindingPattern
    '!'?
    type_annotation: TsTypeAnnotation?
    initializer: JsInitializerClause?


///////////////
// MODULE SYNTAX
///////////////

JsAnyModuleItem =
	JsAnyStatement
	| JsImport
	| ExportDefaultDecl
	| ExportDefaultExpr
	| ExportWildcard
	| ExportDecl
	| TsImportEqualsDecl
	| TsExportAssignment
	| TsNamespaceExportDecl

JsModuleItemList = JsAnyModuleItem*

JsImport = 'import'
	import_clause: AnyJsImportClause
	';'?

AnyJsImportClause =
    JsImportBareClause
    | JsName
    | JsImportNamedClause
    | JsImportDefaultClause
    | JsImportNamespaceClause
//    | TsImportRequireClause
//    | TsImportAliasClause

// import "abcd"
// import "abcd" assert ...
JsImportBareClause =
	source: JsModuleSource
	assertion: JsImportAssertion?

// import foo from "mod"
// import type foo from "mod"
JsImportDefaultClause =
		// 'type'?
		local_name: JsAnyBinding
		'from'
		source: JsModuleSource
		assertion: JsImportAssertion?

// import * as foo from "mod";
// import type * as foo from "mod";
JsImportNamespaceClause =
  // 'type'
	'*'
	'as'
	local_name: JsAnyBinding
	'from'
	source: JsModuleSource
	assertion: JsImportAssertion?

// import { a, b: c } from "d"
//        ^^^^^^^^^^^^^^^^^^^^
// import c, { b } from "c"
//        ^^^^^^^^^^^^^^^^^
// import { type a } from "c"
//        ^^^^^^^^^^^^^^^^^^^
// import foo, * as bar from "mod"
//        ^^^^^^^^^^^^^^^^^^^^^^^^
// import type { foo } from "mod";
//        ^^^^^^^^^^^^^^^^^^^^^^^
// import foo, { type bar } from "mod";
JsImportNamedClause =
    // 'type'?
    default_specifier: JsDefaultImportSpecifier?
    named_import: JsAnyNamedImport
    'from'
    source: JsModuleSource
    assertion: JsImportAssertion?

// import a, { b, c } from "d";
//        ^^
JsDefaultImportSpecifier =
    local_name: JsAnyBinding
    trailing_comma: ','

JsAnyNamedImport =
	JsNamedImportSpecifiers
	|  JsNamespaceImportSpecifier

// import a, * as b from "d";
//           ^^^^^^
JsNamespaceImportSpecifier =
    '*'
    'as'
    local_name: JsAnyBinding

// import a, { b, c } from "d";
//           ^^^^^^^^
JsNamedImportSpecifiers =
    '{'
    specifiers: JsNamedImportSpecifierList
    '}'

JsNamedImportSpecifierList = (JsAnyNamedImportSpecifier (',' JsAnyNamedImportSpecifier)* ','?)

JsAnyNamedImportSpecifier =
    JsShorthandNamedImportSpecifier
    | JsNamedImportSpecifier
    | JsUnknownNamedImportSpecifier

// import { foo as test } from "mod";
//          ^^^^^^^^^^^
// import { type foo as test } from "mod";
//          ^^^^^^^^^^^^^^^^^
JsNamedImportSpecifier =
    // 'type'?
    name: JsLiteralExportName
    'as'
    local_name: JsAnyBinding

// import { type foo } from "mod";
//          ^^^^^^^^
JsShorthandNamedImportSpecifier =
    // 'type'?
    local_name: JsAnyBinding

// import a from "mod" assert { type: "json" }
//                     ^^^^^^^^^^^^^^^^^^^^^^^
JsImportAssertion =
    'assert'
    '{'
    assertions: JsImportAssertionEntryList
    '}'

JsImportAssertionEntryList = (JsAnyImportAssertionEntry (',' JsAnyImportAssertionEntry)* ','?)

JsAnyImportAssertionEntry =
	JsImportAssertionEntry
	| JsUnknownImportAssertionEntry

// import a from "mod" assert { type: "json" }
//                              ^^^^^^^^^^^^
JsImportAssertionEntry =
    key: ('ident' | 'js_string_literal')
    ':'
    value: 'js_string_literal'

// import { a as b } from "c"
//          ^
// export { a as "a-b-c" };
//               ^^^^^^^
JsLiteralExportName = value: ('ident' | 'js_string_literal')


// import "test"
//        ^^^^^^
// export a from "b"
//               ^^^
JsModuleSource = value: 'js_string_literal'

// export default declaration
ExportDefaultDecl = 'export' 'default'? 'type'? decl:DefaultDecl
DefaultDecl =
	JsFunctionDeclaration
	| JsClassDeclaration


// export default expression
ExportDefaultExpr = 'export' 'type'? 'default'? expr:JsAnyExpression

// export wildcard
ExportWildcard = 'export' 'type'? '*' 'as'? ident: Ident? 'from' source: 'js_string_literal'


// export declaration
ExportDecl = 'export' 'type'? decl: JsAnyExportDeclaration

JsAnyExportDeclaration =
	JsFunctionDeclaration
	| JsClassDeclaration
	| JsVariableStatement
	| ExportNamed
	| TsEnum
	| TsTypeAliasDecl
	| TsNamespaceDecl
	| TsModuleDecl
	| TsInterfaceDecl


// typescript export assignment
TsExportAssignment = 'export' '=' expr: JsAnyExpression ';'?


// typescript namespace export
TsNamespaceExportDecl = 'export' 'as' 'namespace' ident: Ident? ';'?

Specifier = name:JsName 'as'? alias: JsName?

// @ematipico this one is not entirely correct I think..
ExportNamed = '{' specifiers: ExportNamedSpecifierList '}' 'from'?  'js_string_literal'? ';'?

ExportNamedSpecifierList = (Specifier (',' Specifier)* ','?)

///////////////
// AUXILIARY
///////////////

// { ...a }
//   ^^^^
// [ ...a ]
//   ^^^^
JsSpread =
	'...'
	argument: JsAnyExpression


// Reference to an identifier from the lexical scope
JsReferenceIdentifier = value: 'ident'

// A js identifier that is neither a binding, assignment, nor a reference.
// For example a member name
JsName = value: 'ident'

JsPrivateName =
	'#'
	value: 'ident'

JsAnyName =
	JsName
	| JsPrivateName


// { a: ..., "b": ..., 4: ... }
//   ^       ^^^       ^
JsLiteralMemberName = value: ('ident' | 'js_string_literal' | 'js_number_literal')

// { [call()]: ... }
//   ^^^^^^^^
JsComputedMemberName =
	'['
	expression: JsAnyExpression
	']'


JsParameters =
	'('
	items: JsParameterList
	')'

JsParameterList = (JsAnyParameter (',' JsAnyParameter)* ','?)

JsAnyParameter = JsAnyBindingPattern | JsBindingPatternWithDefault | JsRestParameter

JsRestParameter =
	'...'
	binding: JsAnyBindingPattern

JsCallArguments = '(' args: JsCallArgumentList ')'

JsCallArgumentList = (JsAnyExpression (',' JsAnyExpression)* ','?)


// let a = 10;
//       ^^^^
// class { a = 10; }
//           ^^^^
JsInitializerClause =
	'='
	expression: JsAnyExpression

JsFunctionBody =
	'{'
	directives: JsDirectiveList
	statements: JsStatementList
	'}'

///////////////
// TYPESCRIPT
///////////////
//
// Below here we want to keep all the TypeScript types
// Typescript definitions
//

TsImportEqualsDecl =
	('import' | 'export') ident: Ident '=' module:TsModuleRef ';'?


TsModuleRef =
	TsExternalModuleRef |
	TsEntityName


TsExternalModuleRef = 'require' '(' module: 'js_string_literal' ')'

TsType =
	TsAny
	| TsUnknown
	| TsNumber
	| TsObject
	| TsBoolean
	| TsBigint
	| TsString
	| TsSymbol
	| TsVoid
	| TsUndefined
	| TsNull
	| TsNever
	| TsThis
	| TsLiteral
	| TsPredicate
	| TsTuple
	| TsParen
	| TsTypeRef
	| TsTemplate
	| TsMappedType
	| TsImport
	| TsArray
	| TsIndexedArray
	| TsTypeOperator
	| TsIntersection
	| TsUnion
	| TsFnType
	| TsConstructorType
	| TsConditionalType
	| TsObjectType
	| TsInfer


TsAny = 'any'
TsUnknown = 'unknown'
TsNumber = ident: Ident
TsObject = ident: Ident
TsBoolean = ident: Ident
TsBigint = ident: Ident
TsString = ident: Ident
TsSymbol = ident: Ident
TsVoid = 'void'
TsUndefined = 'undefined'
TsNull= 'null'
TsNever = 'never'
TsThis = 'this'
TsLiteral = ident: Ident


// typescript tuples
TsTuple = '[' elements:TsTupleElement ']'
// @ematipico: this is ugly and it's here only to maintain compatibility
// with the current parser API
TsTupleElement = ident: Ident ':' '?' '...'? ty:TsType

TsParen = '(' ty:TsType ')'

// typescript type reference
TsTypeRef = name:TsEntityName type_args:TsTypeArgs


// typescript enum
TsEnum = 'const'? 'enum'  ident: Ident '{' members: TsEnumMemberList '}'

TsEnumMemberList = TsEnumMember*
TsEnumMember = ident: Ident '=' value:JsAnyExpression

// typescript template literal types
TsTemplate = elements:TsTemplateElement
// @ematipico: this is broken and it's here only for compatibility
TsTemplateElement = ty:TsType '}'


// typescript mappend type
// plus and minus should be mutually exclusive
TsMappedType =
	'{'
	readonly_modifier:TsMappedTypeReadonly?
	'-'?
	'+'?
	'?'?
	param:TsMappedTypeParam
	':'
	ty:TsType
	'}'
	';'?

TsMappedTypeReadonly = '-'? '+'? 'readonly'?

// @ematipico: this type is correct and it's here only for compatibility
TsMappedTypeParam = '['? name:TsTypeName? ']'? ident: Ident? ty:TsType


// typescript array
TsArray = '[' ty:TsType ']'

// typescript indexed array
TsIndexedArray = '[' ty:TsType ']'


// typescript predicate
TsPredicate = lhs:TsThisOrMore rhs:TsType
TsThisOrMore = TsThis | TsTypeName

// typescript type operator
TsTypeOperator = ty:TsType

// typescript intersection
// @ematipico this one should contains the "|" operator
TsIntersection = types: TsTypeList

// typescript union
// @ematipico this one should contains the "&" operator
TsUnion = types: TsTypeList


// typescript function type
// Example: (something: String) => bool
TsFnType = params:JsParameters'=>' return_type:TsType?


// typescript constructor type
// Exapmle: new (something: String): SomethingElse
TsConstructorType = 'new' params:JsParameters ':' return_type:TsType?


// typescript conditional type
// @ematipico example? can't understand what grammar it is
TsConditionalType = ty:TsType '?' ':' extends:TsExtends
TsExtends = 'extends' ty:TsType


// typescript object type
TsObjectType = '{' members: TsObjectMemberList '}'

TsObjectMemberList = TsTypeElement*


// typescript infer
TsInfer = 'infer' ident: Ident

// typescript import
// @ematipico not sure where the dot token should be placed
// @ematipico not sure where type_args should be placed
// TsImport = 'import' '(' qualifier:TsEntityName '.' ')' type_args:TsTypeArgs


// typescrit namesapce
// TODO: not sure where to put the dot
// https://github.com/rome/tools/issues/1729
TsNamespaceDecl = 'declare' ident: Ident '.'? body: TsNamespaceBody
TsNamespaceBody = TsModuleBlock | TsNamespaceDecl
TsModuleBlock = '{' items: JsAnyStatement '}'


// type alias declaration
TsTypeAliasDecl = 'type' type_params:TsTypeParams '=' ty:TsType
TsTypeParams = '<'? params:TsTypeParam '>'?
TsTypeParamList = (TsTypeParam (',' TsTypeParam)*)
TsTypeParam = ident: Ident constraint:TsConstraint default:TsDefault

TsDefault = '=' ty:TsType
TsConstraint = 'extends' ty:TsType



// typescript module declaration
// TODO: where does the dot go exactly?
TsModuleDecl = 'declare' 'global'? 'module' '.'? ident: Ident body:TsNamespaceBody


// typescript interface declaration
// TODO: extends and its children should be optional, together
TsInterfaceDecl =
	'declare'? 'interface' type_params:TsTypeParams
	'extends'? extends:TsExprWithTypeArgs?
	'{' members:TsTypeElement '}'


TsExprWithTypeArgs = item: TsEntityName type_params: TsTypeArgs?
TsTypeElement =
	TsCallSignatureDecl
	| TsConstructSignatureDecl
	| TsPropertySignature
	| TsMethodSignature
	| TsIndexSignature

TsEntityName =
	TsTypeName
	| TsQualifiedPath

TsTypeName = ident: 'ident'
TsQualifiedPath = lhs:TsEntityName '.' rhs:TsTypeName


TsTypeArgs = '<' TsTypeArgList '>'
TsTypeArgList = (TsType (',' TsType)* )


// @ematipico we should make an example here
TsCallSignatureDecl =  type_params:TsTypeParams parameters:JsParameters  ':' return_type:TsType
TsConstructSignatureDecl =
	'new'
	type_params:TsTypeParams
	parameters:JsParameters
	// these two should be optional together
	':'? return_type:TsType

// typescript property signature
TsPropertySignature = 'readonly'? prop:JsAnyExpression '?' ':' ty:TsType

// typescript method signature
TsMethodSignature =
	'readonly'?
	key:JsAnyExpression
	type_params:TsTypeParams
	parameters:JsParameters
	'?'?
	':'
	return_type:TsType

// @ematipico not sure where the dot goes here
TsImport = 'import' type_args:TsTypeArgs '.'? '(' qualifier:TsEntityName ')'

// typescript index signature
TsIndexSignature = 'readonly'? '[' pat:JsAnyBinding ':' ty:TsType ']'


TsConstructorParam =
	accessibility: ('private' | 'protected' | 'public')?
	'readonly'?
	pat:JsAnyBindingPattern

TsNonNull = expr:JsAnyExpression '!'

TsAssertion = expr:JsAnyExpression ident: Ident '<' ty:TsType '>'

TsConstAssertion = expr:JsAnyExpression ident: Ident '<' 'const' '>'
