// Rules
// Create a node when:
// - contains multiple children (not just a token)
// - it is part of an union type over nodes
// otherwise, create a token

// Create a wrapper node when the optionality of two or more children depend on each other.
// - For example, the 'else' token and the alternate branch must either be both present or absent.
//      -> Create an ElseClause wrapping the token and the alternate branch.
// Create a wrapper node for lists of children that use a common separator, for example
//   `ArrayElement = value: Expression, trailing_comma: ','`
//   This to guarantee that all tokens can be accessed and that you have a single type of children nodes

JsScript =
    interpreter: 'js_shebang'? // rslint: shebang
    directives: 'js_directive'* // Or a directive node?
    statements: JsAnyStatement* // Called items

JsModule =
    interpreter: 'js_shebang'?
    directives: 'js_directive'*
    statements: JsAnyStatement*

// --------------------- Unknowns ---------------------
// Hack to make ungrammar happy. Let's hope they never ban recursive types xD
// Add special handling in the source generator to skip the `SyntaxNode`, `SyntaxToken`, and `SyntaxElement` types, so that they resolve to the global `SyntaxNode`, `SyntaxToken`, and `SyntaxElement` definitions.
SyntaxNode = SyntaxNode
SyntaxToken = SyntaxToken
SyntaxElement = SyntaxNode | SyntaxToken

JsUnknownStatement = SyntaxElement*
JsUnknownExpression = SyntaxElement*
JsUnknownPattern = SyntaxElement*
JsUnknownMember = SyntaxElement*
JsUnknownBinding = SyntaxElement*
JsUnknownAssignmentTarget = SyntaxElement*

// --------------------- Statements ---------------------

                                        // RSLint
JsAnyStatement = JsBlockStatement       // BlockStmt
    | JsBreakStatement                  // BreakStmt
    | JsClassDeclaration                // ClassDecl
    | JsDebuggerStatement               // DebuggerStmt
    | JsEmptyStatement                  // EmptyStmt
    | JsExpressionStatement             // ExprStmt
    | JsForStatement                    // ForStmt
    | JsForInStatement                  // ForInStmt
    | JsForOfStatement                  // ForOfStmt
    | JsFunctionDeclaration             // FnDecl
    | JsIfStatement                     // IfStmt
    | JsLabeledStatement                // LabelledStmt
    | JsReturnStatement                 // ReturnStmt
    | JsSwitchStatement                 // SwitchStmt
    | JsTryStatement                    // TryStmt
    | JsVariableDeclarationStatement    // VarDecl
    | JsWhileStatement                  // WhileStmt
    | JsWithStatement                   // WithStmt
    | JsExport                          // ExportDecl
    | JsExportDefault                   // ExportDefaultDecl
    | JsExportFrom                      // ExportNamed
    | JsExportAllFrom                   // ExportWildcard
    | JsImport                          // ??
    | JsImportModule                    // ??
    | JsUnknownStatement

JsBlockStatement =
    '{' statements: JsAnyStatement* '}'

JsBreakStatement =
    'break'
    (label: 'js_identifier')?
    ';'?

JsContinueStatement =
    'continue'
    (label: 'js_identifier')?
    ';'?

JsDebuggerStatement =
    'debugger' ';'?

// RSLint uses Condition for: (test)
JsDoWhileStatement =
    'do' body: JsAnyStatement
    'while' '(' test: JsAnyExpression ')' ';'?

JsEmptyStatement =
    ';'

JsExpressionStatement =
    expression: JsAnyExpression ';'?

// Difference to RSLint: no ForInit, ForTest and ForUpdate: RSLint needed the extra kinds so that it could keep the test/update apart
JsForStatement =
    'for' '('
    init: JsForInit? init_semicolon: ';'
    test: JsAnyExpression? test_semicolon: ';'
    update: JsAnyExpression?
    ')'
    body: JsAnyStatement

JsForInit = JsAnyExpression | JsVariableDeclaration

JsForInStatement =
    'for' '(' left: JsForLeft 'in' right: JsAnyExpression ')'
    body: JsAnyStatement

JsForOfStatement =
    'for' 'await'?
    '('
    left: JsForLeft
    'of'
    right: JsAnyExpression
    ')'
    body: JsAnyStatement

JsForLeft = JsVariableDeclaration |  JsAnyAssignmentTarget

JsFunctionDeclaration =
    'function' '*'?
    id: JsIdentifierBinding
    parameter_list: JsParameterList
    body: JsFunctionBody

// Doesn't exist in Rome, rome uses the same type for block/function bodies.
// Reason for splitting: Directives can only exist in function bodies (anything introducing new scope)
JsFunctionBody =
    '{'
    directives: 'directive'*
    body: JsAnyStatement*
    '}'

JsIfStatement =
    'if' '(' test: JsAnyExpression ')'
    consequence: JsAnyStatement
    else_clause: JsElseClause?

JsElseClause =
    'else'
    alternate: JsAnyStatement

JsLabeledStatement =
    label: 'js_identifier' ':'
    body: JsAnyStatement

JsReturnStatement =
    'return' argument: JsAnyExpression? ';'?

JsSwitchStatement =
    'switch' '(' discriminant: JsAnyExpression ')'
    cases: JsSwitchCase*

// Introduce a case clause / default because the optionality of the tokens depend on which variant it is
// An alternative would be to have preDefaultCases, defaultCases, postDefaultCases
JsSwitchCase = JsCaseClause | JsDefaultClause
JsCaseClause = 'case' test: JsAnyExpression ':' consequent: JsAnyStatement*
JsDefaultClause = 'default' ':' consequent: JsAnyStatement*

JsThrowStatement =
    'throw' argument: JsAnyExpression ';'?

JsTryStatement =
    'try'
    block: JsBlockStatement
    catch_clause: JsCatchClause

// Having a `JsTryStatement` and a `JsTryFinallyStatement` isn't ideal because passes must query both if they want to handle try statements.
// Alternatives are
// - Keep single `JsTryStatement` type that contains a list of `try_handlers`+. less guarantess about the handlers
// - Keep single `JsTryStatement` type but create a `TryHandler = CatchClause | FinallyClause | CatchFinallyClause` node so that users can match the whole try statement.
JsTryFinallyStatement =
    'try'
    block: JsBlockStatement
    catch_clause: JsCatchClause?
    finally_clause: JsFinallyClause

// Group catch parameters because '(', parameter, ')' are all either optional or mandatory depending if any of them are
JsCatchClause =
    'catch'
    declaration: JsCatchDeclaration?
    body: JsBlockStatement

JsCatchDeclaration =
    '(' binding: JsAnyBinding ')'

JsFinallyClause =
    'finally'
    body: JsBlockStatement

JsVariableDeclarationStatement =
    declaration: JsVariableDeclaration ';'?

JsVariableDeclaration =
    kind_token: ('var' | 'let' | 'const')
    declarators: (JsVariableDeclarator (',' JsVariableDeclarator)*)

JsVariableDeclarator =
    id: JsAnyBinding '=' init: JsAnyExpression?

JsWhileStatement =
    'while' '(' test: JsAnyExpression ')'
    body: JsAnyStatement

JsWithStatement =
    'with' '(' object: JsAnyExpression ')'
    body: JsAnyStatement

// --------------------- EXPRESSIONS ---------------------

// enum Expr {
//     NewTarget, // new.target not supported
//     ImportMeta, // import.meta not supported
//     SuperCall,  -> CallExpression
//     PrivatePropAccess, -> MemberExpression
// }
                                        // RSLint Name
JsAnyExpression = JsArrayExpression     // ArrayExpr
    | JsArrowFunctionExpression         // ArrowExpr
    | JsAssignmentExpression            // AssignExpr
    | JsAwaitExpression                 // AwaitExpr
    | JsBinaryExpression                // BinExpr
    | JsCallExpression                  // CallExpr
    | JsClassExpression                 // ClassExpr
    | JsConditionalExpression           // CondExpr
    | JsDoExpression
    | JsFunctionExpression              // FnExpr
    | JsImportCall                      // ImportCall
    | JsLogicalExpression               // BinExp
    | JsMemberExpression                // DotExpr, BracketExpr
    | JsNewExpression                   // NewExpr
    | JsObjectExpression                // ObjectExpr
    | JsOptionalCallExpression          // CallExpr -> with access to optional token
    | JsParenthesizedExpression         // GroupingExpr
    | JsReferenceIdentifierExpression   // NameRef (Rome: JsReferenceIdentifier, Shift: IdentifierExpression)
    | JsSequenceExpression              // SeqExpr
    | JsSuperExpression                 // Super  -> Shift doesn't model Super as expression, I guess to make it sure that it is only allowed in very specific places (call expressions, member object etc. Might be worth making the same distingshen)
    | JsTaggedTemplateExpression        // TemplateString
    | JsThisExpression                  // This
    | JsUnaryExpression                 // UnaryExpression, covers `await` as well... but why does RSlint have await expression and the unary expression with await??
    | JsPreUpdateExpression             // UnaryExpression (Rome: JsUpdateExpression)
    | JsPostUpdateExpression            // UnaryExpression (Rome: JsUpdateExpression)
    | JsYieldExpression                 // YieldExpr
    | JsBooleanLiteral                  // Literal
    | JsBigIntLiteral                   // Literal
    | JsNullLiteral                     // Literal
    | JsNumberLiteral                   // Literal
    | JsStringLiteral                   // Literal
    | JsTemplateLiteral
    | JsUnknownExpression

JsArrayExpression =
    '['
    // Not 100% correct because array holes must have a trailing comma. But enforcing
    // this would make it too awkward to use
    elements: (JsAnyArrayElement (',' JsAnyArrayElement)* ','?)
    ']'

// Doesn't exist in Rome classic nor RSLint. Required so that we can refer the ',' token
JsAnyArrayElement = JsSpread | JsAnyExpression | JsArrayHole

JsArrowFunctionExpression =
    'async'?
    parameters: JsAnyArrowFunctionParameters
    '=>'
    body: JsStatementOrExpression

JsAnyArrowFunctionParameters = JsParameterList | JsAnyParameter

JsAssignmentExpression =
    left: JsAnyAssignmentTarget
    operator: ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '|=' | '^=' | '&=' | '**=' | '&&=' | '||=' | '??=')
    right: JsAnyExpression

JsAwaitExpression =
    'await' argument: JsAnyExpression

JsBinaryExpression =
    left: JsAnyExpression
    operator: ('==' | '!=' | '===' | '**' | '!==' | '<' | '<=' | '>' | '>=' | '<<' | '>>' | '>>>' | '+' | '-' | '*' | '/' | '%' | '|' | '^' | '&' | 'in' | 'instanceof')
    right: JsAnyExpression

// Rome classic adds super to callee but this isn't needed because Rome adds super to the expression union???
JsCallExpression =
    callee: JsAnyExpression
    argument_list: JsArgumentList

JsConditionalExpression =
    test: JsAnyExpression
    '?'
    consequent: JsAnyExpression
    ':'
    alternate: JsAnyExpression

JsDoExpression =
    'do'
    body: JsBlockStatement

JsFunctionExpression =
    'async'?
    'function'
    '*'?
    id: JsIdentifierBinding?
    parameter_list: JsParameterList
    body: JsFunctionBody

JsLogicalExpression =
    left: JsAnyExpression
    operator: ('||' | '&&' | '??')
    right: JsAnyExpression

// Rome classic defines object as expr | super but super is already expression?
JsMemberExpression =
    object: JsAnyExpression
    member: JsAnyMember

JsAnyMember = JsStaticMember | JsComputedMemberName

JsStaticMember = '.' name: JsAnyStaticMemberName

// Rome classic defines callee as expr | super but super is an expression?
JsNewExpression =
    'new'
    callee: JsAnyExpression
    argument_list: JsArgumentList

// TODO Better to have a OptionalExpression type to support arrays, members, calls, template literal, private identifier
JsOptionalCallExpression =
    callee: JsAnyExpression
    optional: '?.'
    argument_list: JsArgumentList

JsParenthesizedExpression =
    '(' expression: JsAnyExpression ')'

JsReferenceIdentifierExpression =
    name: 'js_identifier'

// Even a + qualifier isn't sufficient. We have the following options to represent sequences in the AST:
// - first, second, ...rest:
// - specify that the parser never generates a sequence expression if there are less than 2 expressions. In that case, expressions* would be safe. `a,` would be parsed as unknown expression
// - Model as `BinaryExpression` where `,` is the operator. Results in deeper trees but at least, can be modelled correctly. a, b, c -> seq(left: seq(a, b), c)
JsSequenceExpression =
    left: JsAnyExpression
    comma: ','
    second: JsAnyExpression

JsSuperExpression = 'super'

// example`test`
JsTaggedTemplateExpression =
    tag: JsAnyExpression
    literal: JsTemplateLiteral

JsThisExpression = 'this'

JsUnaryExpression =
    operator: ('-' | '+' | '!' | '~' | 'typeof' | 'void' | 'delete')
    argument: JsAnyExpression

// Pre/Post are needed to make the `operator` accessor mandatory. The only alternative would be to
// `JsUpdateExpression = **internal**_prefix: (...)? argument: JsAnyExpression **internal**_postfix: (...)?` and then
// define a public facing `operator` method that returns either one of them or missing if the operator isn't present at all
// (which is unlikely, because the parser would then just parse the argument)
JsPreUpdateExpression =
    operator: ('--' | '++')
    operand: JsAnySimpleAssignmentTarget

JsPostUpdateExpression =
    operand: JsAnySimpleAssignmentTarget
    operator: ('--' | '++')

JsYieldExpression =
    'yield' '*'?
    argument: JsAnyExpression?

// --------------------- LITERALS ---------------------

// RSLint uses a single literal node for all kinds. I believe having different nodes is beneficial because it allows us to
// add helper methods on the corresponding `AstNode`s. For example, to get the representation of a number literal, testing
// if a boolean is true, getting the unquoted string...
// All the literal could implement a `Literal` trait that provides access to the "raw" value

// "abcd" | 'abcd'
JsStringLiteral = value: 'js_string'

// 4, 5.5, 0x00, ...
JsNumberLiteral = value: 'js_number' // Called JsNumericLiteral in Rome, helper for retrieving representation (hex|octal| etc)

// 45n
JsBigIntLiteral =  value: 'js_big_int' // should the `n` be part of the big_int token or not? Should quotes be part of a string token? -> 5.5d is a numeric_token in roslyn

// true, false
JsBooleanLiteral = value: ('true' | 'false')

// null
JsNullLiteral = value: 'null'

// TODO RegEx

// The contents of the template. This list must be alternating TemplateElements and Expressions, beginning and ending with TemplateElement.
// Parser guarantees that this list is never empty, always contains at least on element
// Rome uses two different lists: expressions and quasis
JsTemplateLiteral =
    left_tick: '`'
    elements: JsAnyTemplateElement*
    right_tick: '`'

JsAnyTemplateElement = JsStringTemplateElement | JsAnyExpression

JsStringTemplateElement = value: 'js_string_template_element'


// --------------------- CLASSES ---------------------

// RSLint: ClassDecl, has ClassBody type
// Rome calls the "members" body. Introduce `ClassBody`?
JsClassDeclaration =
    'class'
    id: JsIdentifierBinding
    extends_clause: JsExtendsClause?
    '{' members: JsAnyClassMember* '}'

JsExtendsClause =
    'extends'
    super_class: JsAnyExpression

JsClassExpression =
    'class'
    id: JsIdentifierBinding?
    extends_clause: JsExtendsClause?
    '{' members: JsAnyClassMember* '}'

JsAnyClassMember =                      // RSLint
    JsConstructorClassMember         // Constructor
    | JsPropertyClassMember          // ClassProp
    | JsPrivatePropertyClassMember   // PrivateProp
    | JsMethodClassMember            // Method
    | JsGetterClassMember            // Getter
    | JsSetterClassMember            // Setter
    | JsUnknownMember

// Main reason for splitting: Each of these have different requirements. For example, a setter without an argument is a syntax error but it's totally fine for a method
// We need to encode this into the grammar to ensure accessing the values will yield an Error when apporpriate.
// At the other hand, the fact that get doesn't accept a param means that we need to fallback to `UnknownMember` when someone creates a getter that accepts an argument. Because, no one would ever visit the params of the getter and, therefore, are not aware of the syntax error.

JsConstructorClassMember =
    'constructor'
    parameter_list: JsParameterList
    body: JsFunctionBody

JsAnyClassMemberName = JsAnyObjectMemberName | JsPrivateClassMemberName

JsPropertyClassMember =
    'static'
    key: JsAnyClassMemberName
    value: JsPropertyClassMemberInitializer? ';'

JsPropertyClassMemberInitializer =
    '=' expression: JsAnyExpression

// TODO share methods etc with objects?
JsMethodClassMember =
    'static'?
    'async'?
    '*'?
    key: JsAnyClassMemberName
    parameter_list: JsParameterList
    body: JsFunctionBody

JsGetterClassMember =
    'static'?
    'get'
    key: JsAnyClassMemberName
    '(' ')'
    body: JsFunctionBody

JsSetterClassMember =
    'static'?
    'set'
    key: JsAnyClassMemberName
    '(' value: JsAnyParameter ')'
    body: JsFunctionBody

JsPrivateClassMemberName = '#' id: 'js_identifier'

JsPrivateMethodClassMember =
    'static'?
    'async'?
    '*'?
    key: JsPrivateClassMemberName
    parameter_list: JsParameterList
    body: JsFunctionBody

JsPrivatePropertyClassMember =
    'static'
    key: JsPrivateClassMemberName
    value: JsPropertyClassMemberInitializer? ';'


// --------------------- OBJECTS ---------------------

// We should implement helpers that convert the content to a valid name, e.g. the name 0x02 = '2' and not '0x02'
JsAnyStaticMemberName = JsStaticMemberName | JsStringLiteral | JsNumberLiteral

JsStaticMemberName = name: 'js_identifier'

JsComputedMemberName = '[' name: JsAnyExpression ']'

JsAnyObjectMemberName =  JsAnyStaticMemberName | JsComputedMemberName

// members = properties in Rome classic
JsObjectExpression =
    '{'
    members: (JsAnyObjectMember (',' JsAnyObjectMember)* ','?)
    '}'

                                                // RSLint
JsAnyObjectMember = JsMethodObjectMember        // Method, shared with class (allows static, object doesn't allow private names, trailing comma)
 | JsGetterObjectMember                         // Getter, shared with class
 | JsSetterObjectMember                         // Setter, shared with class
 | JsPropertyObjectMember                       // LiteralProp?
 | JsSpread                                     // SpreadProp (Rome: JsSpreadProperty)
 | JsUnknownMember

JsPropertyObjectMember =
    name: JsAnyObjectMemberName
    ':'
    value: JsAnyExpression

JsMethodObjectMember =
    'async'?
    '*'?
    name: JsAnyObjectMemberName
    parameter_list: JsParameterList
    body: JsFunctionBody

JsGetterObjectMember =
    'get'
    name: JsAnyObjectMemberName
    '(' ')'
    body: JsFunctionBody

JsSetterObjectMember =
    'set'
    name: JsAnyObjectMemberName
    '(' value: JsAnyParameter ')'
    body: JsFunctionBody


// --------------------- MODULES ---------------------

JsExport =
    'export' declaration: JsAnyExportDeclaration
    ';'?

JsAnyExportDeclaration = JsFunctionDeclaration | JsClassDeclaration | JsVariableDeclarationStatement

JsExportFrom =
    'export'
    '{'
    specifiers: (JsExportFromSpecifier (',' JsExportFromSpecifier)* ','?)
    '}'
    'from'
    module_specifier: JsStringLiteral
    ';'?

JsExportFromSpecifier =
    name: 'js_identifier'
    export_name: JsExportName?

JsExportName =
    'as' name: 'js_identifier'

JsExportDefault =
    'export' 'default' argument: JsExportDefaultArgument

JsExportDefaultArgument = JsClassDeclaration | JsFunctionDeclaration | JsExportDefaultExpressionArgument
// You may be tempted to use `ExpressionStatement` here. Don't! the `DefaultExpressionArgument` would appear
// wherever the user queries for all expression statements which isn't what we want.
JsExportDefaultExpressionArgument = expression: JsAnyExpression ';'?

JsExportAllFrom =
    'export'
    '*'
    export_name: JsExportName?
    'from' source: JsStringLiteral
    ';'?

JsImportModule =
    'import'
    module_specifier: JsStringLiteral
    ';'?

JsImport =
    'import'
    clause: JsAnyImportClause
    'from'
    module_specifier: JsStringLiteral
    ';'?

// Needed to guarantee we only allow valid combinations which are
// - default: import x from 'a'
// - named: import { a } from 'a';
// - namespace: import * from 'a';
// - default + namespace: import x, * as a from 'a'
// - default + named: import x, { a } from 'a'
JsAnyImportClause = JsImportDefaultBinding | JsNamespaceImportClause | JsNamedImportClause

// Rome wraps the local name in JSImportSpecifierLocal
JsImportDefaultBinding =
    local_name: JsIdentifierBinding
    // The comma is required if followed by a {} but otherwise forbidden. Introducing another node just to
    // enforce this in namespace import clause / named import clause feels overkill
    trailing_comma: ','?

// Flatten the 'as' + name or use 'JsImportBinding'?
JsNamespaceImportClause =
    default_binding: JsImportDefaultBinding?
    '*'
    'as'
    name: JsIdentifierBinding

JsNamedImportClause =
    default_binding: JsImportDefaultBinding?
    '{'
    named_imports: (JsImportSpecifier (',' JsImportSpecifier)* ','?)
    '}'

JsImportSpecifier =
    name: 'js_identifier'
    binding: JsImportBinding?

JsImportBinding =
    'as' name: JsIdentifierBinding

JsImportCall =
    'import'
    '('
    argument: JsAnyExpression
    ')'

// --------------------- Bindings ---------------------

// Bindings introduce new variables. These can be variable declarations or patterns
// ```
// let x = 10; // x is a binding identifier
// let { x, y: [a] } = { x: 1, y: [0] }, // x, introduces the new bindings x and a
// ```

JsAnyBinding = JsObjectBinding | JsArrayBinding | JsIdentifierBinding | JsUnknownBinding

JsDefaultValueClause =
    '='
    value: JsAnyExpression

// let x = OR function(test) {}
//     ^               ^^^^
JsIdentifierBinding = name: 'js_identifier'

// let [a, , b] = test
//     ^^^^^^^^
JsArrayBinding =
    '['
    elements:  (JsAnyArrayBindingElement (',' JsAnyArrayBindingElement)* ','?)
    rest: JsArrayRestBinding?
    ']'

JsAnyArrayBindingElement = JsBindingWithDefault | JsArrayHole

// Used in function parameters or for array elements in array bindings
JsBindingWithDefault =
    binding: JsAnyBinding
    default_value: JsDefaultValueClause

JsArrayRestBinding =
    '...'
    binding: JsAnyBinding


// let {a, b, ...rest } =
//     ^^^^^^^^^^^^^^^^
JsObjectBinding =
    '{'
    properties: (JsAnyPropertyBinding (',' JsAnyPropertyBinding)* ','?)
    rest: JsObjectRestBinding?
    '}'

// The approach of Babel/Rome to have a single property binding that uses the binding as the key if absent doesn't work because
// serializing that tree would result in a different source text (one that uses a:a)
JsAnyPropertyBinding = JsShorthandPropertyBinding | JsPropertyBinding

// let { x } or let { x = "test" }
JsShorthandPropertyBinding =
    identifier: JsIdentifierBinding
    default_value: JsDefaultValueClause?

// let { x: a } or let { x: a = "test" }
// JsDestructuredPropertyBinding
JsPropertyBinding =
    member: JsAnyMember
    ':'
    binding: JsAnyBinding
    default_value: JsDefaultValueClause?


JsObjectRestBinding = '...' binding: JsIdentifierBinding

// --------------------- Assignment targets  ---------------------


JsAnySimpleAssignmentTarget = JsMemberAssignmentTarget | JsIdentifierAssignmentTarget | JsUnknownAssignmentTarget

JsAnyAssignmentTarget = JsAnySimpleAssignmentTarget | JsArrayAssignmentTarget | JsObjectAssignmentTarget

// b = "test"
// ^
JsIdentifierAssignmentTarget = name: 'js_identifier'

// a.b = a['b'] = "test"
// ^^^   ^^^^^^
JsMemberAssignmentTarget =
    object: JsAnyExpression
    member: JsAnyMember

// [a, {b}, ...rest] = test
// ^^^^^^^^^^^^^^^^^
JsArrayAssignmentTarget =
    '['
    elements: (JsAnyArrayAssignmentTargetElement (',' JsAnyArrayAssignmentTargetElement)* ','?)
    rest: JsArrayAssignmentRest?
    ']'

JsAnyArrayAssignmentTargetElement = JsAssignmentTargetWithDefault | JsArrayHole

JsAssignmentTargetWithDefault =
    target: JsAnyAssignmentTarget
    default_value: JsDefaultValueClause

JsArrayAssignmentRest =
    '...'
    target: JsAnyAssignmentTarget

// {a, b: x, ...rest} =
// ^^^^^^^^^^^^^^^^^^
JsObjectAssignmentTarget =
    '{'
    properties: (JsAnyPropertyAssignmentTarget (',' JsAnyPropertyAssignmentTarget)* ','?)
    rest: JsObjectRestAssignmentTarget?
    '}'

JsAnyPropertyAssignmentTarget = JsShorthandPropertyAssignmentTarget | JsObjectPropertyAssignmentTarget

// { x } or { x = "test" }
JsShorthandPropertyAssignmentTarget =
    identifier: JsIdentifierAssignmentTarget
    default_value: JsDefaultValueClause?

// let { x: a } or let { x: a = "test" }
// JsDestructuredPropertyBinding
JsObjectPropertyAssignmentTarget =
    member: JsAnyMember
    ':'
    target: JsAnyAssignmentTarget
    default_value: JsDefaultValueClause?

JsObjectRestAssignmentTarget = '...' target: JsAnySimpleAssignmentTarget

// --------------------- Auxilary ---------------------

// The hole token will always be missing. Needed to make ungrammar happy
JsArrayHole = hole: ''?

JsStatementOrExpression = JsAnyStatement | JsAnyExpression

// We can implement various helpers on the function union to replace `FunctionHead` (without paying for the abstraction)
JsFunction = JsFunctionDeclaration
    | JsFunctionExpression
    | JsArrowFunctionExpression

JsParameterList =
    '('
    parameters: (JsAnyParameter (',' JsAnyParameter)* ','?)
    rest: JsRestParameter?
    ')'

JsAnyParameter = JsAnyBinding | JsBindingWithDefault

JsRestParameter = '...' binding: JsAnyBinding

JsArgumentList =
    '('
    arguments: (JsAnyArgument (',' JsAnyArgument)* ','?)
    ')'

JsAnyArgument = JsAnyExpression | JsSpread

JsSpread =
    '...' argument: JsAnyExpression
