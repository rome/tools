JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@0..6 "const" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@6..9 "a8" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@9..11 "=" [] [Whitespace(" ")],
                            expression: JsBinaryExpression {
                                left: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@11..12 "f" [] [],
                                        },
                                    },
                                    operator_token: L_ANGLE@12..13 "<" [] [],
                                    right: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@13..19 "number" [] [],
                                        },
                                    },
                                },
                                operator_token: R_ANGLE@19..20 ">" [] [],
                                right: TsTypeAssertionExpression {
                                    l_angle_token: L_ANGLE@20..21 "<" [] [],
                                    ty: TsNumberType {
                                        number_token: NUMBER_KW@21..27 "number" [] [],
                                    },
                                    r_angle_token: R_ANGLE@27..28 ">" [] [],
                                    expression: missing (required),
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@28..59 ";" [] [Whitespace("  "), Comments("// Relational operato ...")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@59..66 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@66..69 "b1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@69..71 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@71..72 "f" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@72..74 "?." [] [],
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@74..75 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@75..81 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@81..82 ">" [] [],
                                },
                                arguments: missing (required),
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@82..107 ";" [] [Whitespace("  "), Comments("// Error, `(` expected")],
        },
    ],
    eof_token: EOF@107..108 "" [Newline("\n")] [],
}

0: JS_MODULE@0..108
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..107
    0: JS_VARIABLE_STATEMENT@0..59
      0: JS_VARIABLE_DECLARATION@0..28
        0: CONST_KW@0..6 "const" [] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@6..28
          0: JS_VARIABLE_DECLARATOR@6..28
            0: JS_IDENTIFIER_BINDING@6..9
              0: IDENT@6..9 "a8" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@9..28
              0: EQ@9..11 "=" [] [Whitespace(" ")]
              1: JS_BINARY_EXPRESSION@11..28
                0: JS_BINARY_EXPRESSION@11..19
                  0: JS_IDENTIFIER_EXPRESSION@11..12
                    0: JS_REFERENCE_IDENTIFIER@11..12
                      0: IDENT@11..12 "f" [] []
                  1: L_ANGLE@12..13 "<" [] []
                  2: JS_IDENTIFIER_EXPRESSION@13..19
                    0: JS_REFERENCE_IDENTIFIER@13..19
                      0: IDENT@13..19 "number" [] []
                1: R_ANGLE@19..20 ">" [] []
                2: TS_TYPE_ASSERTION_EXPRESSION@20..28
                  0: L_ANGLE@20..21 "<" [] []
                  1: TS_NUMBER_TYPE@21..27
                    0: NUMBER_KW@21..27 "number" [] []
                  2: R_ANGLE@27..28 ">" [] []
                  3: (empty)
      1: SEMICOLON@28..59 ";" [] [Whitespace("  "), Comments("// Relational operato ...")]
    1: JS_VARIABLE_STATEMENT@59..107
      0: JS_VARIABLE_DECLARATION@59..82
        0: CONST_KW@59..66 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@66..82
          0: JS_VARIABLE_DECLARATOR@66..82
            0: JS_IDENTIFIER_BINDING@66..69
              0: IDENT@66..69 "b1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@69..82
              0: EQ@69..71 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@71..82
                0: JS_IDENTIFIER_EXPRESSION@71..72
                  0: JS_REFERENCE_IDENTIFIER@71..72
                    0: IDENT@71..72 "f" [] []
                1: QUESTIONDOT@72..74 "?." [] []
                2: TS_TYPE_ARGUMENTS@74..82
                  0: L_ANGLE@74..75 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@75..81
                    0: TS_NUMBER_TYPE@75..81
                      0: NUMBER_KW@75..81 "number" [] []
                  2: R_ANGLE@81..82 ">" [] []
                3: (empty)
      1: SEMICOLON@82..107 ";" [] [Whitespace("  "), Comments("// Error, `(` expected")]
  3: EOF@107..108 "" [Newline("\n")] []
--
ts_instantiation_expressions1.ts:1:29 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ';'
  
  × Expected an expression here
  
  > 1 │ const a8 = f<number><number>;  // Relational operator error
      │                             ^
    2 │ const b1 = f?.<number>;  // Error, `(` expected
    3 │ 
  
--
ts_instantiation_expressions1.ts:2:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `(` but instead found `;`
  
  × unexpected
  
    1 │ const a8 = f<number><number>;  // Relational operator error
  > 2 │ const b1 = f?.<number>;  // Error, `(` expected
      │                       ^
    3 │ 
  
--
const a8 = f<number><number>;  // Relational operator error
const b1 = f?.<number>;  // Error, `(` expected
