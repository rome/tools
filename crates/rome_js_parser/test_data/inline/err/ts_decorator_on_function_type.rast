JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "I" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsParenthesizedType {
                l_paren_token: L_PAREN@9..10 "(" [] [],
                ty: missing (required),
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                JsDecorator {
                    at_token: AT@10..11 "@" [] [],
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@11..15 "dec" [] [Whitespace(" ")],
                        },
                    },
                },
            ],
        },
        JsExpressionStatement {
            expression: JsBogusExpression {
                items: [
                    JsSequenceExpression {
                        left: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@15..16 "x" [] [],
                            },
                        },
                        comma_token: COMMA@16..18 "," [] [Whitespace(" ")],
                        right: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@18..24 "second" [] [],
                            },
                        },
                    },
                    COMMA@24..26 "," [] [Whitespace(" ")],
                    JsBogusExpression {
                        items: [
                            JsDecorator {
                                at_token: AT@26..27 "@" [] [],
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@27..31 "dec" [] [Whitespace(" ")],
                                    },
                                },
                            },
                        ],
                    },
                    JsAssignmentExpression {
                        left: JsIdentifierAssignment {
                            name_token: IDENT@31..37 "third" [] [Whitespace(" ")],
                        },
                        operator_token: EQ@37..39 "=" [] [Whitespace(" ")],
                        right: JsStringLiteralExpression {
                            value_token: JS_STRING_LITERAL@39..48 "'default'" [] [],
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                R_PAREN@48..50 ")" [] [Whitespace(" ")],
                FAT_ARROW@50..53 "=>" [] [Whitespace(" ")],
                STRING_KW@53..59 "string" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@59..60 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@60..66 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@66..68 "I" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@68..70 "=" [] [Whitespace(" ")],
            ty: TsParenthesizedType {
                l_paren_token: L_PAREN@70..71 "(" [] [],
                ty: missing (required),
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                JsDecorator {
                    at_token: AT@71..72 "@" [] [],
                    expression: JsCallExpression {
                        callee: JsStaticMemberExpression {
                            object: JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@72..75 "dec" [] [],
                                },
                            },
                            operator_token: DOT@75..76 "." [] [],
                            member: JsName {
                                value_token: IDENT@76..78 "fn" [] [],
                            },
                        },
                        optional_chain_token: missing (optional),
                        type_arguments: missing (optional),
                        arguments: JsCallArguments {
                            l_paren_token: L_PAREN@78..79 "(" [] [],
                            args: JsCallArgumentList [],
                            r_paren_token: R_PAREN@79..81 ")" [] [Whitespace(" ")],
                        },
                    },
                },
            ],
        },
        JsExpressionStatement {
            expression: JsBogusExpression {
                items: [
                    JsSequenceExpression {
                        left: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@81..82 "x" [] [],
                            },
                        },
                        comma_token: COMMA@82..84 "," [] [Whitespace(" ")],
                        right: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@84..90 "second" [] [],
                            },
                        },
                    },
                    COMMA@90..92 "," [] [Whitespace(" ")],
                    JsBogusExpression {
                        items: [
                            JsDecorator {
                                at_token: AT@92..93 "@" [] [],
                                expression: JsCallExpression {
                                    callee: JsStaticMemberExpression {
                                        object: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@93..96 "dec" [] [],
                                            },
                                        },
                                        operator_token: DOT@96..97 "." [] [],
                                        member: JsName {
                                            value_token: IDENT@97..99 "fn" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    type_arguments: missing (optional),
                                    arguments: JsCallArguments {
                                        l_paren_token: L_PAREN@99..100 "(" [] [],
                                        args: JsCallArgumentList [],
                                        r_paren_token: R_PAREN@100..102 ")" [] [Whitespace(" ")],
                                    },
                                },
                            },
                        ],
                    },
                    JsAssignmentExpression {
                        left: JsIdentifierAssignment {
                            name_token: IDENT@102..108 "third" [] [Whitespace(" ")],
                        },
                        operator_token: EQ@108..110 "=" [] [Whitespace(" ")],
                        right: JsStringLiteralExpression {
                            value_token: JS_STRING_LITERAL@110..119 "'default'" [] [],
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                R_PAREN@119..121 ")" [] [Whitespace(" ")],
                FAT_ARROW@121..124 "=>" [] [Whitespace(" ")],
                STRING_KW@124..130 "string" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@130..131 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@131..137 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@137..139 "I" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@139..141 "=" [] [Whitespace(" ")],
            ty: TsParenthesizedType {
                l_paren_token: L_PAREN@141..142 "(" [] [],
                ty: missing (required),
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                JsDecorator {
                    at_token: AT@142..143 "@" [] [],
                    expression: JsCallExpression {
                        callee: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@143..146 "dec" [] [],
                            },
                        },
                        optional_chain_token: missing (optional),
                        type_arguments: missing (optional),
                        arguments: JsCallArguments {
                            l_paren_token: L_PAREN@146..147 "(" [] [],
                            args: JsCallArgumentList [],
                            r_paren_token: R_PAREN@147..149 ")" [] [Whitespace(" ")],
                        },
                    },
                },
            ],
        },
        JsExpressionStatement {
            expression: JsBogusExpression {
                items: [
                    JsSequenceExpression {
                        left: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@149..150 "x" [] [],
                            },
                        },
                        comma_token: COMMA@150..152 "," [] [Whitespace(" ")],
                        right: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@152..158 "second" [] [],
                            },
                        },
                    },
                    COMMA@158..160 "," [] [Whitespace(" ")],
                    JsBogusExpression {
                        items: [
                            JsDecorator {
                                at_token: AT@160..161 "@" [] [],
                                expression: JsCallExpression {
                                    callee: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@161..164 "dec" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    type_arguments: missing (optional),
                                    arguments: JsCallArguments {
                                        l_paren_token: L_PAREN@164..165 "(" [] [],
                                        args: JsCallArgumentList [],
                                        r_paren_token: R_PAREN@165..167 ")" [] [Whitespace(" ")],
                                    },
                                },
                            },
                        ],
                    },
                    JsAssignmentExpression {
                        left: JsIdentifierAssignment {
                            name_token: IDENT@167..173 "third" [] [Whitespace(" ")],
                        },
                        operator_token: EQ@173..175 "=" [] [Whitespace(" ")],
                        right: JsStringLiteralExpression {
                            value_token: JS_STRING_LITERAL@175..184 "'default'" [] [],
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                R_PAREN@184..186 ")" [] [Whitespace(" ")],
                FAT_ARROW@186..189 "=>" [] [Whitespace(" ")],
                STRING_KW@189..195 "string" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@195..196 ";" [] [],
        },
    ],
    eof_token: EOF@196..197 "" [Newline("\n")] [],
}

0: JS_MODULE@0..197
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..196
    0: TS_TYPE_ALIAS_DECLARATION@0..10
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "I" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@7..9 "=" [] [Whitespace(" ")]
      4: TS_PARENTHESIZED_TYPE@9..10
        0: L_PAREN@9..10 "(" [] []
        1: (empty)
        2: (empty)
      5: (empty)
    1: JS_BOGUS_STATEMENT@10..15
      0: JS_DECORATOR@10..15
        0: AT@10..11 "@" [] []
        1: JS_IDENTIFIER_EXPRESSION@11..15
          0: JS_REFERENCE_IDENTIFIER@11..15
            0: IDENT@11..15 "dec" [] [Whitespace(" ")]
    2: JS_EXPRESSION_STATEMENT@15..48
      0: JS_BOGUS_EXPRESSION@15..48
        0: JS_SEQUENCE_EXPRESSION@15..24
          0: JS_IDENTIFIER_EXPRESSION@15..16
            0: JS_REFERENCE_IDENTIFIER@15..16
              0: IDENT@15..16 "x" [] []
          1: COMMA@16..18 "," [] [Whitespace(" ")]
          2: JS_IDENTIFIER_EXPRESSION@18..24
            0: JS_REFERENCE_IDENTIFIER@18..24
              0: IDENT@18..24 "second" [] []
        1: COMMA@24..26 "," [] [Whitespace(" ")]
        2: JS_BOGUS_EXPRESSION@26..31
          0: JS_DECORATOR@26..31
            0: AT@26..27 "@" [] []
            1: JS_IDENTIFIER_EXPRESSION@27..31
              0: JS_REFERENCE_IDENTIFIER@27..31
                0: IDENT@27..31 "dec" [] [Whitespace(" ")]
        3: JS_ASSIGNMENT_EXPRESSION@31..48
          0: JS_IDENTIFIER_ASSIGNMENT@31..37
            0: IDENT@31..37 "third" [] [Whitespace(" ")]
          1: EQ@37..39 "=" [] [Whitespace(" ")]
          2: JS_STRING_LITERAL_EXPRESSION@39..48
            0: JS_STRING_LITERAL@39..48 "'default'" [] []
      1: (empty)
    3: JS_BOGUS_STATEMENT@48..59
      0: R_PAREN@48..50 ")" [] [Whitespace(" ")]
      1: FAT_ARROW@50..53 "=>" [] [Whitespace(" ")]
      2: STRING_KW@53..59 "string" [] []
    4: JS_EMPTY_STATEMENT@59..60
      0: SEMICOLON@59..60 ";" [] []
    5: TS_TYPE_ALIAS_DECLARATION@60..71
      0: TYPE_KW@60..66 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@66..68
        0: IDENT@66..68 "I" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@68..70 "=" [] [Whitespace(" ")]
      4: TS_PARENTHESIZED_TYPE@70..71
        0: L_PAREN@70..71 "(" [] []
        1: (empty)
        2: (empty)
      5: (empty)
    6: JS_BOGUS_STATEMENT@71..81
      0: JS_DECORATOR@71..81
        0: AT@71..72 "@" [] []
        1: JS_CALL_EXPRESSION@72..81
          0: JS_STATIC_MEMBER_EXPRESSION@72..78
            0: JS_IDENTIFIER_EXPRESSION@72..75
              0: JS_REFERENCE_IDENTIFIER@72..75
                0: IDENT@72..75 "dec" [] []
            1: DOT@75..76 "." [] []
            2: JS_NAME@76..78
              0: IDENT@76..78 "fn" [] []
          1: (empty)
          2: (empty)
          3: JS_CALL_ARGUMENTS@78..81
            0: L_PAREN@78..79 "(" [] []
            1: JS_CALL_ARGUMENT_LIST@79..79
            2: R_PAREN@79..81 ")" [] [Whitespace(" ")]
    7: JS_EXPRESSION_STATEMENT@81..119
      0: JS_BOGUS_EXPRESSION@81..119
        0: JS_SEQUENCE_EXPRESSION@81..90
          0: JS_IDENTIFIER_EXPRESSION@81..82
            0: JS_REFERENCE_IDENTIFIER@81..82
              0: IDENT@81..82 "x" [] []
          1: COMMA@82..84 "," [] [Whitespace(" ")]
          2: JS_IDENTIFIER_EXPRESSION@84..90
            0: JS_REFERENCE_IDENTIFIER@84..90
              0: IDENT@84..90 "second" [] []
        1: COMMA@90..92 "," [] [Whitespace(" ")]
        2: JS_BOGUS_EXPRESSION@92..102
          0: JS_DECORATOR@92..102
            0: AT@92..93 "@" [] []
            1: JS_CALL_EXPRESSION@93..102
              0: JS_STATIC_MEMBER_EXPRESSION@93..99
                0: JS_IDENTIFIER_EXPRESSION@93..96
                  0: JS_REFERENCE_IDENTIFIER@93..96
                    0: IDENT@93..96 "dec" [] []
                1: DOT@96..97 "." [] []
                2: JS_NAME@97..99
                  0: IDENT@97..99 "fn" [] []
              1: (empty)
              2: (empty)
              3: JS_CALL_ARGUMENTS@99..102
                0: L_PAREN@99..100 "(" [] []
                1: JS_CALL_ARGUMENT_LIST@100..100
                2: R_PAREN@100..102 ")" [] [Whitespace(" ")]
        3: JS_ASSIGNMENT_EXPRESSION@102..119
          0: JS_IDENTIFIER_ASSIGNMENT@102..108
            0: IDENT@102..108 "third" [] [Whitespace(" ")]
          1: EQ@108..110 "=" [] [Whitespace(" ")]
          2: JS_STRING_LITERAL_EXPRESSION@110..119
            0: JS_STRING_LITERAL@110..119 "'default'" [] []
      1: (empty)
    8: JS_BOGUS_STATEMENT@119..130
      0: R_PAREN@119..121 ")" [] [Whitespace(" ")]
      1: FAT_ARROW@121..124 "=>" [] [Whitespace(" ")]
      2: STRING_KW@124..130 "string" [] []
    9: JS_EMPTY_STATEMENT@130..131
      0: SEMICOLON@130..131 ";" [] []
    10: TS_TYPE_ALIAS_DECLARATION@131..142
      0: TYPE_KW@131..137 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@137..139
        0: IDENT@137..139 "I" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@139..141 "=" [] [Whitespace(" ")]
      4: TS_PARENTHESIZED_TYPE@141..142
        0: L_PAREN@141..142 "(" [] []
        1: (empty)
        2: (empty)
      5: (empty)
    11: JS_BOGUS_STATEMENT@142..149
      0: JS_DECORATOR@142..149
        0: AT@142..143 "@" [] []
        1: JS_CALL_EXPRESSION@143..149
          0: JS_IDENTIFIER_EXPRESSION@143..146
            0: JS_REFERENCE_IDENTIFIER@143..146
              0: IDENT@143..146 "dec" [] []
          1: (empty)
          2: (empty)
          3: JS_CALL_ARGUMENTS@146..149
            0: L_PAREN@146..147 "(" [] []
            1: JS_CALL_ARGUMENT_LIST@147..147
            2: R_PAREN@147..149 ")" [] [Whitespace(" ")]
    12: JS_EXPRESSION_STATEMENT@149..184
      0: JS_BOGUS_EXPRESSION@149..184
        0: JS_SEQUENCE_EXPRESSION@149..158
          0: JS_IDENTIFIER_EXPRESSION@149..150
            0: JS_REFERENCE_IDENTIFIER@149..150
              0: IDENT@149..150 "x" [] []
          1: COMMA@150..152 "," [] [Whitespace(" ")]
          2: JS_IDENTIFIER_EXPRESSION@152..158
            0: JS_REFERENCE_IDENTIFIER@152..158
              0: IDENT@152..158 "second" [] []
        1: COMMA@158..160 "," [] [Whitespace(" ")]
        2: JS_BOGUS_EXPRESSION@160..167
          0: JS_DECORATOR@160..167
            0: AT@160..161 "@" [] []
            1: JS_CALL_EXPRESSION@161..167
              0: JS_IDENTIFIER_EXPRESSION@161..164
                0: JS_REFERENCE_IDENTIFIER@161..164
                  0: IDENT@161..164 "dec" [] []
              1: (empty)
              2: (empty)
              3: JS_CALL_ARGUMENTS@164..167
                0: L_PAREN@164..165 "(" [] []
                1: JS_CALL_ARGUMENT_LIST@165..165
                2: R_PAREN@165..167 ")" [] [Whitespace(" ")]
        3: JS_ASSIGNMENT_EXPRESSION@167..184
          0: JS_IDENTIFIER_ASSIGNMENT@167..173
            0: IDENT@167..173 "third" [] [Whitespace(" ")]
          1: EQ@173..175 "=" [] [Whitespace(" ")]
          2: JS_STRING_LITERAL_EXPRESSION@175..184
            0: JS_STRING_LITERAL@175..184 "'default'" [] []
      1: (empty)
    13: JS_BOGUS_STATEMENT@184..195
      0: R_PAREN@184..186 ")" [] [Whitespace(" ")]
      1: FAT_ARROW@186..189 "=>" [] [Whitespace(" ")]
      2: STRING_KW@189..195 "string" [] []
    14: JS_EMPTY_STATEMENT@195..196
      0: SEMICOLON@195..196 ";" [] []
  3: EOF@196..197 "" [Newline("\n")] []
--
ts_decorator_on_function_type.ts:1:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type but instead found '@'
  
  > 1 │ type I = (@dec x, second, @dec third = 'default') => string;
      │           ^
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
  
  i Expected a type here
  
  > 1 │ type I = (@dec x, second, @dec third = 'default') => string;
      │           ^
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
  
--
ts_decorator_on_function_type.ts:1:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
  > 1 │ type I = (@dec x, second, @dec third = 'default') => string;
      │                           ^^^^
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
  
  i Decorators are only valid on class declarations, class expressions, and class methods.
  
--
ts_decorator_on_function_type.ts:1:49 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ type I = (@dec x, second, @dec third = 'default') => string;
      │                                                 ^
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ type I = (@dec x, second, @dec third = 'default') => string;
      │                                                 ^
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
  
  i ...Which is required to end this statement
  
  > 1 │ type I = (@dec x, second, @dec third = 'default') => string;
      │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
  
--
ts_decorator_on_function_type.ts:2:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type but instead found '@'
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
  > 2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
      │           ^
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
    4 │ 
  
  i Expected a type here
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
  > 2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
      │           ^
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
    4 │ 
  
--
ts_decorator_on_function_type.ts:2:32 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
  > 2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
      │                                ^^^^^^^^^
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
    4 │ 
  
  i Decorators are only valid on class declarations, class expressions, and class methods.
  
--
ts_decorator_on_function_type.ts:2:59 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
  > 2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
      │                                                           ^
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
    4 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
  > 2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
      │                                                           ^
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
    4 │ 
  
  i ...Which is required to end this statement
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
  > 2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
      │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
    4 │ 
  
--
ts_decorator_on_function_type.ts:3:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type but instead found '@'
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
  > 3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
      │           ^
    4 │ 
  
  i Expected a type here
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
  > 3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
      │           ^
    4 │ 
  
--
ts_decorator_on_function_type.ts:3:29 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
  > 3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
      │                             ^^^^^^
    4 │ 
  
  i Decorators are only valid on class declarations, class expressions, and class methods.
  
--
ts_decorator_on_function_type.ts:3:53 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
  > 3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
      │                                                     ^
    4 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
  > 3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
      │                                                     ^
    4 │ 
  
  i ...Which is required to end this statement
  
    1 │ type I = (@dec x, second, @dec third = 'default') => string;
    2 │ type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
  > 3 │ type I = (@dec() x, second, @dec() third = 'default') => string;
      │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ 
  
--
type I = (@dec x, second, @dec third = 'default') => string;
type I = (@dec.fn() x, second, @dec.fn() third = 'default') => string;
type I = (@dec() x, second, @dec() third = 'default') => string;
