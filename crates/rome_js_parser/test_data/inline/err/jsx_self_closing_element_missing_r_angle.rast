JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsUnknownExpression {
                    items: [
                        L_ANGLE@0..1 "<" [] [],
                        R_ANGLE@1..2 ">" [] [],
                        JsUnknownExpression {
                            items: [
                                L_ANGLE@2..3 "<" [] [],
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@3..8 "test" [] [Whitespace(" ")],
                                    },
                                    type_arguments: missing (optional),
                                },
                                JsRegexLiteralExpression {
                                    value_token: JS_REGEX_LITERAL@8..13 "/<a /" [] [],
                                },
                            ],
                        },
                    ],
                },
                operator: R_ANGLE@13..14 ">" [] [],
                right: JsUnknownExpression {
                    items: [
                        L_ANGLE@14..15 "<" [] [],
                        JsRegexLiteralExpression {
                            value_token: JS_REGEX_LITERAL@15..17 "/>" [] [],
                        },
                    ],
                },
            },
            semicolon_token: SEMICOLON@17..18 ";" [] [],
        },
    ],
    eof_token: EOF@18..19 "" [Newline("\n")] [],
}

0: JS_MODULE@0..19
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..18
    0: JS_EXPRESSION_STATEMENT@0..18
      0: JS_BINARY_EXPRESSION@0..17
        0: JS_UNKNOWN_EXPRESSION@0..13
          0: L_ANGLE@0..1 "<" [] []
          1: R_ANGLE@1..2 ">" [] []
          2: JS_UNKNOWN_EXPRESSION@2..13
            0: L_ANGLE@2..3 "<" [] []
            1: TS_REFERENCE_TYPE@3..8
              0: JS_REFERENCE_IDENTIFIER@3..8
                0: IDENT@3..8 "test" [] [Whitespace(" ")]
              1: (empty)
            2: JS_REGEX_LITERAL_EXPRESSION@8..13
              0: JS_REGEX_LITERAL@8..13 "/<a /" [] []
        1: R_ANGLE@13..14 ">" [] []
        2: JS_UNKNOWN_EXPRESSION@14..17
          0: L_ANGLE@14..15 "<" [] []
          1: JS_REGEX_LITERAL_EXPRESSION@15..17
            0: JS_REGEX_LITERAL@15..17 "/>" [] []
      1: SEMICOLON@17..18 ";" [] []
  3: EOF@18..19 "" [Newline("\n")] []
--
error[SyntaxError]: type assertion are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax.
  ┌─ jsx_self_closing_element_missing_r_angle.js:1:1
  │
1 │ <><test /<a /></>;
  │ ^^^^^^^^^^^^^ TypeScript only syntax

--
error[SyntaxError]: type assertion are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax.
  ┌─ jsx_self_closing_element_missing_r_angle.js:1:15
  │
1 │ <><test /<a /></>;
  │               ^^^ TypeScript only syntax

--
error: unterminated regex literal
  ┌─ jsx_self_closing_element_missing_r_angle.js:1:19
  │
1 │ <><test /<a /></>;
  │                -  ^ ...but the line ends here
  │                │  
  │                a regex literal starts there...

--
<><test /<a /></>;
