JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsIfStatement {
            if_token: IF_KW@0..3 "if" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@3..4 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@4..8 "true" [] [],
            },
            r_paren_token: R_PAREN@8..10 ")" [] [Whitespace(" ")],
            consequent: JsLabeledStatement {
                label_token: IDENT@10..16 "label1" [] [],
                colon_token: COLON@16..18 ":" [] [Whitespace(" ")],
                body: JsLabeledStatement {
                    label_token: IDENT@18..24 "label2" [] [],
                    colon_token: COLON@24..26 ":" [] [Whitespace(" ")],
                    body: JsBogusStatement {
                        items: [
                            FUNCTION_KW@26..35 "function" [] [Whitespace(" ")],
                            JsIdentifierBinding {
                                name_token: IDENT@35..36 "a" [] [],
                            },
                            JsParameters {
                                l_paren_token: L_PAREN@36..37 "(" [] [],
                                items: JsParameterList [],
                                r_paren_token: R_PAREN@37..39 ")" [] [Whitespace(" ")],
                            },
                            JsFunctionBody {
                                l_curly_token: L_CURLY@39..40 "{" [] [],
                                directives: JsDirectiveList [],
                                statements: JsStatementList [],
                                r_curly_token: R_CURLY@40..41 "}" [] [],
                            },
                        ],
                    },
                },
            },
            else_clause: missing (optional),
        },
    ],
    eof_token: EOF@41..42 "" [Newline("\n")] [],
}

0: JS_MODULE@0..42
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..41
    0: JS_IF_STATEMENT@0..41
      0: IF_KW@0..3 "if" [] [Whitespace(" ")]
      1: L_PAREN@3..4 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@4..8
        0: TRUE_KW@4..8 "true" [] []
      3: R_PAREN@8..10 ")" [] [Whitespace(" ")]
      4: JS_LABELED_STATEMENT@10..41
        0: IDENT@10..16 "label1" [] []
        1: COLON@16..18 ":" [] [Whitespace(" ")]
        2: JS_LABELED_STATEMENT@18..41
          0: IDENT@18..24 "label2" [] []
          1: COLON@24..26 ":" [] [Whitespace(" ")]
          2: JS_BOGUS_STATEMENT@26..41
            0: FUNCTION_KW@26..35 "function" [] [Whitespace(" ")]
            1: JS_IDENTIFIER_BINDING@35..36
              0: IDENT@35..36 "a" [] []
            2: JS_PARAMETERS@36..39
              0: L_PAREN@36..37 "(" [] []
              1: JS_PARAMETER_LIST@37..37
              2: R_PAREN@37..39 ")" [] [Whitespace(" ")]
            3: JS_FUNCTION_BODY@39..41
              0: L_CURLY@39..40 "{" [] []
              1: JS_DIRECTIVE_LIST@40..40
              2: JS_STATEMENT_LIST@40..40
              3: R_CURLY@40..41 "}" [] []
      5: (empty)
  3: EOF@41..42 "" [Newline("\n")] []
--
labelled_function_decl_in_single_statement_context.js:1:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × In strict mode code, functions can only be declared at top level or inside a block
  
  > 1 │ if (true) label1: label2: function a() {}
      │                           ^^^^^^^^^^^^^^^
    2 │ 
  
  i wrap the function in a block statement
  
--
if (true) label1: label2: function a() {}
