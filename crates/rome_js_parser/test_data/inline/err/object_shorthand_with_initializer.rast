JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsParenthesizedExpression {
                l_paren_token: L_PAREN@0..1 "(" [] [],
                expression: JsObjectExpression {
                    l_curly_token: L_CURLY@1..3 "{" [] [Whitespace(" ")],
                    members: JsObjectMemberList [
                        JsBogusMember {
                            items: [
                                JsReferenceIdentifier {
                                    value_token: IDENT@3..9 "arrow" [] [Whitespace(" ")],
                                },
                                EQ@9..11 "=" [] [Whitespace(" ")],
                                JsArrowFunctionExpression {
                                    async_token: missing (optional),
                                    type_parameters: missing (optional),
                                    parameters: JsParameters {
                                        l_paren_token: L_PAREN@11..12 "(" [] [],
                                        items: JsParameterList [],
                                        r_paren_token: R_PAREN@12..14 ")" [] [Whitespace(" ")],
                                    },
                                    return_type_annotation: missing (optional),
                                    fat_arrow_token: FAT_ARROW@14..17 "=>" [] [Whitespace(" ")],
                                    body: JsFunctionBody {
                                        l_curly_token: L_CURLY@17..18 "{" [] [],
                                        directives: JsDirectiveList [],
                                        statements: JsStatementList [],
                                        r_curly_token: R_CURLY@18..20 "}" [] [Whitespace(" ")],
                                    },
                                },
                            ],
                        },
                    ],
                    r_curly_token: R_CURLY@20..21 "}" [] [],
                },
                r_paren_token: R_PAREN@21..22 ")" [] [],
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@22..23 "" [Newline("\n")] [],
}

0: JS_MODULE@0..23
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..22
    0: JS_EXPRESSION_STATEMENT@0..22
      0: JS_PARENTHESIZED_EXPRESSION@0..22
        0: L_PAREN@0..1 "(" [] []
        1: JS_OBJECT_EXPRESSION@1..21
          0: L_CURLY@1..3 "{" [] [Whitespace(" ")]
          1: JS_OBJECT_MEMBER_LIST@3..20
            0: JS_BOGUS_MEMBER@3..20
              0: JS_REFERENCE_IDENTIFIER@3..9
                0: IDENT@3..9 "arrow" [] [Whitespace(" ")]
              1: EQ@9..11 "=" [] [Whitespace(" ")]
              2: JS_ARROW_FUNCTION_EXPRESSION@11..20
                0: (empty)
                1: (empty)
                2: JS_PARAMETERS@11..14
                  0: L_PAREN@11..12 "(" [] []
                  1: JS_PARAMETER_LIST@12..12
                  2: R_PAREN@12..14 ")" [] [Whitespace(" ")]
                3: (empty)
                4: FAT_ARROW@14..17 "=>" [] [Whitespace(" ")]
                5: JS_FUNCTION_BODY@17..20
                  0: L_CURLY@17..18 "{" [] []
                  1: JS_DIRECTIVE_LIST@18..18
                  2: JS_STATEMENT_LIST@18..18
                  3: R_CURLY@18..20 "}" [] [Whitespace(" ")]
          2: R_CURLY@20..21 "}" [] []
        2: R_PAREN@21..22 ")" [] []
      1: (empty)
  3: EOF@22..23 "" [Newline("\n")] []
--
object_shorthand_with_initializer.js:1:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Did you mean to use a `:`? An `=` can only follow a property name when the containing object literal is part of a destructuring pattern.
  
  > 1 │ ({ arrow = () => {} })
      │          ^
    2 │ 
  
--
({ arrow = () => {} })
