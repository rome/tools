JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsImport {
            import_token: IMPORT_KW@0..7 "import" [] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@7..13 "\"foo\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assertion_kind: WITH_KW@13..18 "with" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@18..20 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: IDENT@20..24 "type" [] [],
                            colon_token: missing (required),
                            value_token: missing (required),
                        },
                        COMMA@24..26 "," [] [Whitespace(" ")],
                        JsImportAssertionEntry {
                            key: JS_STRING_LITERAL@26..33 "\"json\"" [] [Whitespace(" ")],
                            colon_token: missing (required),
                            value_token: missing (required),
                        },
                    ],
                    r_curly_token: R_CURLY@33..34 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@34..35 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@35..43 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportNamedClause {
                type_token: missing (optional),
                default_specifier: missing (optional),
                named_import: JsNamedImportSpecifiers {
                    l_curly_token: L_CURLY@43..45 "{" [] [Whitespace(" ")],
                    specifiers: JsNamedImportSpecifierList [
                        JsShorthandNamedImportSpecifier {
                            type_token: missing (optional),
                            local_name: JsIdentifierBinding {
                                name_token: IDENT@45..49 "foo" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_curly_token: R_CURLY@49..51 "}" [] [Whitespace(" ")],
                },
                from_token: missing (required),
                source: missing (required),
                assertion: JsImportAssertion {
                    assertion_kind: WITH_KW@51..56 "with" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@56..58 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: IDENT@58..62 "type" [] [],
                            colon_token: COLON@62..64 ":" [] [Whitespace(" ")],
                            value_token: JS_STRING_LITERAL@64..71 "\"json\"" [] [Whitespace(" ")],
                        },
                    ],
                    r_curly_token: R_CURLY@71..72 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@72..73 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@73..81 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@81..88 "\"lorem\"" [] [],
                },
                assertion: missing (optional),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@88..96 "assert" [Newline("\n")] [Whitespace(" ")],
                },
            },
            semicolon_token: missing (optional),
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@96..98 "{" [] [Whitespace(" ")],
            statements: JsStatementList [
                JsLabeledStatement {
                    label_token: IDENT@98..102 "type" [] [],
                    colon_token: COLON@102..104 ":" [] [Whitespace(" ")],
                    body: JsExpressionStatement {
                        expression: JsStringLiteralExpression {
                            value_token: JS_STRING_LITERAL@104..111 "\"json\"" [] [Whitespace(" ")],
                        },
                        semicolon_token: missing (optional),
                    },
                },
            ],
            r_curly_token: R_CURLY@111..112 "}" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@112..120 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportDefaultClause {
                type_token: missing (optional),
                local_name: JsIdentifierBinding {
                    name_token: IDENT@120..125 "foo2" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@125..130 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@130..141 "\"foo.json\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assertion_kind: WITH_KW@141..146 "with" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@146..148 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: JS_STRING_LITERAL@148..154 "\"type\"" [] [],
                            colon_token: COLON@154..156 ":" [] [Whitespace(" ")],
                            value_token: JS_STRING_LITERAL@156..162 "\"json\"" [] [],
                        },
                        COMMA@162..164 "," [] [Whitespace(" ")],
                        JsBogusImportAssertionEntry {
                            items: [
                                IDENT@164..168 "type" [] [],
                                COLON@168..170 ":" [] [Whitespace(" ")],
                                JS_STRING_LITERAL@170..176 "\"html\"" [] [],
                            ],
                        },
                        COMMA@176..178 "," [] [Whitespace(" ")],
                        JsBogusImportAssertionEntry {
                            items: [
                                JS_STRING_LITERAL@178..184 "\"type\"" [] [],
                                COLON@184..186 ":" [] [Whitespace(" ")],
                                JS_STRING_LITERAL@186..191 "\"js\"" [] [Whitespace(" ")],
                            ],
                        },
                    ],
                    r_curly_token: R_CURLY@191..192 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@192..193 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@193..201 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportBareClause {
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@201..205 "\"x\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assertion_kind: WITH_KW@205..209 "with" [] [],
                    l_curly_token: missing (required),
                    assertions: JsImportAssertionEntryList [],
                    r_curly_token: missing (required),
                },
            },
            semicolon_token: SEMICOLON@209..210 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@210..218 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportDefaultClause {
                type_token: missing (optional),
                local_name: JsIdentifierBinding {
                    name_token: IDENT@218..224 "ipsum" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@224..229 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@229..242 "\"ipsum.json\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assertion_kind: WITH_KW@242..247 "with" [] [Whitespace(" ")],
                    l_curly_token: L_CURLY@247..249 "{" [] [Whitespace(" ")],
                    assertions: JsImportAssertionEntryList [
                        JsImportAssertionEntry {
                            key: IDENT@249..253 "type" [] [],
                            colon_token: COLON@253..255 ":" [] [Whitespace(" ")],
                            value_token: JS_STRING_LITERAL@255..261 "\"json\"" [] [],
                        },
                        COMMA@261..263 "," [] [Whitespace(" ")],
                        JsImportAssertionEntry {
                            key: IDENT@263..267 "lazy" [] [],
                            colon_token: COLON@267..269 ":" [] [Whitespace(" ")],
                            value_token: missing (required),
                        },
                        missing separator,
                        JsImportAssertionEntry {
                            key: IDENT@269..273 "true" [] [],
                            colon_token: missing (required),
                            value_token: missing (required),
                        },
                        COMMA@273..275 "," [] [Whitespace(" ")],
                        JsImportAssertionEntry {
                            key: IDENT@275..286 "startAtLine" [] [],
                            colon_token: COLON@286..288 ":" [] [Whitespace(" ")],
                            value_token: missing (required),
                        },
                        missing separator,
                        JsBogusImportAssertionEntry {
                            items: [
                                JS_NUMBER_LITERAL@288..290 "1" [] [Whitespace(" ")],
                            ],
                        },
                    ],
                    r_curly_token: R_CURLY@290..291 "}" [] [],
                },
            },
            semicolon_token: SEMICOLON@291..292 ";" [] [],
        },
        JsImport {
            import_token: IMPORT_KW@292..300 "import" [Newline("\n")] [Whitespace(" ")],
            import_clause: JsImportNamedClause {
                type_token: missing (optional),
                default_specifier: missing (optional),
                named_import: JsNamedImportSpecifiers {
                    l_curly_token: L_CURLY@300..302 "{" [] [Whitespace(" ")],
                    specifiers: JsNamedImportSpecifierList [
                        JsShorthandNamedImportSpecifier {
                            type_token: missing (optional),
                            local_name: JsIdentifierBinding {
                                name_token: IDENT@302..304 "a" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_curly_token: R_CURLY@304..306 "}" [] [Whitespace(" ")],
                },
                from_token: FROM_KW@306..311 "from" [] [Whitespace(" ")],
                source: JsModuleSource {
                    value_token: JS_STRING_LITERAL@311..320 "\"a.json\"" [] [Whitespace(" ")],
                },
                assertion: JsImportAssertion {
                    assertion_kind: WITH_KW@320..324 "with" [] [],
                    l_curly_token: missing (required),
                    assertions: JsImportAssertionEntryList [],
                    r_curly_token: missing (required),
                },
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@324..325 "" [Newline("\n")] [],
}

0: JS_MODULE@0..325
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..324
    0: JS_IMPORT@0..35
      0: IMPORT_KW@0..7 "import" [] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@7..34
        0: JS_MODULE_SOURCE@7..13
          0: JS_STRING_LITERAL@7..13 "\"foo\"" [] [Whitespace(" ")]
        1: JS_IMPORT_ASSERTION@13..34
          0: WITH_KW@13..18 "with" [] [Whitespace(" ")]
          1: L_CURLY@18..20 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@20..33
            0: JS_IMPORT_ASSERTION_ENTRY@20..24
              0: IDENT@20..24 "type" [] []
              1: (empty)
              2: (empty)
            1: COMMA@24..26 "," [] [Whitespace(" ")]
            2: JS_IMPORT_ASSERTION_ENTRY@26..33
              0: JS_STRING_LITERAL@26..33 "\"json\"" [] [Whitespace(" ")]
              1: (empty)
              2: (empty)
          3: R_CURLY@33..34 "}" [] []
      2: SEMICOLON@34..35 ";" [] []
    1: JS_IMPORT@35..73
      0: IMPORT_KW@35..43 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_NAMED_CLAUSE@43..72
        0: (empty)
        1: (empty)
        2: JS_NAMED_IMPORT_SPECIFIERS@43..51
          0: L_CURLY@43..45 "{" [] [Whitespace(" ")]
          1: JS_NAMED_IMPORT_SPECIFIER_LIST@45..49
            0: JS_SHORTHAND_NAMED_IMPORT_SPECIFIER@45..49
              0: (empty)
              1: JS_IDENTIFIER_BINDING@45..49
                0: IDENT@45..49 "foo" [] [Whitespace(" ")]
          2: R_CURLY@49..51 "}" [] [Whitespace(" ")]
        3: (empty)
        4: (empty)
        5: JS_IMPORT_ASSERTION@51..72
          0: WITH_KW@51..56 "with" [] [Whitespace(" ")]
          1: L_CURLY@56..58 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@58..71
            0: JS_IMPORT_ASSERTION_ENTRY@58..71
              0: IDENT@58..62 "type" [] []
              1: COLON@62..64 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@64..71 "\"json\"" [] [Whitespace(" ")]
          3: R_CURLY@71..72 "}" [] []
      2: SEMICOLON@72..73 ";" [] []
    2: JS_IMPORT@73..88
      0: IMPORT_KW@73..81 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@81..88
        0: JS_MODULE_SOURCE@81..88
          0: JS_STRING_LITERAL@81..88 "\"lorem\"" [] []
        1: (empty)
      2: (empty)
    3: JS_EXPRESSION_STATEMENT@88..96
      0: JS_IDENTIFIER_EXPRESSION@88..96
        0: JS_REFERENCE_IDENTIFIER@88..96
          0: IDENT@88..96 "assert" [Newline("\n")] [Whitespace(" ")]
      1: (empty)
    4: JS_BLOCK_STATEMENT@96..112
      0: L_CURLY@96..98 "{" [] [Whitespace(" ")]
      1: JS_STATEMENT_LIST@98..111
        0: JS_LABELED_STATEMENT@98..111
          0: IDENT@98..102 "type" [] []
          1: COLON@102..104 ":" [] [Whitespace(" ")]
          2: JS_EXPRESSION_STATEMENT@104..111
            0: JS_STRING_LITERAL_EXPRESSION@104..111
              0: JS_STRING_LITERAL@104..111 "\"json\"" [] [Whitespace(" ")]
            1: (empty)
      2: R_CURLY@111..112 "}" [] []
    5: JS_IMPORT@112..193
      0: IMPORT_KW@112..120 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_DEFAULT_CLAUSE@120..192
        0: (empty)
        1: JS_IDENTIFIER_BINDING@120..125
          0: IDENT@120..125 "foo2" [] [Whitespace(" ")]
        2: FROM_KW@125..130 "from" [] [Whitespace(" ")]
        3: JS_MODULE_SOURCE@130..141
          0: JS_STRING_LITERAL@130..141 "\"foo.json\"" [] [Whitespace(" ")]
        4: JS_IMPORT_ASSERTION@141..192
          0: WITH_KW@141..146 "with" [] [Whitespace(" ")]
          1: L_CURLY@146..148 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@148..191
            0: JS_IMPORT_ASSERTION_ENTRY@148..162
              0: JS_STRING_LITERAL@148..154 "\"type\"" [] []
              1: COLON@154..156 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@156..162 "\"json\"" [] []
            1: COMMA@162..164 "," [] [Whitespace(" ")]
            2: JS_BOGUS_IMPORT_ASSERTION_ENTRY@164..176
              0: IDENT@164..168 "type" [] []
              1: COLON@168..170 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@170..176 "\"html\"" [] []
            3: COMMA@176..178 "," [] [Whitespace(" ")]
            4: JS_BOGUS_IMPORT_ASSERTION_ENTRY@178..191
              0: JS_STRING_LITERAL@178..184 "\"type\"" [] []
              1: COLON@184..186 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@186..191 "\"js\"" [] [Whitespace(" ")]
          3: R_CURLY@191..192 "}" [] []
      2: SEMICOLON@192..193 ";" [] []
    6: JS_IMPORT@193..210
      0: IMPORT_KW@193..201 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_BARE_CLAUSE@201..209
        0: JS_MODULE_SOURCE@201..205
          0: JS_STRING_LITERAL@201..205 "\"x\"" [] [Whitespace(" ")]
        1: JS_IMPORT_ASSERTION@205..209
          0: WITH_KW@205..209 "with" [] []
          1: (empty)
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@209..209
          3: (empty)
      2: SEMICOLON@209..210 ";" [] []
    7: JS_IMPORT@210..292
      0: IMPORT_KW@210..218 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_DEFAULT_CLAUSE@218..291
        0: (empty)
        1: JS_IDENTIFIER_BINDING@218..224
          0: IDENT@218..224 "ipsum" [] [Whitespace(" ")]
        2: FROM_KW@224..229 "from" [] [Whitespace(" ")]
        3: JS_MODULE_SOURCE@229..242
          0: JS_STRING_LITERAL@229..242 "\"ipsum.json\"" [] [Whitespace(" ")]
        4: JS_IMPORT_ASSERTION@242..291
          0: WITH_KW@242..247 "with" [] [Whitespace(" ")]
          1: L_CURLY@247..249 "{" [] [Whitespace(" ")]
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@249..290
            0: JS_IMPORT_ASSERTION_ENTRY@249..261
              0: IDENT@249..253 "type" [] []
              1: COLON@253..255 ":" [] [Whitespace(" ")]
              2: JS_STRING_LITERAL@255..261 "\"json\"" [] []
            1: COMMA@261..263 "," [] [Whitespace(" ")]
            2: JS_IMPORT_ASSERTION_ENTRY@263..269
              0: IDENT@263..267 "lazy" [] []
              1: COLON@267..269 ":" [] [Whitespace(" ")]
              2: (empty)
            3: (empty)
            4: JS_IMPORT_ASSERTION_ENTRY@269..273
              0: IDENT@269..273 "true" [] []
              1: (empty)
              2: (empty)
            5: COMMA@273..275 "," [] [Whitespace(" ")]
            6: JS_IMPORT_ASSERTION_ENTRY@275..288
              0: IDENT@275..286 "startAtLine" [] []
              1: COLON@286..288 ":" [] [Whitespace(" ")]
              2: (empty)
            7: (empty)
            8: JS_BOGUS_IMPORT_ASSERTION_ENTRY@288..290
              0: JS_NUMBER_LITERAL@288..290 "1" [] [Whitespace(" ")]
          3: R_CURLY@290..291 "}" [] []
      2: SEMICOLON@291..292 ";" [] []
    8: JS_IMPORT@292..324
      0: IMPORT_KW@292..300 "import" [Newline("\n")] [Whitespace(" ")]
      1: JS_IMPORT_NAMED_CLAUSE@300..324
        0: (empty)
        1: (empty)
        2: JS_NAMED_IMPORT_SPECIFIERS@300..306
          0: L_CURLY@300..302 "{" [] [Whitespace(" ")]
          1: JS_NAMED_IMPORT_SPECIFIER_LIST@302..304
            0: JS_SHORTHAND_NAMED_IMPORT_SPECIFIER@302..304
              0: (empty)
              1: JS_IDENTIFIER_BINDING@302..304
                0: IDENT@302..304 "a" [] [Whitespace(" ")]
          2: R_CURLY@304..306 "}" [] [Whitespace(" ")]
        3: FROM_KW@306..311 "from" [] [Whitespace(" ")]
        4: JS_MODULE_SOURCE@311..320
          0: JS_STRING_LITERAL@311..320 "\"a.json\"" [] [Whitespace(" ")]
        5: JS_IMPORT_ASSERTION@320..324
          0: WITH_KW@320..324 "with" [] []
          1: (empty)
          2: JS_IMPORT_ASSERTION_ENTRY_LIST@324..324
          3: (empty)
      2: (empty)
  3: EOF@324..325 "" [Newline("\n")] []
--
import_attribute_err.js:1:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `,`
  
  > 1 │ import "foo" with { type, "json" };
      │                         ^
    2 │ import { foo } with { type: "json" };
    3 │ import "lorem"
  
  i Remove ,
  
--
import_attribute_err.js:1:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `}`
  
  > 1 │ import "foo" with { type, "json" };
      │                                  ^
    2 │ import { foo } with { type: "json" };
    3 │ import "lorem"
  
  i Remove }
  
--
import_attribute_err.js:2:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `from` but instead found `with`
  
    1 │ import "foo" with { type, "json" };
  > 2 │ import { foo } with { type: "json" };
      │                ^^^^
    3 │ import "lorem"
    4 │ assert { type: "json" }
  
  i Remove with
  
--
import_attribute_err.js:4:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    2 │ import { foo } with { type: "json" };
    3 │ import "lorem"
  > 4 │ assert { type: "json" }
      │        ^
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
    6 │ import "x" with;
  
  i An explicit or implicit semicolon is expected here...
  
    2 │ import { foo } with { type: "json" };
    3 │ import "lorem"
  > 4 │ assert { type: "json" }
      │        ^
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
    6 │ import "x" with;
  
  i ...Which is required to end this statement
  
    2 │ import { foo } with { type: "json" };
    3 │ import "lorem"
  > 4 │ assert { type: "json" }
      │ ^^^^^^^^
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
    6 │ import "x" with;
  
--
import_attribute_err.js:5:36 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Duplicate assertion keys are not allowed
  
    3 │ import "lorem"
    4 │ assert { type: "json" }
  > 5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
      │                                    ^^^^^^
    6 │ import "x" with;
    7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
  
  i First use of the key `type`
  
    3 │ import "lorem"
    4 │ assert { type: "json" }
  > 5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
      │                                    ^^^^^^
    6 │ import "x" with;
    7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
  
  i second use here
  
    3 │ import "lorem"
    4 │ assert { type: "json" }
  > 5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
      │                                                    ^^^^
    6 │ import "x" with;
    7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
  
--
import_attribute_err.js:6:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `{` but instead found `;`
  
    4 │ assert { type: "json" }
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
  > 6 │ import "x" with;
      │                ^
    7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
    8 │ import { a } from "a.json" with
  
  i Remove ;
  
--
import_attribute_err.js:7:59 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `string literal` but instead found `true`
  
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
    6 │ import "x" with;
  > 7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
      │                                                           ^^^^
    8 │ import { a } from "a.json" with
    9 │ 
  
  i Remove true
  
--
import_attribute_err.js:7:63 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `,`
  
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
    6 │ import "x" with;
  > 7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
      │                                                               ^
    8 │ import { a } from "a.json" with
    9 │ 
  
  i Remove ,
  
--
import_attribute_err.js:7:78 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `string literal` but instead found `1`
  
    5 │ import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
    6 │ import "x" with;
  > 7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
      │                                                                              ^
    8 │ import { a } from "a.json" with
    9 │ 
  
  i Remove 1
  
--
import_attribute_err.js:9:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `{` but instead the file ends
  
    7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
    8 │ import { a } from "a.json" with
  > 9 │ 
      │ 
  
  i the file ends here
  
    7 │ import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
    8 │ import { a } from "a.json" with
  > 9 │ 
      │ 
  
--
import "foo" with { type, "json" };
import { foo } with { type: "json" };
import "lorem"
assert { type: "json" }
import foo2 from "foo.json" with { "type": "json", type: "html", "type": "js" };
import "x" with;
import ipsum from "ipsum.json" with { type: "json", lazy: true, startAtLine: 1 };
import { a } from "a.json" with
