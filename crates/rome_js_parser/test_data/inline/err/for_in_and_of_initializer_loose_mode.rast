JsScript {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    statements: JsStatementList [
        JsForInStatement {
            for_token: FOR_KW@0..14 "for" [Comments("// SCRIPT"), Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@14..15 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: LET_KW@15..19 "let" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@19..21 "i" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: JsInitializerClause {
                        eq_token: EQ@21..23 "=" [] [Whitespace(" ")],
                        expression: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@23..25 "0" [] [Whitespace(" ")],
                        },
                    },
                },
            },
            in_token: IN_KW@25..28 "in" [] [Whitespace(" ")],
            expression: JsArrayExpression {
                l_brack_token: L_BRACK@28..29 "[" [] [],
                elements: JsArrayElementList [],
                r_brack_token: R_BRACK@29..30 "]" [] [],
            },
            r_paren_token: R_PAREN@30..32 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@32..33 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@33..34 "}" [] [],
            },
        },
        JsForInStatement {
            for_token: FOR_KW@34..39 "for" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@39..40 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: CONST_KW@40..46 "const" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@46..48 "i" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: JsInitializerClause {
                        eq_token: EQ@48..50 "=" [] [Whitespace(" ")],
                        expression: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@50..52 "0" [] [Whitespace(" ")],
                        },
                    },
                },
            },
            in_token: IN_KW@52..55 "in" [] [Whitespace(" ")],
            expression: JsArrayExpression {
                l_brack_token: L_BRACK@55..56 "[" [] [],
                elements: JsArrayElementList [],
                r_brack_token: R_BRACK@56..57 "]" [] [],
            },
            r_paren_token: R_PAREN@57..59 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@59..60 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@60..61 "}" [] [],
            },
        },
        JsForOfStatement {
            for_token: FOR_KW@61..66 "for" [Newline("\n")] [Whitespace(" ")],
            await_token: missing (optional),
            l_paren_token: L_PAREN@66..67 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: VAR_KW@67..71 "var" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@71..73 "i" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: JsInitializerClause {
                        eq_token: EQ@73..75 "=" [] [Whitespace(" ")],
                        expression: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@75..77 "0" [] [Whitespace(" ")],
                        },
                    },
                },
            },
            of_token: OF_KW@77..80 "of" [] [Whitespace(" ")],
            expression: JsArrayExpression {
                l_brack_token: L_BRACK@80..81 "[" [] [],
                elements: JsArrayElementList [],
                r_brack_token: R_BRACK@81..82 "]" [] [],
            },
            r_paren_token: R_PAREN@82..84 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@84..85 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@85..86 "}" [] [],
            },
        },
        JsForOfStatement {
            for_token: FOR_KW@86..91 "for" [Newline("\n")] [Whitespace(" ")],
            await_token: missing (optional),
            l_paren_token: L_PAREN@91..92 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: LET_KW@92..96 "let" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@96..98 "i" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: JsInitializerClause {
                        eq_token: EQ@98..100 "=" [] [Whitespace(" ")],
                        expression: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@100..102 "0" [] [Whitespace(" ")],
                        },
                    },
                },
            },
            of_token: OF_KW@102..105 "of" [] [Whitespace(" ")],
            expression: JsArrayExpression {
                l_brack_token: L_BRACK@105..106 "[" [] [],
                elements: JsArrayElementList [],
                r_brack_token: R_BRACK@106..107 "]" [] [],
            },
            r_paren_token: R_PAREN@107..109 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@109..110 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@110..111 "}" [] [],
            },
        },
        JsForOfStatement {
            for_token: FOR_KW@111..116 "for" [Newline("\n")] [Whitespace(" ")],
            await_token: missing (optional),
            l_paren_token: L_PAREN@116..117 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: CONST_KW@117..123 "const" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@123..125 "i" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: JsInitializerClause {
                        eq_token: EQ@125..127 "=" [] [Whitespace(" ")],
                        expression: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@127..129 "0" [] [Whitespace(" ")],
                        },
                    },
                },
            },
            of_token: OF_KW@129..132 "of" [] [Whitespace(" ")],
            expression: JsArrayExpression {
                l_brack_token: L_BRACK@132..133 "[" [] [],
                elements: JsArrayElementList [],
                r_brack_token: R_BRACK@133..134 "]" [] [],
            },
            r_paren_token: R_PAREN@134..136 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@136..137 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@137..138 "}" [] [],
            },
        },
    ],
    eof_token: EOF@138..139 "" [Newline("\n")] [],
}

0: JS_SCRIPT@0..139
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_STATEMENT_LIST@0..138
    0: JS_FOR_IN_STATEMENT@0..34
      0: FOR_KW@0..14 "for" [Comments("// SCRIPT"), Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@14..15 "(" [] []
      2: JS_FOR_VARIABLE_DECLARATION@15..25
        0: (empty)
        1: LET_KW@15..19 "let" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@19..25
          0: JS_IDENTIFIER_BINDING@19..21
            0: IDENT@19..21 "i" [] [Whitespace(" ")]
          1: (empty)
          2: JS_INITIALIZER_CLAUSE@21..25
            0: EQ@21..23 "=" [] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@23..25
              0: JS_NUMBER_LITERAL@23..25 "0" [] [Whitespace(" ")]
      3: IN_KW@25..28 "in" [] [Whitespace(" ")]
      4: JS_ARRAY_EXPRESSION@28..30
        0: L_BRACK@28..29 "[" [] []
        1: JS_ARRAY_ELEMENT_LIST@29..29
        2: R_BRACK@29..30 "]" [] []
      5: R_PAREN@30..32 ")" [] [Whitespace(" ")]
      6: JS_BLOCK_STATEMENT@32..34
        0: L_CURLY@32..33 "{" [] []
        1: JS_STATEMENT_LIST@33..33
        2: R_CURLY@33..34 "}" [] []
    1: JS_FOR_IN_STATEMENT@34..61
      0: FOR_KW@34..39 "for" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@39..40 "(" [] []
      2: JS_FOR_VARIABLE_DECLARATION@40..52
        0: (empty)
        1: CONST_KW@40..46 "const" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@46..52
          0: JS_IDENTIFIER_BINDING@46..48
            0: IDENT@46..48 "i" [] [Whitespace(" ")]
          1: (empty)
          2: JS_INITIALIZER_CLAUSE@48..52
            0: EQ@48..50 "=" [] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@50..52
              0: JS_NUMBER_LITERAL@50..52 "0" [] [Whitespace(" ")]
      3: IN_KW@52..55 "in" [] [Whitespace(" ")]
      4: JS_ARRAY_EXPRESSION@55..57
        0: L_BRACK@55..56 "[" [] []
        1: JS_ARRAY_ELEMENT_LIST@56..56
        2: R_BRACK@56..57 "]" [] []
      5: R_PAREN@57..59 ")" [] [Whitespace(" ")]
      6: JS_BLOCK_STATEMENT@59..61
        0: L_CURLY@59..60 "{" [] []
        1: JS_STATEMENT_LIST@60..60
        2: R_CURLY@60..61 "}" [] []
    2: JS_FOR_OF_STATEMENT@61..86
      0: FOR_KW@61..66 "for" [Newline("\n")] [Whitespace(" ")]
      1: (empty)
      2: L_PAREN@66..67 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@67..77
        0: (empty)
        1: VAR_KW@67..71 "var" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@71..77
          0: JS_IDENTIFIER_BINDING@71..73
            0: IDENT@71..73 "i" [] [Whitespace(" ")]
          1: (empty)
          2: JS_INITIALIZER_CLAUSE@73..77
            0: EQ@73..75 "=" [] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@75..77
              0: JS_NUMBER_LITERAL@75..77 "0" [] [Whitespace(" ")]
      4: OF_KW@77..80 "of" [] [Whitespace(" ")]
      5: JS_ARRAY_EXPRESSION@80..82
        0: L_BRACK@80..81 "[" [] []
        1: JS_ARRAY_ELEMENT_LIST@81..81
        2: R_BRACK@81..82 "]" [] []
      6: R_PAREN@82..84 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@84..86
        0: L_CURLY@84..85 "{" [] []
        1: JS_STATEMENT_LIST@85..85
        2: R_CURLY@85..86 "}" [] []
    3: JS_FOR_OF_STATEMENT@86..111
      0: FOR_KW@86..91 "for" [Newline("\n")] [Whitespace(" ")]
      1: (empty)
      2: L_PAREN@91..92 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@92..102
        0: (empty)
        1: LET_KW@92..96 "let" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@96..102
          0: JS_IDENTIFIER_BINDING@96..98
            0: IDENT@96..98 "i" [] [Whitespace(" ")]
          1: (empty)
          2: JS_INITIALIZER_CLAUSE@98..102
            0: EQ@98..100 "=" [] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@100..102
              0: JS_NUMBER_LITERAL@100..102 "0" [] [Whitespace(" ")]
      4: OF_KW@102..105 "of" [] [Whitespace(" ")]
      5: JS_ARRAY_EXPRESSION@105..107
        0: L_BRACK@105..106 "[" [] []
        1: JS_ARRAY_ELEMENT_LIST@106..106
        2: R_BRACK@106..107 "]" [] []
      6: R_PAREN@107..109 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@109..111
        0: L_CURLY@109..110 "{" [] []
        1: JS_STATEMENT_LIST@110..110
        2: R_CURLY@110..111 "}" [] []
    4: JS_FOR_OF_STATEMENT@111..138
      0: FOR_KW@111..116 "for" [Newline("\n")] [Whitespace(" ")]
      1: (empty)
      2: L_PAREN@116..117 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@117..129
        0: (empty)
        1: CONST_KW@117..123 "const" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@123..129
          0: JS_IDENTIFIER_BINDING@123..125
            0: IDENT@123..125 "i" [] [Whitespace(" ")]
          1: (empty)
          2: JS_INITIALIZER_CLAUSE@125..129
            0: EQ@125..127 "=" [] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@127..129
              0: JS_NUMBER_LITERAL@127..129 "0" [] [Whitespace(" ")]
      4: OF_KW@129..132 "of" [] [Whitespace(" ")]
      5: JS_ARRAY_EXPRESSION@132..134
        0: L_BRACK@132..133 "[" [] []
        1: JS_ARRAY_ELEMENT_LIST@133..133
        2: R_BRACK@133..134 "]" [] []
      6: R_PAREN@134..136 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@136..138
        0: L_CURLY@136..137 "{" [] []
        1: JS_STATEMENT_LIST@137..137
        2: R_CURLY@137..138 "}" [] []
  3: EOF@138..139 "" [Newline("\n")] []
--
for_in_and_of_initializer_loose_mode.js:2:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × `for..in` statement declarators cannot have an initializer expression
  
    1 │ // SCRIPT
  > 2 │ for (let i = 0 in []) {}
      │            ^^^
    3 │ for (const i = 0 in []) {}
    4 │ for (var i = 0 of []) {}
  
--
for_in_and_of_initializer_loose_mode.js:3:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × `for..in` statement declarators cannot have an initializer expression
  
    1 │ // SCRIPT
    2 │ for (let i = 0 in []) {}
  > 3 │ for (const i = 0 in []) {}
      │              ^^^
    4 │ for (var i = 0 of []) {}
    5 │ for (let i = 0 of []) {}
  
--
for_in_and_of_initializer_loose_mode.js:4:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × `for..of` statement declarators cannot have an initializer expression
  
    2 │ for (let i = 0 in []) {}
    3 │ for (const i = 0 in []) {}
  > 4 │ for (var i = 0 of []) {}
      │            ^^^
    5 │ for (let i = 0 of []) {}
    6 │ for (const i = 0 of []) {}
  
--
for_in_and_of_initializer_loose_mode.js:5:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × `for..of` statement declarators cannot have an initializer expression
  
    3 │ for (const i = 0 in []) {}
    4 │ for (var i = 0 of []) {}
  > 5 │ for (let i = 0 of []) {}
      │            ^^^
    6 │ for (const i = 0 of []) {}
    7 │ 
  
--
for_in_and_of_initializer_loose_mode.js:6:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × `for..of` statement declarators cannot have an initializer expression
  
    4 │ for (var i = 0 of []) {}
    5 │ for (let i = 0 of []) {}
  > 6 │ for (const i = 0 of []) {}
      │              ^^^
    7 │ 
  
--
// SCRIPT
for (let i = 0 in []) {}
for (const i = 0 in []) {}
for (var i = 0 of []) {}
for (let i = 0 of []) {}
for (const i = 0 of []) {}
