JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsDoWhileStatement {
            do_token: DO_KW@0..3 "do" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@3..5 "{" [] [Whitespace(" ")],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@5..7 "}" [] [Whitespace(" ")],
            },
            while_token: missing (required),
            l_paren_token: missing (required),
            test: missing (required),
            r_paren_token: missing (required),
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                BREAK_KW@7..13 "break" [] [Whitespace(" ")],
            ],
        },
        JsExpressionStatement {
            expression: JsParenthesizedExpression {
                l_paren_token: L_PAREN@13..14 "(" [] [],
                expression: missing (required),
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                CONTINUE_KW@14..22 "continue" [] [],
            ],
        },
        JsBogusStatement {
            items: [
                R_PAREN@22..23 ")" [] [],
            ],
        },
        JsDoWhileStatement {
            do_token: DO_KW@23..27 "do" [Newline("\n")] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@27..29 "{" [] [Whitespace(" ")],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@29..31 "}" [] [Whitespace(" ")],
            },
            while_token: missing (required),
            l_paren_token: missing (required),
            test: missing (required),
            r_paren_token: missing (required),
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                CONTINUE_KW@31..40 "continue" [] [Whitespace(" ")],
            ],
        },
        JsExpressionStatement {
            expression: JsParenthesizedExpression {
                l_paren_token: L_PAREN@40..41 "(" [] [],
                expression: missing (required),
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsBogusStatement {
            items: [
                BREAK_KW@41..46 "break" [] [],
            ],
        },
        JsBogusStatement {
            items: [
                R_PAREN@46..47 ")" [] [],
            ],
        },
    ],
    eof_token: EOF@47..48 "" [Newline("\n")] [],
}

0: JS_MODULE@0..48
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..47
    0: JS_DO_WHILE_STATEMENT@0..7
      0: DO_KW@0..3 "do" [] [Whitespace(" ")]
      1: JS_BLOCK_STATEMENT@3..7
        0: L_CURLY@3..5 "{" [] [Whitespace(" ")]
        1: JS_STATEMENT_LIST@5..5
        2: R_CURLY@5..7 "}" [] [Whitespace(" ")]
      2: (empty)
      3: (empty)
      4: (empty)
      5: (empty)
      6: (empty)
    1: JS_BOGUS_STATEMENT@7..13
      0: BREAK_KW@7..13 "break" [] [Whitespace(" ")]
    2: JS_EXPRESSION_STATEMENT@13..14
      0: JS_PARENTHESIZED_EXPRESSION@13..14
        0: L_PAREN@13..14 "(" [] []
        1: (empty)
        2: (empty)
      1: (empty)
    3: JS_BOGUS_STATEMENT@14..22
      0: CONTINUE_KW@14..22 "continue" [] []
    4: JS_BOGUS_STATEMENT@22..23
      0: R_PAREN@22..23 ")" [] []
    5: JS_DO_WHILE_STATEMENT@23..31
      0: DO_KW@23..27 "do" [Newline("\n")] [Whitespace(" ")]
      1: JS_BLOCK_STATEMENT@27..31
        0: L_CURLY@27..29 "{" [] [Whitespace(" ")]
        1: JS_STATEMENT_LIST@29..29
        2: R_CURLY@29..31 "}" [] [Whitespace(" ")]
      2: (empty)
      3: (empty)
      4: (empty)
      5: (empty)
      6: (empty)
    6: JS_BOGUS_STATEMENT@31..40
      0: CONTINUE_KW@31..40 "continue" [] [Whitespace(" ")]
    7: JS_EXPRESSION_STATEMENT@40..41
      0: JS_PARENTHESIZED_EXPRESSION@40..41
        0: L_PAREN@40..41 "(" [] []
        1: (empty)
        2: (empty)
      1: (empty)
    8: JS_BOGUS_STATEMENT@41..46
      0: BREAK_KW@41..46 "break" [] []
    9: JS_BOGUS_STATEMENT@46..47
      0: R_PAREN@46..47 ")" [] []
  3: EOF@47..48 "" [Newline("\n")] []
--
do_while_no_continue_break.js:1:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `while` but instead found `break`
  
  > 1 │ do { } break (continue)
      │        ^^^^^
    2 │ do { } continue (break)
    3 │ 
  
  i Remove break
  
--
do_while_no_continue_break.js:1:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ do { } break (continue)
      │              ^
    2 │ do { } continue (break)
    3 │ 
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ do { } break (continue)
      │              ^
    2 │ do { } continue (break)
    3 │ 
  
  i ...Which is required to end this statement
  
  > 1 │ do { } break (continue)
      │        ^^^^^^^
    2 │ do { } continue (break)
    3 │ 
  
--
do_while_no_continue_break.js:1:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A `break` statement can only be used within an enclosing iteration or switch statement.
  
  > 1 │ do { } break (continue)
      │        ^^^^^
    2 │ do { } continue (break)
    3 │ 
  
--
do_while_no_continue_break.js:1:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `continue`
  
  > 1 │ do { } break (continue)
      │               ^^^^^^^^
    2 │ do { } continue (break)
    3 │ 
  
  i Remove continue
  
--
do_while_no_continue_break.js:1:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ do { } break (continue)
      │                       ^
    2 │ do { } continue (break)
    3 │ 
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ do { } break (continue)
      │                       ^
    2 │ do { } continue (break)
    3 │ 
  
  i ...Which is required to end this statement
  
  > 1 │ do { } break (continue)
      │               ^^^^^^^^^
    2 │ do { } continue (break)
    3 │ 
  
--
do_while_no_continue_break.js:1:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A `continue` statement can only be used within an enclosing `for`, `while` or `do while` statement.
  
  > 1 │ do { } break (continue)
      │               ^^^^^^^^
    2 │ do { } continue (break)
    3 │ 
  
--
do_while_no_continue_break.js:1:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found ')'
  
  > 1 │ do { } break (continue)
      │                       ^
    2 │ do { } continue (break)
    3 │ 
  
  i Expected a statement here
  
  > 1 │ do { } break (continue)
      │                       ^
    2 │ do { } continue (break)
    3 │ 
  
--
do_while_no_continue_break.js:2:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `while` but instead found `continue`
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │        ^^^^^^^^
    3 │ 
  
  i Remove continue
  
--
do_while_no_continue_break.js:2:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                 ^
    3 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                 ^
    3 │ 
  
  i ...Which is required to end this statement
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │        ^^^^^^^^^^
    3 │ 
  
--
do_while_no_continue_break.js:2:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A `continue` statement can only be used within an enclosing `for`, `while` or `do while` statement.
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │        ^^^^^^^^
    3 │ 
  
--
do_while_no_continue_break.js:2:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `break`
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                  ^^^^^
    3 │ 
  
  i Remove break
  
--
do_while_no_continue_break.js:2:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                       ^
    3 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                       ^
    3 │ 
  
  i ...Which is required to end this statement
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                  ^^^^^^
    3 │ 
  
--
do_while_no_continue_break.js:2:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × A `break` statement can only be used within an enclosing iteration or switch statement.
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                  ^^^^^
    3 │ 
  
--
do_while_no_continue_break.js:2:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found ')'
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                       ^
    3 │ 
  
  i Expected a statement here
  
    1 │ do { } break (continue)
  > 2 │ do { } continue (break)
      │                       ^
    3 │ 
  
--
do { } break (continue)
do { } continue (break)
