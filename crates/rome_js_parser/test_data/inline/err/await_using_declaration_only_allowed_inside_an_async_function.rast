JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsFunctionDeclaration {
            async_token: missing (optional),
            function_token: FUNCTION_KW@0..9 "function" [] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@9..12 "foo" [] [],
            },
            type_parameters: missing (optional),
            parameters: JsParameters {
                l_paren_token: L_PAREN@12..13 "(" [] [],
                items: JsParameterList [],
                r_paren_token: R_PAREN@13..15 ")" [] [Whitespace(" ")],
            },
            return_type_annotation: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@15..17 "{" [] [Whitespace(" ")],
                directives: JsDirectiveList [],
                statements: JsStatementList [
                    JsBogusStatement {
                        items: [
                            JsVariableDeclaration {
                                await_token: AWAIT_KW@17..23 "await" [] [Whitespace(" ")],
                                kind: USING_KW@23..29 "using" [] [Whitespace(" ")],
                                declarators: JsVariableDeclaratorList [
                                    JsVariableDeclarator {
                                        id: JsIdentifierBinding {
                                            name_token: IDENT@29..31 "x" [] [Whitespace(" ")],
                                        },
                                        variable_annotation: missing (optional),
                                        initializer: JsInitializerClause {
                                            eq_token: EQ@31..33 "=" [] [Whitespace(" ")],
                                            expression: JsIdentifierExpression {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@33..35 "y" [] [Whitespace(" ")],
                                                },
                                            },
                                        },
                                    },
                                ],
                            },
                        ],
                    },
                ],
                r_curly_token: R_CURLY@35..36 "}" [] [],
            },
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@36..37 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@37..42 "foo" [Newline("\n")] [Whitespace(" ")],
                },
                operator_token: EQ@42..44 "=" [] [Whitespace(" ")],
                right: JsFunctionExpression {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@44..52 "function" [] [],
                    star_token: missing (optional),
                    id: missing (optional),
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@52..53 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@53..55 ")" [] [Whitespace(" ")],
                    },
                    return_type_annotation: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@55..57 "{" [] [Whitespace(" ")],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [
                            JsBogusStatement {
                                items: [
                                    JsVariableDeclaration {
                                        await_token: AWAIT_KW@57..63 "await" [] [Whitespace(" ")],
                                        kind: USING_KW@63..69 "using" [] [Whitespace(" ")],
                                        declarators: JsVariableDeclaratorList [
                                            JsVariableDeclarator {
                                                id: JsIdentifierBinding {
                                                    name_token: IDENT@69..71 "x" [] [Whitespace(" ")],
                                                },
                                                variable_annotation: missing (optional),
                                                initializer: JsInitializerClause {
                                                    eq_token: EQ@71..73 "=" [] [Whitespace(" ")],
                                                    expression: JsIdentifierExpression {
                                                        name: JsReferenceIdentifier {
                                                            value_token: IDENT@73..75 "y" [] [Whitespace(" ")],
                                                        },
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                ],
                            },
                        ],
                        r_curly_token: R_CURLY@75..76 "}" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@76..77 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@77..82 "foo" [Newline("\n")] [Whitespace(" ")],
                },
                operator_token: EQ@82..84 "=" [] [Whitespace(" ")],
                right: JsArrowFunctionExpression {
                    async_token: missing (optional),
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@84..85 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@85..87 ")" [] [Whitespace(" ")],
                    },
                    return_type_annotation: missing (optional),
                    fat_arrow_token: FAT_ARROW@87..90 "=>" [] [Whitespace(" ")],
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@90..92 "{" [] [Whitespace(" ")],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [
                            JsBogusStatement {
                                items: [
                                    JsVariableDeclaration {
                                        await_token: AWAIT_KW@92..98 "await" [] [Whitespace(" ")],
                                        kind: USING_KW@98..104 "using" [] [Whitespace(" ")],
                                        declarators: JsVariableDeclaratorList [
                                            JsVariableDeclarator {
                                                id: JsIdentifierBinding {
                                                    name_token: IDENT@104..106 "x" [] [Whitespace(" ")],
                                                },
                                                variable_annotation: missing (optional),
                                                initializer: JsInitializerClause {
                                                    eq_token: EQ@106..108 "=" [] [Whitespace(" ")],
                                                    expression: JsIdentifierExpression {
                                                        name: JsReferenceIdentifier {
                                                            value_token: IDENT@108..110 "y" [] [Whitespace(" ")],
                                                        },
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                ],
                            },
                        ],
                        r_curly_token: R_CURLY@110..111 "}" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@111..112 ";" [] [],
        },
    ],
    eof_token: EOF@112..113 "" [Newline("\n")] [],
}

0: JS_MODULE@0..113
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..112
    0: JS_FUNCTION_DECLARATION@0..36
      0: (empty)
      1: FUNCTION_KW@0..9 "function" [] [Whitespace(" ")]
      2: (empty)
      3: JS_IDENTIFIER_BINDING@9..12
        0: IDENT@9..12 "foo" [] []
      4: (empty)
      5: JS_PARAMETERS@12..15
        0: L_PAREN@12..13 "(" [] []
        1: JS_PARAMETER_LIST@13..13
        2: R_PAREN@13..15 ")" [] [Whitespace(" ")]
      6: (empty)
      7: JS_FUNCTION_BODY@15..36
        0: L_CURLY@15..17 "{" [] [Whitespace(" ")]
        1: JS_DIRECTIVE_LIST@17..17
        2: JS_STATEMENT_LIST@17..35
          0: JS_BOGUS_STATEMENT@17..35
            0: JS_VARIABLE_DECLARATION@17..35
              0: AWAIT_KW@17..23 "await" [] [Whitespace(" ")]
              1: USING_KW@23..29 "using" [] [Whitespace(" ")]
              2: JS_VARIABLE_DECLARATOR_LIST@29..35
                0: JS_VARIABLE_DECLARATOR@29..35
                  0: JS_IDENTIFIER_BINDING@29..31
                    0: IDENT@29..31 "x" [] [Whitespace(" ")]
                  1: (empty)
                  2: JS_INITIALIZER_CLAUSE@31..35
                    0: EQ@31..33 "=" [] [Whitespace(" ")]
                    1: JS_IDENTIFIER_EXPRESSION@33..35
                      0: JS_REFERENCE_IDENTIFIER@33..35
                        0: IDENT@33..35 "y" [] [Whitespace(" ")]
        3: R_CURLY@35..36 "}" [] []
    1: JS_EMPTY_STATEMENT@36..37
      0: SEMICOLON@36..37 ";" [] []
    2: JS_EXPRESSION_STATEMENT@37..77
      0: JS_ASSIGNMENT_EXPRESSION@37..76
        0: JS_IDENTIFIER_ASSIGNMENT@37..42
          0: IDENT@37..42 "foo" [Newline("\n")] [Whitespace(" ")]
        1: EQ@42..44 "=" [] [Whitespace(" ")]
        2: JS_FUNCTION_EXPRESSION@44..76
          0: (empty)
          1: FUNCTION_KW@44..52 "function" [] []
          2: (empty)
          3: (empty)
          4: (empty)
          5: JS_PARAMETERS@52..55
            0: L_PAREN@52..53 "(" [] []
            1: JS_PARAMETER_LIST@53..53
            2: R_PAREN@53..55 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@55..76
            0: L_CURLY@55..57 "{" [] [Whitespace(" ")]
            1: JS_DIRECTIVE_LIST@57..57
            2: JS_STATEMENT_LIST@57..75
              0: JS_BOGUS_STATEMENT@57..75
                0: JS_VARIABLE_DECLARATION@57..75
                  0: AWAIT_KW@57..63 "await" [] [Whitespace(" ")]
                  1: USING_KW@63..69 "using" [] [Whitespace(" ")]
                  2: JS_VARIABLE_DECLARATOR_LIST@69..75
                    0: JS_VARIABLE_DECLARATOR@69..75
                      0: JS_IDENTIFIER_BINDING@69..71
                        0: IDENT@69..71 "x" [] [Whitespace(" ")]
                      1: (empty)
                      2: JS_INITIALIZER_CLAUSE@71..75
                        0: EQ@71..73 "=" [] [Whitespace(" ")]
                        1: JS_IDENTIFIER_EXPRESSION@73..75
                          0: JS_REFERENCE_IDENTIFIER@73..75
                            0: IDENT@73..75 "y" [] [Whitespace(" ")]
            3: R_CURLY@75..76 "}" [] []
      1: SEMICOLON@76..77 ";" [] []
    3: JS_EXPRESSION_STATEMENT@77..112
      0: JS_ASSIGNMENT_EXPRESSION@77..111
        0: JS_IDENTIFIER_ASSIGNMENT@77..82
          0: IDENT@77..82 "foo" [Newline("\n")] [Whitespace(" ")]
        1: EQ@82..84 "=" [] [Whitespace(" ")]
        2: JS_ARROW_FUNCTION_EXPRESSION@84..111
          0: (empty)
          1: (empty)
          2: JS_PARAMETERS@84..87
            0: L_PAREN@84..85 "(" [] []
            1: JS_PARAMETER_LIST@85..85
            2: R_PAREN@85..87 ")" [] [Whitespace(" ")]
          3: (empty)
          4: FAT_ARROW@87..90 "=>" [] [Whitespace(" ")]
          5: JS_FUNCTION_BODY@90..111
            0: L_CURLY@90..92 "{" [] [Whitespace(" ")]
            1: JS_DIRECTIVE_LIST@92..92
            2: JS_STATEMENT_LIST@92..110
              0: JS_BOGUS_STATEMENT@92..110
                0: JS_VARIABLE_DECLARATION@92..110
                  0: AWAIT_KW@92..98 "await" [] [Whitespace(" ")]
                  1: USING_KW@98..104 "using" [] [Whitespace(" ")]
                  2: JS_VARIABLE_DECLARATOR_LIST@104..110
                    0: JS_VARIABLE_DECLARATOR@104..110
                      0: JS_IDENTIFIER_BINDING@104..106
                        0: IDENT@104..106 "x" [] [Whitespace(" ")]
                      1: (empty)
                      2: JS_INITIALIZER_CLAUSE@106..110
                        0: EQ@106..108 "=" [] [Whitespace(" ")]
                        1: JS_IDENTIFIER_EXPRESSION@108..110
                          0: JS_REFERENCE_IDENTIFIER@108..110
                            0: IDENT@108..110 "y" [] [Whitespace(" ")]
            3: R_CURLY@110..111 "}" [] []
      1: SEMICOLON@111..112 ";" [] []
  3: EOF@112..113 "" [Newline("\n")] []
--
await_using_declaration_only_allowed_inside_an_async_function.js:1:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━

  × `await using` declarations are only allowed at top-level or inside an async function
  
  > 1 │ function foo() { await using x = y };
      │                  ^^^^^^^^^^^^^^^^^
    2 │ foo = function() { await using x = y };
    3 │ foo = () => { await using x = y };
  
  i Wrap this declaration in an async function
  
--
await_using_declaration_only_allowed_inside_an_async_function.js:2:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━

  × `await using` declarations are only allowed at top-level or inside an async function
  
    1 │ function foo() { await using x = y };
  > 2 │ foo = function() { await using x = y };
      │                    ^^^^^^^^^^^^^^^^^
    3 │ foo = () => { await using x = y };
    4 │ 
  
  i Wrap this declaration in an async function
  
--
await_using_declaration_only_allowed_inside_an_async_function.js:3:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━

  × `await using` declarations are only allowed at top-level or inside an async function
  
    1 │ function foo() { await using x = y };
    2 │ foo = function() { await using x = y };
  > 3 │ foo = () => { await using x = y };
      │               ^^^^^^^^^^^^^^^^^
    4 │ 
  
  i Wrap this declaration in an async function
  
--
function foo() { await using x = y };
foo = function() { await using x = y };
foo = () => { await using x = y };
