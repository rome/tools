JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..5 "a" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@5..7 ":" [] [Whitespace(" ")],
                            ty: TsAnyType {
                                any_token: ANY_KW@7..10 "any" [] [],
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@10..11 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: TsSatisfiesAssignment {
                    assignment: JsIdentifierAssignment {
                        name_token: IDENT@11..14 "a" [Newline("\n")] [Whitespace(" ")],
                    },
                    satisfies_token: SATISFIES_KW@14..24 "satisfies" [] [Whitespace(" ")],
                    ty: TsStringType {
                        string_token: STRING_KW@24..31 "string" [] [Whitespace(" ")],
                    },
                },
                operator_token: EQ@31..33 "=" [] [Whitespace(" ")],
                right: JsStringLiteralExpression {
                    value_token: JS_STRING_LITERAL@33..41 "\"string\"" [] [],
                },
            },
            semicolon_token: SEMICOLON@41..42 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsParenthesizedAssignment {
                    l_paren_token: L_PAREN@42..44 "(" [Newline("\n")] [],
                    assignment: TsSatisfiesAssignment {
                        assignment: JsBogusAssignment {
                            items: [
                                JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@44..45 "a" [] [],
                                    },
                                },
                                JsCallArguments {
                                    l_paren_token: L_PAREN@45..46 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@46..48 ")" [] [Whitespace(" ")],
                                },
                            ],
                        },
                        satisfies_token: SATISFIES_KW@48..58 "satisfies" [] [Whitespace(" ")],
                        ty: TsStringType {
                            string_token: STRING_KW@58..64 "string" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@64..66 ")" [] [Whitespace(" ")],
                },
                operator_token: EQ@66..68 "=" [] [Whitespace(" ")],
                right: JsStringLiteralExpression {
                    value_token: JS_STRING_LITERAL@68..76 "\"string\"" [] [],
                },
            },
            semicolon_token: SEMICOLON@76..77 ";" [] [],
        },
    ],
    eof_token: EOF@77..78 "" [Newline("\n")] [],
}

0: JS_MODULE@0..78
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..77
    0: JS_VARIABLE_STATEMENT@0..11
      0: JS_VARIABLE_DECLARATION@0..10
        0: (empty)
        1: LET_KW@0..4 "let" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@4..10
          0: JS_VARIABLE_DECLARATOR@4..10
            0: JS_IDENTIFIER_BINDING@4..5
              0: IDENT@4..5 "a" [] []
            1: TS_TYPE_ANNOTATION@5..10
              0: COLON@5..7 ":" [] [Whitespace(" ")]
              1: TS_ANY_TYPE@7..10
                0: ANY_KW@7..10 "any" [] []
            2: (empty)
      1: SEMICOLON@10..11 ";" [] []
    1: JS_EXPRESSION_STATEMENT@11..42
      0: JS_ASSIGNMENT_EXPRESSION@11..41
        0: TS_SATISFIES_ASSIGNMENT@11..31
          0: JS_IDENTIFIER_ASSIGNMENT@11..14
            0: IDENT@11..14 "a" [Newline("\n")] [Whitespace(" ")]
          1: SATISFIES_KW@14..24 "satisfies" [] [Whitespace(" ")]
          2: TS_STRING_TYPE@24..31
            0: STRING_KW@24..31 "string" [] [Whitespace(" ")]
        1: EQ@31..33 "=" [] [Whitespace(" ")]
        2: JS_STRING_LITERAL_EXPRESSION@33..41
          0: JS_STRING_LITERAL@33..41 "\"string\"" [] []
      1: SEMICOLON@41..42 ";" [] []
    2: JS_EXPRESSION_STATEMENT@42..77
      0: JS_ASSIGNMENT_EXPRESSION@42..76
        0: JS_PARENTHESIZED_ASSIGNMENT@42..66
          0: L_PAREN@42..44 "(" [Newline("\n")] []
          1: TS_SATISFIES_ASSIGNMENT@44..64
            0: JS_BOGUS_ASSIGNMENT@44..48
              0: JS_IDENTIFIER_EXPRESSION@44..45
                0: JS_REFERENCE_IDENTIFIER@44..45
                  0: IDENT@44..45 "a" [] []
              1: JS_CALL_ARGUMENTS@45..48
                0: L_PAREN@45..46 "(" [] []
                1: JS_CALL_ARGUMENT_LIST@46..46
                2: R_PAREN@46..48 ")" [] [Whitespace(" ")]
            1: SATISFIES_KW@48..58 "satisfies" [] [Whitespace(" ")]
            2: TS_STRING_TYPE@58..64
              0: STRING_KW@58..64 "string" [] []
          2: R_PAREN@64..66 ")" [] [Whitespace(" ")]
        1: EQ@66..68 "=" [] [Whitespace(" ")]
        2: JS_STRING_LITERAL_EXPRESSION@68..76
          0: JS_STRING_LITERAL@68..76 "\"string\"" [] []
      1: SEMICOLON@76..77 ";" [] []
  3: EOF@77..78 "" [Newline("\n")] []
--
ts_satisfies_assignment_no_parenthesize.ts:3:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Invalid assignment to `a()`
  
    1 │ let a: any;
    2 │ a satisfies string = "string";
  > 3 │ (a() satisfies string) = "string";
      │  ^^^
    4 │ 
  
  i This expression cannot be assigned to
  
--
let a: any;
a satisfies string = "string";
(a() satisfies string) = "string";
