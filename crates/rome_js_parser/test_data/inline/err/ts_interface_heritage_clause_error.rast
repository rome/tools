JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsInterfaceDeclaration {
            interface_token: INTERFACE_KW@0..10 "interface" [] [Whitespace(" ")],
            id: TsIdentifierBinding {
                name_token: IDENT@10..12 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            extends_clause: missing (optional),
            l_curly_token: L_CURLY@12..13 "{" [] [],
            members: TsTypeMemberList [],
            r_curly_token: R_CURLY@13..14 "}" [] [],
        },
        JsBogusStatement {
            items: [
                INTERFACE_KW@14..25 "interface" [Newline("\n")] [Whitespace(" ")],
                TsIdentifierBinding {
                    name_token: IDENT@25..27 "B" [] [Whitespace(" ")],
                },
                TsImplementsClause {
                    implements_token: IMPLEMENTS_KW@27..38 "implements" [] [Whitespace(" ")],
                    types: TsTypeList [
                        TsNameWithTypeArguments {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@38..40 "A" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                },
                L_CURLY@40..41 "{" [] [],
                TsTypeMemberList [],
                R_CURLY@41..42 "}" [] [],
            ],
        },
        JsBogusStatement {
            items: [
                INTERFACE_KW@42..53 "interface" [Newline("\n")] [Whitespace(" ")],
                TsIdentifierBinding {
                    name_token: IDENT@53..55 "C" [] [Whitespace(" ")],
                },
                TsExtendsClause {
                    extends_token: EXTENDS_KW@55..63 "extends" [] [Whitespace(" ")],
                    types: TsTypeList [
                        TsNameWithTypeArguments {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@63..65 "A" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                },
                TsExtendsClause {
                    extends_token: EXTENDS_KW@65..73 "extends" [] [Whitespace(" ")],
                    types: TsTypeList [
                        TsNameWithTypeArguments {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@73..75 "B" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                },
                L_CURLY@75..76 "{" [] [],
                TsTypeMemberList [],
                R_CURLY@76..77 "}" [] [],
            ],
        },
        TsInterfaceDeclaration {
            interface_token: INTERFACE_KW@77..88 "interface" [Newline("\n")] [Whitespace(" ")],
            id: TsIdentifierBinding {
                name_token: IDENT@88..90 "D" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            extends_clause: TsExtendsClause {
                extends_token: EXTENDS_KW@90..98 "extends" [] [Whitespace(" ")],
                types: TsTypeList [],
            },
            l_curly_token: L_CURLY@98..99 "{" [] [],
            members: TsTypeMemberList [],
            r_curly_token: R_CURLY@99..100 "}" [] [],
        },
        TsInterfaceDeclaration {
            interface_token: INTERFACE_KW@100..111 "interface" [Newline("\n")] [Whitespace(" ")],
            id: TsIdentifierBinding {
                name_token: IDENT@111..113 "E" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            extends_clause: TsExtendsClause {
                extends_token: EXTENDS_KW@113..121 "extends" [] [Whitespace(" ")],
                types: TsTypeList [
                    TsNameWithTypeArguments {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@121..122 "A" [] [],
                        },
                        type_arguments: missing (optional),
                    },
                    COMMA@122..124 "," [] [Whitespace(" ")],
                    missing element,
                ],
            },
            l_curly_token: L_CURLY@124..125 "{" [] [],
            members: TsTypeMemberList [],
            r_curly_token: R_CURLY@125..126 "}" [] [],
        },
    ],
    eof_token: EOF@126..127 "" [Newline("\n")] [],
}

0: JS_MODULE@0..127
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..126
    0: TS_INTERFACE_DECLARATION@0..14
      0: INTERFACE_KW@0..10 "interface" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@10..12
        0: IDENT@10..12 "A" [] [Whitespace(" ")]
      2: (empty)
      3: (empty)
      4: L_CURLY@12..13 "{" [] []
      5: TS_TYPE_MEMBER_LIST@13..13
      6: R_CURLY@13..14 "}" [] []
    1: JS_BOGUS_STATEMENT@14..42
      0: INTERFACE_KW@14..25 "interface" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@25..27
        0: IDENT@25..27 "B" [] [Whitespace(" ")]
      2: TS_IMPLEMENTS_CLAUSE@27..40
        0: IMPLEMENTS_KW@27..38 "implements" [] [Whitespace(" ")]
        1: TS_TYPE_LIST@38..40
          0: TS_NAME_WITH_TYPE_ARGUMENTS@38..40
            0: JS_REFERENCE_IDENTIFIER@38..40
              0: IDENT@38..40 "A" [] [Whitespace(" ")]
            1: (empty)
      3: L_CURLY@40..41 "{" [] []
      4: TS_TYPE_MEMBER_LIST@41..41
      5: R_CURLY@41..42 "}" [] []
    2: JS_BOGUS_STATEMENT@42..77
      0: INTERFACE_KW@42..53 "interface" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@53..55
        0: IDENT@53..55 "C" [] [Whitespace(" ")]
      2: TS_EXTENDS_CLAUSE@55..65
        0: EXTENDS_KW@55..63 "extends" [] [Whitespace(" ")]
        1: TS_TYPE_LIST@63..65
          0: TS_NAME_WITH_TYPE_ARGUMENTS@63..65
            0: JS_REFERENCE_IDENTIFIER@63..65
              0: IDENT@63..65 "A" [] [Whitespace(" ")]
            1: (empty)
      3: TS_EXTENDS_CLAUSE@65..75
        0: EXTENDS_KW@65..73 "extends" [] [Whitespace(" ")]
        1: TS_TYPE_LIST@73..75
          0: TS_NAME_WITH_TYPE_ARGUMENTS@73..75
            0: JS_REFERENCE_IDENTIFIER@73..75
              0: IDENT@73..75 "B" [] [Whitespace(" ")]
            1: (empty)
      4: L_CURLY@75..76 "{" [] []
      5: TS_TYPE_MEMBER_LIST@76..76
      6: R_CURLY@76..77 "}" [] []
    3: TS_INTERFACE_DECLARATION@77..100
      0: INTERFACE_KW@77..88 "interface" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@88..90
        0: IDENT@88..90 "D" [] [Whitespace(" ")]
      2: (empty)
      3: TS_EXTENDS_CLAUSE@90..98
        0: EXTENDS_KW@90..98 "extends" [] [Whitespace(" ")]
        1: TS_TYPE_LIST@98..98
      4: L_CURLY@98..99 "{" [] []
      5: TS_TYPE_MEMBER_LIST@99..99
      6: R_CURLY@99..100 "}" [] []
    4: TS_INTERFACE_DECLARATION@100..126
      0: INTERFACE_KW@100..111 "interface" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@111..113
        0: IDENT@111..113 "E" [] [Whitespace(" ")]
      2: (empty)
      3: TS_EXTENDS_CLAUSE@113..124
        0: EXTENDS_KW@113..121 "extends" [] [Whitespace(" ")]
        1: TS_TYPE_LIST@121..124
          0: TS_NAME_WITH_TYPE_ARGUMENTS@121..122
            0: JS_REFERENCE_IDENTIFIER@121..122
              0: IDENT@121..122 "A" [] []
            1: (empty)
          1: COMMA@122..124 "," [] [Whitespace(" ")]
          2: (empty)
      4: L_CURLY@124..125 "{" [] []
      5: TS_TYPE_MEMBER_LIST@125..125
      6: R_CURLY@125..126 "}" [] []
  3: EOF@126..127 "" [Newline("\n")] []
--
ts_interface_heritage_clause_error.ts:2:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Interface declaration cannot have 'implements' clause.
  
    1 │ interface A {}
  > 2 │ interface B implements A {}
      │             ^^^^^^^^^^^^
    3 │ interface C extends A extends B {}
    4 │ interface D extends {}
  
--
ts_interface_heritage_clause_error.ts:3:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'extends' clause already seen.
  
    1 │ interface A {}
    2 │ interface B implements A {}
  > 3 │ interface C extends A extends B {}
      │                       ^^^^^^^^^
    4 │ interface D extends {}
    5 │ interface E extends A, {}
  
  i first 'extends' clause
  
    1 │ interface A {}
    2 │ interface B implements A {}
  > 3 │ interface C extends A extends B {}
      │             ^^^^^^^^^
    4 │ interface D extends {}
    5 │ interface E extends A, {}
  
--
ts_interface_heritage_clause_error.ts:4:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × 'extends' list cannot be empty.
  
    2 │ interface B implements A {}
    3 │ interface C extends A extends B {}
  > 4 │ interface D extends {}
      │                     
    5 │ interface E extends A, {}
    6 │ 
  
--
ts_interface_heritage_clause_error.ts:5:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Trailing comma not allowed.
  
    3 │ interface C extends A extends B {}
    4 │ interface D extends {}
  > 5 │ interface E extends A, {}
      │                      ^
    6 │ 
  
--
interface A {}
interface B implements A {}
interface C extends A extends B {}
interface D extends {}
interface E extends A, {}
