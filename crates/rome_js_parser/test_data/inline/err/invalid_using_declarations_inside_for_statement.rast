JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsForStatement {
            for_token: FOR_KW@0..4 "for" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@4..5 "(" [] [],
            initializer: JsVariableDeclaration {
                await_token: AWAIT_KW@5..11 "await" [] [Whitespace(" ")],
                kind: USING_KW@11..17 "using" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@17..20 "of" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: missing (optional),
                    },
                ],
            },
            first_semi_token: missing (required),
            test: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@20..21 "x" [] [],
                },
            },
            second_semi_token: missing (required),
            update: missing (optional),
            r_paren_token: R_PAREN@21..23 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@23..24 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@24..25 "}" [] [],
            },
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@25..26 ";" [] [],
        },
        JsBogusStatement {
            items: [
                FOR_KW@26..31 "for" [Newline("\n")] [Whitespace(" ")],
                AWAIT_KW@31..37 "await" [] [Whitespace(" ")],
                L_PAREN@37..38 "(" [] [],
                JsVariableDeclaration {
                    await_token: AWAIT_KW@38..44 "await" [] [Whitespace(" ")],
                    kind: USING_KW@44..50 "using" [] [Whitespace(" ")],
                    declarators: JsVariableDeclaratorList [
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@50..53 "of" [] [Whitespace(" ")],
                            },
                            variable_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                    ],
                },
                JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@53..54 "x" [] [],
                    },
                },
                R_PAREN@54..56 ")" [] [Whitespace(" ")],
                JsBlockStatement {
                    l_curly_token: L_CURLY@56..57 "{" [] [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@57..58 "}" [] [],
                },
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@58..59 ";" [] [],
        },
    ],
    eof_token: EOF@59..60 "" [Newline("\n")] [],
}

0: JS_MODULE@0..60
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..59
    0: JS_FOR_STATEMENT@0..25
      0: FOR_KW@0..4 "for" [] [Whitespace(" ")]
      1: L_PAREN@4..5 "(" [] []
      2: JS_VARIABLE_DECLARATION@5..20
        0: AWAIT_KW@5..11 "await" [] [Whitespace(" ")]
        1: USING_KW@11..17 "using" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@17..20
          0: JS_VARIABLE_DECLARATOR@17..20
            0: JS_IDENTIFIER_BINDING@17..20
              0: IDENT@17..20 "of" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
      3: (empty)
      4: JS_IDENTIFIER_EXPRESSION@20..21
        0: JS_REFERENCE_IDENTIFIER@20..21
          0: IDENT@20..21 "x" [] []
      5: (empty)
      6: (empty)
      7: R_PAREN@21..23 ")" [] [Whitespace(" ")]
      8: JS_BLOCK_STATEMENT@23..25
        0: L_CURLY@23..24 "{" [] []
        1: JS_STATEMENT_LIST@24..24
        2: R_CURLY@24..25 "}" [] []
    1: JS_EMPTY_STATEMENT@25..26
      0: SEMICOLON@25..26 ";" [] []
    2: JS_BOGUS_STATEMENT@26..58
      0: FOR_KW@26..31 "for" [Newline("\n")] [Whitespace(" ")]
      1: AWAIT_KW@31..37 "await" [] [Whitespace(" ")]
      2: L_PAREN@37..38 "(" [] []
      3: JS_VARIABLE_DECLARATION@38..53
        0: AWAIT_KW@38..44 "await" [] [Whitespace(" ")]
        1: USING_KW@44..50 "using" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@50..53
          0: JS_VARIABLE_DECLARATOR@50..53
            0: JS_IDENTIFIER_BINDING@50..53
              0: IDENT@50..53 "of" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
      4: JS_IDENTIFIER_EXPRESSION@53..54
        0: JS_REFERENCE_IDENTIFIER@53..54
          0: IDENT@53..54 "x" [] []
      5: R_PAREN@54..56 ")" [] [Whitespace(" ")]
      6: JS_BLOCK_STATEMENT@56..58
        0: L_CURLY@56..57 "{" [] []
        1: JS_STATEMENT_LIST@57..57
        2: R_CURLY@57..58 "}" [] []
    3: JS_EMPTY_STATEMENT@58..59
      0: SEMICOLON@58..59 ";" [] []
  3: EOF@59..60 "" [Newline("\n")] []
--
invalid_using_declarations_inside_for_statement.js:1:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Using declarations must have an initialized value
  
  > 1 │ for (await using of x) {};
      │                  ^^
    2 │ for await (await using of x) {};
    3 │ 
  
  i this variable needs to be initialized
  
--
invalid_using_declarations_inside_for_statement.js:1:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `;` but instead found `x`
  
  > 1 │ for (await using of x) {};
      │                     ^
    2 │ for await (await using of x) {};
    3 │ 
  
  i Remove x
  
--
invalid_using_declarations_inside_for_statement.js:1:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `;` but instead found `)`
  
  > 1 │ for (await using of x) {};
      │                      ^
    2 │ for await (await using of x) {};
    3 │ 
  
  i Remove )
  
--
invalid_using_declarations_inside_for_statement.js:2:24 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Using declarations must have an initialized value
  
    1 │ for (await using of x) {};
  > 2 │ for await (await using of x) {};
      │                        ^^
    3 │ 
  
  i this variable needs to be initialized
  
--
invalid_using_declarations_inside_for_statement.js:2:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `;` but instead found `x`
  
    1 │ for (await using of x) {};
  > 2 │ for await (await using of x) {};
      │                           ^
    3 │ 
  
  i Remove x
  
--
invalid_using_declarations_inside_for_statement.js:2:28 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `;` but instead found `)`
  
    1 │ for (await using of x) {};
  > 2 │ for await (await using of x) {};
      │                            ^
    3 │ 
  
  i Remove )
  
--
invalid_using_declarations_inside_for_statement.js:2:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × await can only be used in conjunction with `for...of` statements
  
    1 │ for (await using of x) {};
  > 2 │ for await (await using of x) {};
      │     ^^^^^
    3 │ 
  
  i Remove the await here
  
    1 │ for (await using of x) {};
  > 2 │ for await (await using of x) {};
      │     ^^^^^
    3 │ 
  
  i or convert this to a `for...of` statement
  
    1 │ for (await using of x) {};
  > 2 │ for await (await using of x) {};
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 │ 
  
--
for (await using of x) {};
for await (await using of x) {};
