JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsTemplateExpression {
                tag: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@0..3 "foo" [] [],
                    },
                },
                type_arguments: missing (optional),
                l_tick_token: BACKTICK@3..4 "`" [] [],
                elements: JsTemplateElementList [
                    JsTemplateChunkElement {
                        template_chunk_token: TEMPLATE_CHUNK@4..7 "bar" [] [],
                    },
                ],
                r_tick_token: BACKTICK@7..8 "`" [] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsComputedMemberExpression {
                object: JsCallExpression {
                    callee: JsCallExpression {
                        callee: JsCallExpression {
                            callee: JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@8..12 "foo" [Newline("\n")] [],
                                },
                            },
                            optional_chain_token: missing (optional),
                            type_arguments: missing (optional),
                            arguments: JsCallArguments {
                                l_paren_token: L_PAREN@12..13 "(" [] [],
                                args: JsCallArgumentList [
                                    JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@13..16 "bar" [] [],
                                        },
                                    },
                                ],
                                r_paren_token: R_PAREN@16..17 ")" [] [],
                            },
                        },
                        optional_chain_token: missing (optional),
                        type_arguments: missing (optional),
                        arguments: JsCallArguments {
                            l_paren_token: L_PAREN@17..18 "(" [] [],
                            args: JsCallArgumentList [
                                JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@18..21 "baz" [] [],
                                    },
                                },
                            ],
                            r_paren_token: R_PAREN@21..22 ")" [] [],
                        },
                    },
                    optional_chain_token: missing (optional),
                    type_arguments: missing (optional),
                    arguments: JsCallArguments {
                        l_paren_token: L_PAREN@22..23 "(" [] [],
                        args: JsCallArgumentList [
                            JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@23..26 "baz" [] [],
                                },
                            },
                        ],
                        r_paren_token: R_PAREN@26..27 ")" [] [],
                    },
                },
                optional_chain_token: missing (optional),
                l_brack_token: L_BRACK@27..28 "[" [] [],
                member: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@28..31 "bar" [] [],
                    },
                },
                r_brack_token: R_BRACK@31..32 "]" [] [],
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@32..33 "" [Newline("\n")] [],
}

0: JS_MODULE@0..33
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..32
    0: JS_EXPRESSION_STATEMENT@0..8
      0: JS_TEMPLATE_EXPRESSION@0..8
        0: JS_IDENTIFIER_EXPRESSION@0..3
          0: JS_REFERENCE_IDENTIFIER@0..3
            0: IDENT@0..3 "foo" [] []
        1: (empty)
        2: BACKTICK@3..4 "`" [] []
        3: JS_TEMPLATE_ELEMENT_LIST@4..7
          0: JS_TEMPLATE_CHUNK_ELEMENT@4..7
            0: TEMPLATE_CHUNK@4..7 "bar" [] []
        4: BACKTICK@7..8 "`" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@8..32
      0: JS_COMPUTED_MEMBER_EXPRESSION@8..32
        0: JS_CALL_EXPRESSION@8..27
          0: JS_CALL_EXPRESSION@8..22
            0: JS_CALL_EXPRESSION@8..17
              0: JS_IDENTIFIER_EXPRESSION@8..12
                0: JS_REFERENCE_IDENTIFIER@8..12
                  0: IDENT@8..12 "foo" [Newline("\n")] []
              1: (empty)
              2: (empty)
              3: JS_CALL_ARGUMENTS@12..17
                0: L_PAREN@12..13 "(" [] []
                1: JS_CALL_ARGUMENT_LIST@13..16
                  0: JS_IDENTIFIER_EXPRESSION@13..16
                    0: JS_REFERENCE_IDENTIFIER@13..16
                      0: IDENT@13..16 "bar" [] []
                2: R_PAREN@16..17 ")" [] []
            1: (empty)
            2: (empty)
            3: JS_CALL_ARGUMENTS@17..22
              0: L_PAREN@17..18 "(" [] []
              1: JS_CALL_ARGUMENT_LIST@18..21
                0: JS_IDENTIFIER_EXPRESSION@18..21
                  0: JS_REFERENCE_IDENTIFIER@18..21
                    0: IDENT@18..21 "baz" [] []
              2: R_PAREN@21..22 ")" [] []
          1: (empty)
          2: (empty)
          3: JS_CALL_ARGUMENTS@22..27
            0: L_PAREN@22..23 "(" [] []
            1: JS_CALL_ARGUMENT_LIST@23..26
              0: JS_IDENTIFIER_EXPRESSION@23..26
                0: JS_REFERENCE_IDENTIFIER@23..26
                  0: IDENT@23..26 "baz" [] []
            2: R_PAREN@26..27 ")" [] []
        1: (empty)
        2: L_BRACK@27..28 "[" [] []
        3: JS_IDENTIFIER_EXPRESSION@28..31
          0: JS_REFERENCE_IDENTIFIER@28..31
            0: IDENT@28..31 "bar" [] []
        4: R_BRACK@31..32 "]" [] []
      1: (empty)
  3: EOF@32..33 "" [Newline("\n")] []
