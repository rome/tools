JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: DELETE_KW@0..7 "delete" [] [Whitespace(" ")],
                argument: JsComputedMemberExpression {
                    object: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@7..8 "a" [] [],
                        },
                    },
                    optional_chain_token: missing (optional),
                    l_brack_token: L_BRACK@8..9 "[" [] [],
                    member: JsStringLiteralExpression {
                        value_token: JS_STRING_LITERAL@9..15 "'test'" [] [],
                    },
                    r_brack_token: R_BRACK@15..16 "]" [] [],
                },
            },
            semicolon_token: SEMICOLON@16..17 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: VOID_KW@17..23 "void" [Newline("\n")] [Whitespace(" ")],
                argument: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@23..24 "a" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@24..25 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: TYPEOF_KW@25..33 "typeof" [Newline("\n")] [Whitespace(" ")],
                argument: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@33..34 "a" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@34..35 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: PLUS@35..37 "+" [Newline("\n")] [],
                argument: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@37..38 "1" [] [],
                },
            },
            semicolon_token: SEMICOLON@38..39 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: MINUS@39..41 "-" [Newline("\n")] [],
                argument: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@41..42 "1" [] [],
                },
            },
            semicolon_token: SEMICOLON@42..43 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: TILDE@43..45 "~" [Newline("\n")] [],
                argument: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@45..46 "1" [] [],
                },
            },
            semicolon_token: SEMICOLON@46..47 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: BANG@47..49 "!" [Newline("\n")] [],
                argument: JsBooleanLiteralExpression {
                    value_token: TRUE_KW@49..53 "true" [] [],
                },
            },
            semicolon_token: SEMICOLON@53..54 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsBinaryExpression {
                    left: JsUnaryExpression {
                        operator_token: MINUS@54..56 "-" [Newline("\n")] [],
                        argument: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@56..58 "a" [] [Whitespace(" ")],
                            },
                        },
                    },
                    operator_token: PLUS@58..60 "+" [] [Whitespace(" ")],
                    right: JsUnaryExpression {
                        operator_token: MINUS@60..61 "-" [] [],
                        argument: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@61..63 "b" [] [Whitespace(" ")],
                            },
                        },
                    },
                },
                operator_token: PLUS@63..65 "+" [] [Whitespace(" ")],
                right: JsUnaryExpression {
                    operator_token: PLUS@65..66 "+" [] [],
                    argument: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@66..67 "a" [] [],
                        },
                    },
                },
            },
            semicolon_token: SEMICOLON@67..68 ";" [] [],
        },
    ],
    eof_token: EOF@68..69 "" [Newline("\n")] [],
}

0: JS_MODULE@0..69
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..68
    0: JS_EXPRESSION_STATEMENT@0..17
      0: JS_UNARY_EXPRESSION@0..16
        0: DELETE_KW@0..7 "delete" [] [Whitespace(" ")]
        1: JS_COMPUTED_MEMBER_EXPRESSION@7..16
          0: JS_IDENTIFIER_EXPRESSION@7..8
            0: JS_REFERENCE_IDENTIFIER@7..8
              0: IDENT@7..8 "a" [] []
          1: (empty)
          2: L_BRACK@8..9 "[" [] []
          3: JS_STRING_LITERAL_EXPRESSION@9..15
            0: JS_STRING_LITERAL@9..15 "'test'" [] []
          4: R_BRACK@15..16 "]" [] []
      1: SEMICOLON@16..17 ";" [] []
    1: JS_EXPRESSION_STATEMENT@17..25
      0: JS_UNARY_EXPRESSION@17..24
        0: VOID_KW@17..23 "void" [Newline("\n")] [Whitespace(" ")]
        1: JS_IDENTIFIER_EXPRESSION@23..24
          0: JS_REFERENCE_IDENTIFIER@23..24
            0: IDENT@23..24 "a" [] []
      1: SEMICOLON@24..25 ";" [] []
    2: JS_EXPRESSION_STATEMENT@25..35
      0: JS_UNARY_EXPRESSION@25..34
        0: TYPEOF_KW@25..33 "typeof" [Newline("\n")] [Whitespace(" ")]
        1: JS_IDENTIFIER_EXPRESSION@33..34
          0: JS_REFERENCE_IDENTIFIER@33..34
            0: IDENT@33..34 "a" [] []
      1: SEMICOLON@34..35 ";" [] []
    3: JS_EXPRESSION_STATEMENT@35..39
      0: JS_UNARY_EXPRESSION@35..38
        0: PLUS@35..37 "+" [Newline("\n")] []
        1: JS_NUMBER_LITERAL_EXPRESSION@37..38
          0: JS_NUMBER_LITERAL@37..38 "1" [] []
      1: SEMICOLON@38..39 ";" [] []
    4: JS_EXPRESSION_STATEMENT@39..43
      0: JS_UNARY_EXPRESSION@39..42
        0: MINUS@39..41 "-" [Newline("\n")] []
        1: JS_NUMBER_LITERAL_EXPRESSION@41..42
          0: JS_NUMBER_LITERAL@41..42 "1" [] []
      1: SEMICOLON@42..43 ";" [] []
    5: JS_EXPRESSION_STATEMENT@43..47
      0: JS_UNARY_EXPRESSION@43..46
        0: TILDE@43..45 "~" [Newline("\n")] []
        1: JS_NUMBER_LITERAL_EXPRESSION@45..46
          0: JS_NUMBER_LITERAL@45..46 "1" [] []
      1: SEMICOLON@46..47 ";" [] []
    6: JS_EXPRESSION_STATEMENT@47..54
      0: JS_UNARY_EXPRESSION@47..53
        0: BANG@47..49 "!" [Newline("\n")] []
        1: JS_BOOLEAN_LITERAL_EXPRESSION@49..53
          0: TRUE_KW@49..53 "true" [] []
      1: SEMICOLON@53..54 ";" [] []
    7: JS_EXPRESSION_STATEMENT@54..68
      0: JS_BINARY_EXPRESSION@54..67
        0: JS_BINARY_EXPRESSION@54..63
          0: JS_UNARY_EXPRESSION@54..58
            0: MINUS@54..56 "-" [Newline("\n")] []
            1: JS_IDENTIFIER_EXPRESSION@56..58
              0: JS_REFERENCE_IDENTIFIER@56..58
                0: IDENT@56..58 "a" [] [Whitespace(" ")]
          1: PLUS@58..60 "+" [] [Whitespace(" ")]
          2: JS_UNARY_EXPRESSION@60..63
            0: MINUS@60..61 "-" [] []
            1: JS_IDENTIFIER_EXPRESSION@61..63
              0: JS_REFERENCE_IDENTIFIER@61..63
                0: IDENT@61..63 "b" [] [Whitespace(" ")]
        1: PLUS@63..65 "+" [] [Whitespace(" ")]
        2: JS_UNARY_EXPRESSION@65..67
          0: PLUS@65..66 "+" [] []
          1: JS_IDENTIFIER_EXPRESSION@66..67
            0: JS_REFERENCE_IDENTIFIER@66..67
              0: IDENT@66..67 "a" [] []
      1: SEMICOLON@67..68 ";" [] []
  3: EOF@68..69 "" [Newline("\n")] []
