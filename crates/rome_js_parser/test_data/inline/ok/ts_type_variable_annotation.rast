JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..5 "a" [] [],
                        },
                        variable_annotation: TsTypeAnnotation {
                            colon_token: COLON@5..7 ":" [] [Whitespace(" ")],
                            ty: TsStringType {
                                string_token: STRING_KW@7..14 "string" [] [Whitespace(" ")],
                            },
                        },
                        initializer: JsInitializerClause {
                            eq_token: EQ@14..16 "=" [] [Whitespace(" ")],
                            expression: JsStringLiteralExpression {
                                value_token: JS_STRING_LITERAL@16..22 "\"test\"" [] [],
                            },
                        },
                    },
                    COMMA@22..24 "," [] [Whitespace(" ")],
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@24..25 "b" [] [],
                        },
                        variable_annotation: TsDefiniteVariableAnnotation {
                            excl_token: BANG@25..26 "!" [] [],
                            type_annotation: TsTypeAnnotation {
                                colon_token: COLON@26..28 ":" [] [Whitespace(" ")],
                                ty: TsNumberType {
                                    number_token: NUMBER_KW@28..34 "number" [] [],
                                },
                            },
                        },
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@34..35 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@35..40 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@40..48 "a" [] [Whitespace(" "), Comments("// ASI")],
                        },
                        variable_annotation: missing (optional),
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsUnaryExpression {
                operator_token: BANG@48..50 "!" [Newline("\n")] [],
                argument: JsFunctionExpression {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@50..59 "function" [] [Whitespace(" ")],
                    star_token: missing (optional),
                    id: JsIdentifierBinding {
                        name_token: IDENT@59..63 "test" [] [],
                    },
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@63..64 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@64..66 ")" [] [Whitespace(" ")],
                    },
                    return_type_annotation: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@66..67 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@67..68 "}" [] [],
                    },
                },
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@68..69 "" [Newline("\n")] [],
}

0: JS_MODULE@0..69
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..68
    0: JS_VARIABLE_STATEMENT@0..35
      0: JS_VARIABLE_DECLARATION@0..34
        0: (empty)
        1: LET_KW@0..4 "let" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@4..34
          0: JS_VARIABLE_DECLARATOR@4..22
            0: JS_IDENTIFIER_BINDING@4..5
              0: IDENT@4..5 "a" [] []
            1: TS_TYPE_ANNOTATION@5..14
              0: COLON@5..7 ":" [] [Whitespace(" ")]
              1: TS_STRING_TYPE@7..14
                0: STRING_KW@7..14 "string" [] [Whitespace(" ")]
            2: JS_INITIALIZER_CLAUSE@14..22
              0: EQ@14..16 "=" [] [Whitespace(" ")]
              1: JS_STRING_LITERAL_EXPRESSION@16..22
                0: JS_STRING_LITERAL@16..22 "\"test\"" [] []
          1: COMMA@22..24 "," [] [Whitespace(" ")]
          2: JS_VARIABLE_DECLARATOR@24..34
            0: JS_IDENTIFIER_BINDING@24..25
              0: IDENT@24..25 "b" [] []
            1: TS_DEFINITE_VARIABLE_ANNOTATION@25..34
              0: BANG@25..26 "!" [] []
              1: TS_TYPE_ANNOTATION@26..34
                0: COLON@26..28 ":" [] [Whitespace(" ")]
                1: TS_NUMBER_TYPE@28..34
                  0: NUMBER_KW@28..34 "number" [] []
            2: (empty)
      1: SEMICOLON@34..35 ";" [] []
    1: JS_VARIABLE_STATEMENT@35..48
      0: JS_VARIABLE_DECLARATION@35..48
        0: (empty)
        1: LET_KW@35..40 "let" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@40..48
          0: JS_VARIABLE_DECLARATOR@40..48
            0: JS_IDENTIFIER_BINDING@40..48
              0: IDENT@40..48 "a" [] [Whitespace(" "), Comments("// ASI")]
            1: (empty)
            2: (empty)
      1: (empty)
    2: JS_EXPRESSION_STATEMENT@48..68
      0: JS_UNARY_EXPRESSION@48..68
        0: BANG@48..50 "!" [Newline("\n")] []
        1: JS_FUNCTION_EXPRESSION@50..68
          0: (empty)
          1: FUNCTION_KW@50..59 "function" [] [Whitespace(" ")]
          2: (empty)
          3: JS_IDENTIFIER_BINDING@59..63
            0: IDENT@59..63 "test" [] []
          4: (empty)
          5: JS_PARAMETERS@63..66
            0: L_PAREN@63..64 "(" [] []
            1: JS_PARAMETER_LIST@64..64
            2: R_PAREN@64..66 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@66..68
            0: L_CURLY@66..67 "{" [] []
            1: JS_DIRECTIVE_LIST@67..67
            2: JS_STATEMENT_LIST@67..67
            3: R_CURLY@67..68 "}" [] []
      1: (empty)
  3: EOF@68..69 "" [Newline("\n")] []
