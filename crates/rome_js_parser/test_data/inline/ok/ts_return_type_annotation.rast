JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsFunctionType {
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@9..10 "(" [] [],
                    items: JsParameterList [
                        JsFormalParameter {
                            decorators: JsDecoratorList [],
                            binding: JsIdentifierBinding {
                                name_token: IDENT@10..11 "a" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                    ],
                    r_paren_token: R_PAREN@11..13 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@13..16 "=>" [] [Whitespace(" ")],
                return_type: TsPredicateReturnType {
                    parameter_name: JsReferenceIdentifier {
                        value_token: IDENT@16..18 "a" [] [Whitespace(" ")],
                    },
                    is_token: IS_KW@18..21 "is" [] [Whitespace(" ")],
                    ty: TsStringType {
                        string_token: STRING_KW@21..27 "string" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@27..28 ";" [] [],
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@28..34 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@34..36 "B" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@36..38 "=" [] [Whitespace(" ")],
            ty: TsObjectType {
                l_curly_token: L_CURLY@38..40 "{" [] [Whitespace(" ")],
                members: TsTypeMemberList [
                    TsMethodSignatureTypeMember {
                        name: JsLiteralMemberName {
                            value: IDENT@40..44 "test" [] [],
                        },
                        optional_token: missing (optional),
                        type_parameters: missing (optional),
                        parameters: JsParameters {
                            l_paren_token: L_PAREN@44..45 "(" [] [],
                            items: JsParameterList [
                                JsFormalParameter {
                                    decorators: JsDecoratorList [],
                                    binding: JsIdentifierBinding {
                                        name_token: IDENT@45..46 "a" [] [],
                                    },
                                    question_mark_token: missing (optional),
                                    type_annotation: missing (optional),
                                    initializer: missing (optional),
                                },
                            ],
                            r_paren_token: R_PAREN@46..47 ")" [] [],
                        },
                        return_type_annotation: TsReturnTypeAnnotation {
                            colon_token: COLON@47..49 ":" [] [Whitespace(" ")],
                            ty: TsPredicateReturnType {
                                parameter_name: JsReferenceIdentifier {
                                    value_token: IDENT@49..51 "a" [] [Whitespace(" ")],
                                },
                                is_token: IS_KW@51..54 "is" [] [Whitespace(" ")],
                                ty: TsStringType {
                                    string_token: STRING_KW@54..61 "string" [] [Whitespace(" ")],
                                },
                            },
                        },
                        separator_token: missing (optional),
                    },
                ],
                r_curly_token: R_CURLY@61..62 "}" [] [],
            },
            semicolon_token: missing (optional),
        },
        TsTypeAliasDeclaration {
            type_token: TYPE_KW@62..68 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@68..70 "C" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@70..72 "=" [] [Whitespace(" ")],
            ty: TsObjectType {
                l_curly_token: L_CURLY@72..74 "{" [] [Whitespace(" ")],
                members: TsTypeMemberList [
                    TsCallSignatureTypeMember {
                        type_parameters: missing (optional),
                        parameters: JsParameters {
                            l_paren_token: L_PAREN@74..75 "(" [] [],
                            items: JsParameterList [
                                JsFormalParameter {
                                    decorators: JsDecoratorList [],
                                    binding: JsIdentifierBinding {
                                        name_token: IDENT@75..76 "a" [] [],
                                    },
                                    question_mark_token: missing (optional),
                                    type_annotation: missing (optional),
                                    initializer: missing (optional),
                                },
                            ],
                            r_paren_token: R_PAREN@76..77 ")" [] [],
                        },
                        return_type_annotation: TsReturnTypeAnnotation {
                            colon_token: COLON@77..79 ":" [] [Whitespace(" ")],
                            ty: TsPredicateReturnType {
                                parameter_name: JsReferenceIdentifier {
                                    value_token: IDENT@79..81 "a" [] [Whitespace(" ")],
                                },
                                is_token: IS_KW@81..84 "is" [] [Whitespace(" ")],
                                ty: TsStringType {
                                    string_token: STRING_KW@84..91 "string" [] [Whitespace(" ")],
                                },
                            },
                        },
                        separator_token: missing (optional),
                    },
                ],
                r_curly_token: R_CURLY@91..92 "}" [] [],
            },
            semicolon_token: missing (optional),
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: CONST_KW@92..99 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@99..101 "a" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@101..103 "=" [] [Whitespace(" ")],
                            expression: JsObjectExpression {
                                l_curly_token: L_CURLY@103..105 "{" [] [Whitespace(" ")],
                                members: JsObjectMemberList [
                                    JsMethodObjectMember {
                                        async_token: missing (optional),
                                        star_token: missing (optional),
                                        name: JsLiteralMemberName {
                                            value: IDENT@105..109 "test" [] [],
                                        },
                                        type_parameters: missing (optional),
                                        parameters: JsParameters {
                                            l_paren_token: L_PAREN@109..110 "(" [] [],
                                            items: JsParameterList [
                                                JsFormalParameter {
                                                    decorators: JsDecoratorList [],
                                                    binding: JsIdentifierBinding {
                                                        name_token: IDENT@110..111 "x" [] [],
                                                    },
                                                    question_mark_token: missing (optional),
                                                    type_annotation: missing (optional),
                                                    initializer: missing (optional),
                                                },
                                            ],
                                            r_paren_token: R_PAREN@111..112 ")" [] [],
                                        },
                                        return_type_annotation: TsReturnTypeAnnotation {
                                            colon_token: COLON@112..114 ":" [] [Whitespace(" ")],
                                            ty: TsPredicateReturnType {
                                                parameter_name: JsReferenceIdentifier {
                                                    value_token: IDENT@114..116 "x" [] [Whitespace(" ")],
                                                },
                                                is_token: IS_KW@116..119 "is" [] [Whitespace(" ")],
                                                ty: TsStringType {
                                                    string_token: STRING_KW@119..126 "string" [] [Whitespace(" ")],
                                                },
                                            },
                                        },
                                        body: JsFunctionBody {
                                            l_curly_token: L_CURLY@126..128 "{" [] [Whitespace(" ")],
                                            directives: JsDirectiveList [],
                                            statements: JsStatementList [
                                                JsReturnStatement {
                                                    return_token: RETURN_KW@128..135 "return" [] [Whitespace(" ")],
                                                    argument: JsBinaryExpression {
                                                        left: JsUnaryExpression {
                                                            operator_token: TYPEOF_KW@135..142 "typeof" [] [Whitespace(" ")],
                                                            argument: JsIdentifierExpression {
                                                                name: JsReferenceIdentifier {
                                                                    value_token: IDENT@142..144 "x" [] [Whitespace(" ")],
                                                                },
                                                            },
                                                        },
                                                        operator_token: EQ3@144..148 "===" [] [Whitespace(" ")],
                                                        right: JsStringLiteralExpression {
                                                            value_token: JS_STRING_LITERAL@148..157 "\"string\"" [] [Whitespace(" ")],
                                                        },
                                                    },
                                                    semicolon_token: missing (optional),
                                                },
                                            ],
                                            r_curly_token: R_CURLY@157..159 "}" [] [Whitespace(" ")],
                                        },
                                    },
                                ],
                                r_curly_token: R_CURLY@159..160 "}" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsClassDeclaration {
            decorators: JsDecoratorList [],
            abstract_token: missing (optional),
            class_token: CLASS_KW@160..167 "class" [Newline("\n")] [Whitespace(" ")],
            id: JsIdentifierBinding {
                name_token: IDENT@167..169 "D" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            extends_clause: missing (optional),
            implements_clause: missing (optional),
            l_curly_token: L_CURLY@169..171 "{" [] [Whitespace(" ")],
            members: JsClassMemberList [
                JsMethodClassMember {
                    modifiers: JsMethodModifierList [],
                    async_token: missing (optional),
                    star_token: missing (optional),
                    name: JsLiteralMemberName {
                        value: IDENT@171..175 "test" [] [],
                    },
                    question_mark_token: missing (optional),
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@175..176 "(" [] [],
                        items: JsParameterList [
                            JsFormalParameter {
                                decorators: JsDecoratorList [],
                                binding: JsIdentifierBinding {
                                    name_token: IDENT@176..177 "x" [] [],
                                },
                                question_mark_token: missing (optional),
                                type_annotation: missing (optional),
                                initializer: missing (optional),
                            },
                        ],
                        r_paren_token: R_PAREN@177..178 ")" [] [],
                    },
                    return_type_annotation: TsReturnTypeAnnotation {
                        colon_token: COLON@178..180 ":" [] [Whitespace(" ")],
                        ty: TsPredicateReturnType {
                            parameter_name: JsReferenceIdentifier {
                                value_token: IDENT@180..182 "x" [] [Whitespace(" ")],
                            },
                            is_token: IS_KW@182..185 "is" [] [Whitespace(" ")],
                            ty: TsStringType {
                                string_token: STRING_KW@185..192 "string" [] [Whitespace(" ")],
                            },
                        },
                    },
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@192..194 "{" [] [Whitespace(" ")],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [
                            JsReturnStatement {
                                return_token: RETURN_KW@194..201 "return" [] [Whitespace(" ")],
                                argument: JsBinaryExpression {
                                    left: JsUnaryExpression {
                                        operator_token: TYPEOF_KW@201..208 "typeof" [] [Whitespace(" ")],
                                        argument: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@208..210 "x" [] [Whitespace(" ")],
                                            },
                                        },
                                    },
                                    operator_token: EQ3@210..214 "===" [] [Whitespace(" ")],
                                    right: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@214..222 "\"string\"" [] [],
                                    },
                                },
                                semicolon_token: SEMICOLON@222..224 ";" [] [Whitespace(" ")],
                            },
                        ],
                        r_curly_token: R_CURLY@224..226 "}" [] [Whitespace(" ")],
                    },
                },
            ],
            r_curly_token: R_CURLY@226..227 "}" [] [],
        },
    ],
    eof_token: EOF@227..228 "" [Newline("\n")] [],
}

0: JS_MODULE@0..228
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..227
    0: TS_TYPE_ALIAS_DECLARATION@0..28
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "A" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@7..9 "=" [] [Whitespace(" ")]
      4: TS_FUNCTION_TYPE@9..27
        0: (empty)
        1: JS_PARAMETERS@9..13
          0: L_PAREN@9..10 "(" [] []
          1: JS_PARAMETER_LIST@10..11
            0: JS_FORMAL_PARAMETER@10..11
              0: JS_DECORATOR_LIST@10..10
              1: JS_IDENTIFIER_BINDING@10..11
                0: IDENT@10..11 "a" [] []
              2: (empty)
              3: (empty)
              4: (empty)
          2: R_PAREN@11..13 ")" [] [Whitespace(" ")]
        2: FAT_ARROW@13..16 "=>" [] [Whitespace(" ")]
        3: TS_PREDICATE_RETURN_TYPE@16..27
          0: JS_REFERENCE_IDENTIFIER@16..18
            0: IDENT@16..18 "a" [] [Whitespace(" ")]
          1: IS_KW@18..21 "is" [] [Whitespace(" ")]
          2: TS_STRING_TYPE@21..27
            0: STRING_KW@21..27 "string" [] []
      5: SEMICOLON@27..28 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@28..62
      0: TYPE_KW@28..34 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@34..36
        0: IDENT@34..36 "B" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@36..38 "=" [] [Whitespace(" ")]
      4: TS_OBJECT_TYPE@38..62
        0: L_CURLY@38..40 "{" [] [Whitespace(" ")]
        1: TS_TYPE_MEMBER_LIST@40..61
          0: TS_METHOD_SIGNATURE_TYPE_MEMBER@40..61
            0: JS_LITERAL_MEMBER_NAME@40..44
              0: IDENT@40..44 "test" [] []
            1: (empty)
            2: (empty)
            3: JS_PARAMETERS@44..47
              0: L_PAREN@44..45 "(" [] []
              1: JS_PARAMETER_LIST@45..46
                0: JS_FORMAL_PARAMETER@45..46
                  0: JS_DECORATOR_LIST@45..45
                  1: JS_IDENTIFIER_BINDING@45..46
                    0: IDENT@45..46 "a" [] []
                  2: (empty)
                  3: (empty)
                  4: (empty)
              2: R_PAREN@46..47 ")" [] []
            4: TS_RETURN_TYPE_ANNOTATION@47..61
              0: COLON@47..49 ":" [] [Whitespace(" ")]
              1: TS_PREDICATE_RETURN_TYPE@49..61
                0: JS_REFERENCE_IDENTIFIER@49..51
                  0: IDENT@49..51 "a" [] [Whitespace(" ")]
                1: IS_KW@51..54 "is" [] [Whitespace(" ")]
                2: TS_STRING_TYPE@54..61
                  0: STRING_KW@54..61 "string" [] [Whitespace(" ")]
            5: (empty)
        2: R_CURLY@61..62 "}" [] []
      5: (empty)
    2: TS_TYPE_ALIAS_DECLARATION@62..92
      0: TYPE_KW@62..68 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@68..70
        0: IDENT@68..70 "C" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@70..72 "=" [] [Whitespace(" ")]
      4: TS_OBJECT_TYPE@72..92
        0: L_CURLY@72..74 "{" [] [Whitespace(" ")]
        1: TS_TYPE_MEMBER_LIST@74..91
          0: TS_CALL_SIGNATURE_TYPE_MEMBER@74..91
            0: (empty)
            1: JS_PARAMETERS@74..77
              0: L_PAREN@74..75 "(" [] []
              1: JS_PARAMETER_LIST@75..76
                0: JS_FORMAL_PARAMETER@75..76
                  0: JS_DECORATOR_LIST@75..75
                  1: JS_IDENTIFIER_BINDING@75..76
                    0: IDENT@75..76 "a" [] []
                  2: (empty)
                  3: (empty)
                  4: (empty)
              2: R_PAREN@76..77 ")" [] []
            2: TS_RETURN_TYPE_ANNOTATION@77..91
              0: COLON@77..79 ":" [] [Whitespace(" ")]
              1: TS_PREDICATE_RETURN_TYPE@79..91
                0: JS_REFERENCE_IDENTIFIER@79..81
                  0: IDENT@79..81 "a" [] [Whitespace(" ")]
                1: IS_KW@81..84 "is" [] [Whitespace(" ")]
                2: TS_STRING_TYPE@84..91
                  0: STRING_KW@84..91 "string" [] [Whitespace(" ")]
            3: (empty)
        2: R_CURLY@91..92 "}" [] []
      5: (empty)
    3: JS_VARIABLE_STATEMENT@92..160
      0: JS_VARIABLE_DECLARATION@92..160
        0: (empty)
        1: CONST_KW@92..99 "const" [Newline("\n")] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@99..160
          0: JS_VARIABLE_DECLARATOR@99..160
            0: JS_IDENTIFIER_BINDING@99..101
              0: IDENT@99..101 "a" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@101..160
              0: EQ@101..103 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@103..160
                0: L_CURLY@103..105 "{" [] [Whitespace(" ")]
                1: JS_OBJECT_MEMBER_LIST@105..159
                  0: JS_METHOD_OBJECT_MEMBER@105..159
                    0: (empty)
                    1: (empty)
                    2: JS_LITERAL_MEMBER_NAME@105..109
                      0: IDENT@105..109 "test" [] []
                    3: (empty)
                    4: JS_PARAMETERS@109..112
                      0: L_PAREN@109..110 "(" [] []
                      1: JS_PARAMETER_LIST@110..111
                        0: JS_FORMAL_PARAMETER@110..111
                          0: JS_DECORATOR_LIST@110..110
                          1: JS_IDENTIFIER_BINDING@110..111
                            0: IDENT@110..111 "x" [] []
                          2: (empty)
                          3: (empty)
                          4: (empty)
                      2: R_PAREN@111..112 ")" [] []
                    5: TS_RETURN_TYPE_ANNOTATION@112..126
                      0: COLON@112..114 ":" [] [Whitespace(" ")]
                      1: TS_PREDICATE_RETURN_TYPE@114..126
                        0: JS_REFERENCE_IDENTIFIER@114..116
                          0: IDENT@114..116 "x" [] [Whitespace(" ")]
                        1: IS_KW@116..119 "is" [] [Whitespace(" ")]
                        2: TS_STRING_TYPE@119..126
                          0: STRING_KW@119..126 "string" [] [Whitespace(" ")]
                    6: JS_FUNCTION_BODY@126..159
                      0: L_CURLY@126..128 "{" [] [Whitespace(" ")]
                      1: JS_DIRECTIVE_LIST@128..128
                      2: JS_STATEMENT_LIST@128..157
                        0: JS_RETURN_STATEMENT@128..157
                          0: RETURN_KW@128..135 "return" [] [Whitespace(" ")]
                          1: JS_BINARY_EXPRESSION@135..157
                            0: JS_UNARY_EXPRESSION@135..144
                              0: TYPEOF_KW@135..142 "typeof" [] [Whitespace(" ")]
                              1: JS_IDENTIFIER_EXPRESSION@142..144
                                0: JS_REFERENCE_IDENTIFIER@142..144
                                  0: IDENT@142..144 "x" [] [Whitespace(" ")]
                            1: EQ3@144..148 "===" [] [Whitespace(" ")]
                            2: JS_STRING_LITERAL_EXPRESSION@148..157
                              0: JS_STRING_LITERAL@148..157 "\"string\"" [] [Whitespace(" ")]
                          2: (empty)
                      3: R_CURLY@157..159 "}" [] [Whitespace(" ")]
                2: R_CURLY@159..160 "}" [] []
      1: (empty)
    4: JS_CLASS_DECLARATION@160..227
      0: JS_DECORATOR_LIST@160..160
      1: (empty)
      2: CLASS_KW@160..167 "class" [Newline("\n")] [Whitespace(" ")]
      3: JS_IDENTIFIER_BINDING@167..169
        0: IDENT@167..169 "D" [] [Whitespace(" ")]
      4: (empty)
      5: (empty)
      6: (empty)
      7: L_CURLY@169..171 "{" [] [Whitespace(" ")]
      8: JS_CLASS_MEMBER_LIST@171..226
        0: JS_METHOD_CLASS_MEMBER@171..226
          0: JS_METHOD_MODIFIER_LIST@171..171
          1: (empty)
          2: (empty)
          3: JS_LITERAL_MEMBER_NAME@171..175
            0: IDENT@171..175 "test" [] []
          4: (empty)
          5: (empty)
          6: JS_PARAMETERS@175..178
            0: L_PAREN@175..176 "(" [] []
            1: JS_PARAMETER_LIST@176..177
              0: JS_FORMAL_PARAMETER@176..177
                0: JS_DECORATOR_LIST@176..176
                1: JS_IDENTIFIER_BINDING@176..177
                  0: IDENT@176..177 "x" [] []
                2: (empty)
                3: (empty)
                4: (empty)
            2: R_PAREN@177..178 ")" [] []
          7: TS_RETURN_TYPE_ANNOTATION@178..192
            0: COLON@178..180 ":" [] [Whitespace(" ")]
            1: TS_PREDICATE_RETURN_TYPE@180..192
              0: JS_REFERENCE_IDENTIFIER@180..182
                0: IDENT@180..182 "x" [] [Whitespace(" ")]
              1: IS_KW@182..185 "is" [] [Whitespace(" ")]
              2: TS_STRING_TYPE@185..192
                0: STRING_KW@185..192 "string" [] [Whitespace(" ")]
          8: JS_FUNCTION_BODY@192..226
            0: L_CURLY@192..194 "{" [] [Whitespace(" ")]
            1: JS_DIRECTIVE_LIST@194..194
            2: JS_STATEMENT_LIST@194..224
              0: JS_RETURN_STATEMENT@194..224
                0: RETURN_KW@194..201 "return" [] [Whitespace(" ")]
                1: JS_BINARY_EXPRESSION@201..222
                  0: JS_UNARY_EXPRESSION@201..210
                    0: TYPEOF_KW@201..208 "typeof" [] [Whitespace(" ")]
                    1: JS_IDENTIFIER_EXPRESSION@208..210
                      0: JS_REFERENCE_IDENTIFIER@208..210
                        0: IDENT@208..210 "x" [] [Whitespace(" ")]
                  1: EQ3@210..214 "===" [] [Whitespace(" ")]
                  2: JS_STRING_LITERAL_EXPRESSION@214..222
                    0: JS_STRING_LITERAL@214..222 "\"string\"" [] []
                2: SEMICOLON@222..224 ";" [] [Whitespace(" ")]
            3: R_CURLY@224..226 "}" [] [Whitespace(" ")]
      9: R_CURLY@226..227 "}" [] []
  3: EOF@227..228 "" [Newline("\n")] []
