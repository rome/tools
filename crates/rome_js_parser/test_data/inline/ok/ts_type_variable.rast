JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                await_token: missing (optional),
                kind: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..8 "type" [] [],
                        },
                        variable_annotation: missing (optional),
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: SEMICOLON@8..9 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsAssignmentExpression {
                left: JsIdentifierAssignment {
                    name_token: IDENT@9..15 "type" [Newline("\n")] [Whitespace(" ")],
                },
                operator_token: EQ@15..17 "=" [] [Whitespace(" ")],
                right: JsCallExpression {
                    callee: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@17..41 "getFlowTypeInConstructor" [] [],
                        },
                    },
                    optional_chain_token: missing (optional),
                    type_arguments: missing (optional),
                    arguments: JsCallArguments {
                        l_paren_token: L_PAREN@41..42 "(" [] [],
                        args: JsCallArgumentList [
                            JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@42..48 "symbol" [] [],
                                },
                            },
                            COMMA@48..50 "," [] [Whitespace(" ")],
                            TsNonNullAssertionExpression {
                                expression: JsCallExpression {
                                    callee: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@50..73 "getDeclaringConstructor" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    type_arguments: missing (optional),
                                    arguments: JsCallArguments {
                                        l_paren_token: L_PAREN@73..74 "(" [] [],
                                        args: JsCallArgumentList [
                                            JsIdentifierExpression {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@74..80 "symbol" [] [],
                                                },
                                            },
                                        ],
                                        r_paren_token: R_PAREN@80..81 ")" [] [],
                                    },
                                },
                                excl_token: BANG@81..82 "!" [] [],
                            },
                        ],
                        r_paren_token: R_PAREN@82..83 ")" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@83..84 ";" [] [],
        },
    ],
    eof_token: EOF@84..85 "" [Newline("\n")] [],
}

0: JS_MODULE@0..85
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..84
    0: JS_VARIABLE_STATEMENT@0..9
      0: JS_VARIABLE_DECLARATION@0..8
        0: (empty)
        1: LET_KW@0..4 "let" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR_LIST@4..8
          0: JS_VARIABLE_DECLARATOR@4..8
            0: JS_IDENTIFIER_BINDING@4..8
              0: IDENT@4..8 "type" [] []
            1: (empty)
            2: (empty)
      1: SEMICOLON@8..9 ";" [] []
    1: JS_EXPRESSION_STATEMENT@9..84
      0: JS_ASSIGNMENT_EXPRESSION@9..83
        0: JS_IDENTIFIER_ASSIGNMENT@9..15
          0: IDENT@9..15 "type" [Newline("\n")] [Whitespace(" ")]
        1: EQ@15..17 "=" [] [Whitespace(" ")]
        2: JS_CALL_EXPRESSION@17..83
          0: JS_IDENTIFIER_EXPRESSION@17..41
            0: JS_REFERENCE_IDENTIFIER@17..41
              0: IDENT@17..41 "getFlowTypeInConstructor" [] []
          1: (empty)
          2: (empty)
          3: JS_CALL_ARGUMENTS@41..83
            0: L_PAREN@41..42 "(" [] []
            1: JS_CALL_ARGUMENT_LIST@42..82
              0: JS_IDENTIFIER_EXPRESSION@42..48
                0: JS_REFERENCE_IDENTIFIER@42..48
                  0: IDENT@42..48 "symbol" [] []
              1: COMMA@48..50 "," [] [Whitespace(" ")]
              2: TS_NON_NULL_ASSERTION_EXPRESSION@50..82
                0: JS_CALL_EXPRESSION@50..81
                  0: JS_IDENTIFIER_EXPRESSION@50..73
                    0: JS_REFERENCE_IDENTIFIER@50..73
                      0: IDENT@50..73 "getDeclaringConstructor" [] []
                  1: (empty)
                  2: (empty)
                  3: JS_CALL_ARGUMENTS@73..81
                    0: L_PAREN@73..74 "(" [] []
                    1: JS_CALL_ARGUMENT_LIST@74..80
                      0: JS_IDENTIFIER_EXPRESSION@74..80
                        0: JS_REFERENCE_IDENTIFIER@74..80
                          0: IDENT@74..80 "symbol" [] []
                    2: R_PAREN@80..81 ")" [] []
                1: BANG@81..82 "!" [] []
            2: R_PAREN@82..83 ")" [] []
      1: SEMICOLON@83..84 ";" [] []
  3: EOF@84..85 "" [Newline("\n")] []
