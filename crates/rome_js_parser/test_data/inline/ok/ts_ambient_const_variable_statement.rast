JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsDeclareStatement {
            declare_token: DECLARE_KW@0..8 "declare" [] [Whitespace(" ")],
            declaration: JsVariableDeclarationClause {
                declaration: JsVariableDeclaration {
                    await_token: missing (optional),
                    kind: CONST_KW@8..14 "const" [] [Whitespace(" ")],
                    declarators: JsVariableDeclaratorList [
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@14..15 "a" [] [],
                            },
                            variable_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                        COMMA@15..17 "," [] [Whitespace(" ")],
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@17..18 "b" [] [],
                            },
                            variable_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                        COMMA@18..20 "," [] [Whitespace(" ")],
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@20..21 "c" [] [],
                            },
                            variable_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                        COMMA@21..23 "," [] [Whitespace(" ")],
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@23..25 "d" [] [Whitespace(" ")],
                            },
                            variable_annotation: missing (optional),
                            initializer: JsInitializerClause {
                                eq_token: EQ@25..27 "=" [] [Whitespace(" ")],
                                expression: JsStringLiteralExpression {
                                    value_token: JS_STRING_LITERAL@27..33 "\"test\"" [] [],
                                },
                            },
                        },
                    ],
                },
                semicolon_token: SEMICOLON@33..34 ";" [] [],
            },
        },
    ],
    eof_token: EOF@34..35 "" [Newline("\n")] [],
}

0: JS_MODULE@0..35
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..34
    0: TS_DECLARE_STATEMENT@0..34
      0: DECLARE_KW@0..8 "declare" [] [Whitespace(" ")]
      1: JS_VARIABLE_DECLARATION_CLAUSE@8..34
        0: JS_VARIABLE_DECLARATION@8..33
          0: (empty)
          1: CONST_KW@8..14 "const" [] [Whitespace(" ")]
          2: JS_VARIABLE_DECLARATOR_LIST@14..33
            0: JS_VARIABLE_DECLARATOR@14..15
              0: JS_IDENTIFIER_BINDING@14..15
                0: IDENT@14..15 "a" [] []
              1: (empty)
              2: (empty)
            1: COMMA@15..17 "," [] [Whitespace(" ")]
            2: JS_VARIABLE_DECLARATOR@17..18
              0: JS_IDENTIFIER_BINDING@17..18
                0: IDENT@17..18 "b" [] []
              1: (empty)
              2: (empty)
            3: COMMA@18..20 "," [] [Whitespace(" ")]
            4: JS_VARIABLE_DECLARATOR@20..21
              0: JS_IDENTIFIER_BINDING@20..21
                0: IDENT@20..21 "c" [] []
              1: (empty)
              2: (empty)
            5: COMMA@21..23 "," [] [Whitespace(" ")]
            6: JS_VARIABLE_DECLARATOR@23..33
              0: JS_IDENTIFIER_BINDING@23..25
                0: IDENT@23..25 "d" [] [Whitespace(" ")]
              1: (empty)
              2: JS_INITIALIZER_CLAUSE@25..33
                0: EQ@25..27 "=" [] [Whitespace(" ")]
                1: JS_STRING_LITERAL_EXPRESSION@27..33
                  0: JS_STRING_LITERAL@27..33 "\"test\"" [] []
        1: SEMICOLON@33..34 ";" [] []
  3: EOF@34..35 "" [Newline("\n")] []
