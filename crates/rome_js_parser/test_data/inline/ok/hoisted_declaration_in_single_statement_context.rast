JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsIfStatement {
            if_token: IF_KW@0..3 "if" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@3..4 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@4..8 "true" [] [],
            },
            r_paren_token: R_PAREN@8..10 ")" [] [Whitespace(" ")],
            consequent: JsVariableStatement {
                declaration: JsVariableDeclaration {
                    await_token: missing (optional),
                    kind: VAR_KW@10..14 "var" [] [Whitespace(" ")],
                    declarators: JsVariableDeclaratorList [
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@14..15 "a" [] [],
                            },
                            variable_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                    ],
                },
                semicolon_token: SEMICOLON@15..16 ";" [] [],
            },
            else_clause: missing (optional),
        },
    ],
    eof_token: EOF@16..17 "" [Newline("\n")] [],
}

0: JS_MODULE@0..17
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..16
    0: JS_IF_STATEMENT@0..16
      0: IF_KW@0..3 "if" [] [Whitespace(" ")]
      1: L_PAREN@3..4 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@4..8
        0: TRUE_KW@4..8 "true" [] []
      3: R_PAREN@8..10 ")" [] [Whitespace(" ")]
      4: JS_VARIABLE_STATEMENT@10..16
        0: JS_VARIABLE_DECLARATION@10..15
          0: (empty)
          1: VAR_KW@10..14 "var" [] [Whitespace(" ")]
          2: JS_VARIABLE_DECLARATOR_LIST@14..15
            0: JS_VARIABLE_DECLARATOR@14..15
              0: JS_IDENTIFIER_BINDING@14..15
                0: IDENT@14..15 "a" [] []
              1: (empty)
              2: (empty)
        1: SEMICOLON@15..16 ";" [] []
      5: (empty)
  3: EOF@16..17 "" [Newline("\n")] []
