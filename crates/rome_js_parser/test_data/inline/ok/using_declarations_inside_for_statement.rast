JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsForOfStatement {
            for_token: FOR_KW@0..4 "for" [] [Whitespace(" ")],
            await_token: missing (optional),
            l_paren_token: L_PAREN@4..5 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: USING_KW@5..11 "using" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@11..13 "x" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: missing (optional),
                },
            },
            of_token: OF_KW@13..16 "of" [] [Whitespace(" ")],
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@16..17 "y" [] [],
                },
            },
            r_paren_token: R_PAREN@17..19 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@19..20 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@20..21 "}" [] [],
            },
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@21..22 ";" [] [],
        },
        JsForOfStatement {
            for_token: FOR_KW@22..27 "for" [Newline("\n")] [Whitespace(" ")],
            await_token: AWAIT_KW@27..33 "await" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@33..34 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: missing (optional),
                kind_token: USING_KW@34..40 "using" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@40..42 "x" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: missing (optional),
                },
            },
            of_token: OF_KW@42..45 "of" [] [Whitespace(" ")],
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@45..46 "y" [] [],
                },
            },
            r_paren_token: R_PAREN@46..48 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@48..49 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@49..50 "}" [] [],
            },
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@50..51 ";" [] [],
        },
        JsForOfStatement {
            for_token: FOR_KW@51..56 "for" [Newline("\n")] [Whitespace(" ")],
            await_token: missing (optional),
            l_paren_token: L_PAREN@56..57 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: AWAIT_KW@57..63 "await" [] [Whitespace(" ")],
                kind_token: USING_KW@63..69 "using" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@69..71 "x" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: missing (optional),
                },
            },
            of_token: OF_KW@71..74 "of" [] [Whitespace(" ")],
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@74..75 "y" [] [],
                },
            },
            r_paren_token: R_PAREN@75..77 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@77..78 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@78..79 "}" [] [],
            },
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@79..80 ";" [] [],
        },
        JsForOfStatement {
            for_token: FOR_KW@80..85 "for" [Newline("\n")] [Whitespace(" ")],
            await_token: AWAIT_KW@85..91 "await" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@91..92 "(" [] [],
            initializer: JsForVariableDeclaration {
                await_token: AWAIT_KW@92..98 "await" [] [Whitespace(" ")],
                kind_token: USING_KW@98..104 "using" [] [Whitespace(" ")],
                declarator: JsVariableDeclarator {
                    id: JsIdentifierBinding {
                        name_token: IDENT@104..106 "x" [] [Whitespace(" ")],
                    },
                    variable_annotation: missing (optional),
                    initializer: missing (optional),
                },
            },
            of_token: OF_KW@106..109 "of" [] [Whitespace(" ")],
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@109..110 "y" [] [],
                },
            },
            r_paren_token: R_PAREN@110..112 ")" [] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@112..113 "{" [] [],
                statements: JsStatementList [],
                r_curly_token: R_CURLY@113..114 "}" [] [],
            },
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@114..115 ";" [] [],
        },
    ],
    eof_token: EOF@115..116 "" [Newline("\n")] [],
}

0: JS_MODULE@0..116
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..115
    0: JS_FOR_OF_STATEMENT@0..21
      0: FOR_KW@0..4 "for" [] [Whitespace(" ")]
      1: (empty)
      2: L_PAREN@4..5 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@5..13
        0: (empty)
        1: USING_KW@5..11 "using" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@11..13
          0: JS_IDENTIFIER_BINDING@11..13
            0: IDENT@11..13 "x" [] [Whitespace(" ")]
          1: (empty)
          2: (empty)
      4: OF_KW@13..16 "of" [] [Whitespace(" ")]
      5: JS_IDENTIFIER_EXPRESSION@16..17
        0: JS_REFERENCE_IDENTIFIER@16..17
          0: IDENT@16..17 "y" [] []
      6: R_PAREN@17..19 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@19..21
        0: L_CURLY@19..20 "{" [] []
        1: JS_STATEMENT_LIST@20..20
        2: R_CURLY@20..21 "}" [] []
    1: JS_EMPTY_STATEMENT@21..22
      0: SEMICOLON@21..22 ";" [] []
    2: JS_FOR_OF_STATEMENT@22..50
      0: FOR_KW@22..27 "for" [Newline("\n")] [Whitespace(" ")]
      1: AWAIT_KW@27..33 "await" [] [Whitespace(" ")]
      2: L_PAREN@33..34 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@34..42
        0: (empty)
        1: USING_KW@34..40 "using" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@40..42
          0: JS_IDENTIFIER_BINDING@40..42
            0: IDENT@40..42 "x" [] [Whitespace(" ")]
          1: (empty)
          2: (empty)
      4: OF_KW@42..45 "of" [] [Whitespace(" ")]
      5: JS_IDENTIFIER_EXPRESSION@45..46
        0: JS_REFERENCE_IDENTIFIER@45..46
          0: IDENT@45..46 "y" [] []
      6: R_PAREN@46..48 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@48..50
        0: L_CURLY@48..49 "{" [] []
        1: JS_STATEMENT_LIST@49..49
        2: R_CURLY@49..50 "}" [] []
    3: JS_EMPTY_STATEMENT@50..51
      0: SEMICOLON@50..51 ";" [] []
    4: JS_FOR_OF_STATEMENT@51..79
      0: FOR_KW@51..56 "for" [Newline("\n")] [Whitespace(" ")]
      1: (empty)
      2: L_PAREN@56..57 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@57..71
        0: AWAIT_KW@57..63 "await" [] [Whitespace(" ")]
        1: USING_KW@63..69 "using" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@69..71
          0: JS_IDENTIFIER_BINDING@69..71
            0: IDENT@69..71 "x" [] [Whitespace(" ")]
          1: (empty)
          2: (empty)
      4: OF_KW@71..74 "of" [] [Whitespace(" ")]
      5: JS_IDENTIFIER_EXPRESSION@74..75
        0: JS_REFERENCE_IDENTIFIER@74..75
          0: IDENT@74..75 "y" [] []
      6: R_PAREN@75..77 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@77..79
        0: L_CURLY@77..78 "{" [] []
        1: JS_STATEMENT_LIST@78..78
        2: R_CURLY@78..79 "}" [] []
    5: JS_EMPTY_STATEMENT@79..80
      0: SEMICOLON@79..80 ";" [] []
    6: JS_FOR_OF_STATEMENT@80..114
      0: FOR_KW@80..85 "for" [Newline("\n")] [Whitespace(" ")]
      1: AWAIT_KW@85..91 "await" [] [Whitespace(" ")]
      2: L_PAREN@91..92 "(" [] []
      3: JS_FOR_VARIABLE_DECLARATION@92..106
        0: AWAIT_KW@92..98 "await" [] [Whitespace(" ")]
        1: USING_KW@98..104 "using" [] [Whitespace(" ")]
        2: JS_VARIABLE_DECLARATOR@104..106
          0: JS_IDENTIFIER_BINDING@104..106
            0: IDENT@104..106 "x" [] [Whitespace(" ")]
          1: (empty)
          2: (empty)
      4: OF_KW@106..109 "of" [] [Whitespace(" ")]
      5: JS_IDENTIFIER_EXPRESSION@109..110
        0: JS_REFERENCE_IDENTIFIER@109..110
          0: IDENT@109..110 "y" [] []
      6: R_PAREN@110..112 ")" [] [Whitespace(" ")]
      7: JS_BLOCK_STATEMENT@112..114
        0: L_CURLY@112..113 "{" [] []
        1: JS_STATEMENT_LIST@113..113
        2: R_CURLY@113..114 "}" [] []
    7: JS_EMPTY_STATEMENT@114..115
      0: SEMICOLON@114..115 ";" [] []
  3: EOF@115..116 "" [Newline("\n")] []
