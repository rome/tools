JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..7 "f1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@9..11 "fx" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@11..12 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@12..18 "string" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@18..19 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@19..21 ";" [] [Whitespace(" ")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@21..26 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@26..29 "f2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@29..31 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@31..33 "fx" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@33..34 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@34..40 "string" [] [],
                                        },
                                        COMMA@40..42 "," [] [Whitespace(" ")],
                                        TsNumberType {
                                            number_token: NUMBER_KW@42..48 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@48..49 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@49..51 ";" [] [Whitespace(" ")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@51..56 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@56..59 "f3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@59..61 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsComputedMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@61..63 "fx" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    l_brack_token: L_BRACK@63..64 "[" [] [],
                                    member: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@64..70 "'test'" [] [],
                                    },
                                    r_brack_token: R_BRACK@70..71 "]" [] [],
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@71..72 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@72..78 "string" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@78..79 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@79..81 ";" [] [Whitespace(" ")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@81..88 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@88..91 "a2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@91..93 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsStaticMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@93..94 "f" [] [],
                                        },
                                    },
                                    operator_token: DOT@94..95 "." [] [],
                                    member: JsName {
                                        value_token: IDENT@95..96 "g" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@96..97 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@97..103 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@103..104 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@104..122 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@122..129 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@129..132 "a3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@132..134 "=" [] [Whitespace(" ")],
                            expression: JsStaticMemberExpression {
                                object: TsExpressionWithTypeArguments {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@134..135 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@135..136 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@136..142 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@142..143 ">" [] [],
                                    },
                                },
                                operator_token: DOT@143..144 "." [] [],
                                member: JsName {
                                    value_token: IDENT@144..145 "g" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@145..161 ";" [] [Whitespace("  "), Comments("// <U>() => U")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@161..168 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@168..171 "a4" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@171..173 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsStaticMemberExpression {
                                    object: TsExpressionWithTypeArguments {
                                        expression: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@173..174 "f" [] [],
                                            },
                                        },
                                        arguments: TsTypeArguments {
                                            l_angle_token: L_ANGLE@174..175 "<" [] [],
                                            ts_type_argument_list: TsTypeArgumentList [
                                                TsNumberType {
                                                    number_token: NUMBER_KW@175..181 "number" [] [],
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@181..182 ">" [] [],
                                        },
                                    },
                                    operator_token: DOT@182..183 "." [] [],
                                    member: JsName {
                                        value_token: IDENT@183..184 "g" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@184..185 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@185..191 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@191..192 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@192..210 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@210..217 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@217..220 "a5" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@220..222 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsComputedMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@222..223 "f" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    l_brack_token: L_BRACK@223..224 "[" [] [],
                                    member: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@224..227 "'g'" [] [],
                                    },
                                    r_brack_token: R_BRACK@227..228 "]" [] [],
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@228..229 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@229..235 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@235..236 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@236..254 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@254..261 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@261..264 "a7" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@264..266 "=" [] [Whitespace(" ")],
                            expression: JsComputedMemberExpression {
                                object: JsParenthesizedExpression {
                                    l_paren_token: L_PAREN@266..267 "(" [] [],
                                    expression: TsExpressionWithTypeArguments {
                                        expression: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@267..268 "f" [] [],
                                            },
                                        },
                                        arguments: TsTypeArguments {
                                            l_angle_token: L_ANGLE@268..269 "<" [] [],
                                            ts_type_argument_list: TsTypeArgumentList [
                                                TsNumberType {
                                                    number_token: NUMBER_KW@269..275 "number" [] [],
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@275..276 ">" [] [],
                                        },
                                    },
                                    r_paren_token: R_PAREN@276..277 ")" [] [],
                                },
                                optional_chain_token: missing (optional),
                                l_brack_token: L_BRACK@277..278 "[" [] [],
                                member: JsStringLiteralExpression {
                                    value_token: JS_STRING_LITERAL@278..281 "'g'" [] [],
                                },
                                r_brack_token: R_BRACK@281..282 "]" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@282..283 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@283..290 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@290..293 "a6" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@293..295 "=" [] [Whitespace(" ")],
                            expression: JsBinaryExpression {
                                left: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@295..296 "f" [] [],
                                        },
                                    },
                                    operator_token: L_ANGLE@296..297 "<" [] [],
                                    right: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@297..303 "number" [] [],
                                        },
                                    },
                                },
                                operator_token: R_ANGLE@303..304 ">" [] [],
                                right: JsArrayExpression {
                                    l_brack_token: L_BRACK@304..305 "[" [] [],
                                    elements: JsArrayElementList [
                                        JsStringLiteralExpression {
                                            value_token: JS_STRING_LITERAL@305..308 "'g'" [] [],
                                        },
                                    ],
                                    r_brack_token: R_BRACK@308..309 "]" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@309..325 ";" [] [Whitespace("  "), Comments("// type Error")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@325..332 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@332..335 "b2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@335..337 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@337..338 "f" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@338..340 "?." [] [],
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@340..341 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@341..347 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@347..348 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@348..349 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@349..350 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@350..351 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@351..467 "const" [Newline("\n"), Comments("// const b3 = f<numbe ..."), Newline("\n"), Comments("// const b4 = f<numbe ..."), Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@467..470 "x1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@470..472 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@472..473 "f" [] [],
                                    },
                                },
                                optional_chain_token: missing (optional),
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@473..474 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@474..478 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@478..479 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@479..481 "(" [Newline("\n")] [],
                                    args: JsCallArgumentList [
                                        JsBooleanLiteralExpression {
                                            value_token: TRUE_KW@481..485 "true" [] [],
                                        },
                                    ],
                                    r_paren_token: R_PAREN@485..486 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@486..487 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@487..529 "const" [Newline("\n"), Comments("// Parsed as relation ..."), Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@529..532 "x2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@532..534 "=" [] [Whitespace(" ")],
                            expression: JsBinaryExpression {
                                left: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@534..535 "f" [] [],
                                        },
                                    },
                                    operator_token: L_ANGLE@535..536 "<" [] [],
                                    right: JsBooleanLiteralExpression {
                                        value_token: TRUE_KW@536..540 "true" [] [],
                                    },
                                },
                                operator_token: R_ANGLE@540..541 ">" [] [],
                                right: JsBooleanLiteralExpression {
                                    value_token: TRUE_KW@541..546 "true" [Newline("\n")] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@546..547 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@547..592 "const" [Newline("\n"), Comments("// Parsed as instanti ..."), Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@592..595 "x3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@595..597 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@597..598 "f" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@598..599 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@599..603 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@603..604 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@604..605 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsBooleanLiteralExpression {
                value_token: TRUE_KW@605..610 "true" [Newline("\n")] [],
            },
            semicolon_token: SEMICOLON@610..611 ";" [] [],
        },
    ],
    eof_token: EOF@611..612 "" [Newline("\n")] [],
}

0: JS_MODULE@0..612
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..611
    0: JS_VARIABLE_STATEMENT@0..21
      0: JS_VARIABLE_DECLARATION@0..19
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@4..19
          0: JS_VARIABLE_DECLARATOR@4..19
            0: JS_IDENTIFIER_BINDING@4..7
              0: IDENT@4..7 "f1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@7..19
              0: EQ@7..9 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@9..19
                0: JS_IDENTIFIER_EXPRESSION@9..11
                  0: JS_REFERENCE_IDENTIFIER@9..11
                    0: IDENT@9..11 "fx" [] []
                1: TS_TYPE_ARGUMENTS@11..19
                  0: L_ANGLE@11..12 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@12..18
                    0: TS_STRING_TYPE@12..18
                      0: STRING_KW@12..18 "string" [] []
                  2: R_ANGLE@18..19 ">" [] []
      1: SEMICOLON@19..21 ";" [] [Whitespace(" ")]
    1: JS_VARIABLE_STATEMENT@21..51
      0: JS_VARIABLE_DECLARATION@21..49
        0: LET_KW@21..26 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@26..49
          0: JS_VARIABLE_DECLARATOR@26..49
            0: JS_IDENTIFIER_BINDING@26..29
              0: IDENT@26..29 "f2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@29..49
              0: EQ@29..31 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@31..49
                0: JS_IDENTIFIER_EXPRESSION@31..33
                  0: JS_REFERENCE_IDENTIFIER@31..33
                    0: IDENT@31..33 "fx" [] []
                1: TS_TYPE_ARGUMENTS@33..49
                  0: L_ANGLE@33..34 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@34..48
                    0: TS_STRING_TYPE@34..40
                      0: STRING_KW@34..40 "string" [] []
                    1: COMMA@40..42 "," [] [Whitespace(" ")]
                    2: TS_NUMBER_TYPE@42..48
                      0: NUMBER_KW@42..48 "number" [] []
                  2: R_ANGLE@48..49 ">" [] []
      1: SEMICOLON@49..51 ";" [] [Whitespace(" ")]
    2: JS_VARIABLE_STATEMENT@51..81
      0: JS_VARIABLE_DECLARATION@51..79
        0: LET_KW@51..56 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@56..79
          0: JS_VARIABLE_DECLARATOR@56..79
            0: JS_IDENTIFIER_BINDING@56..59
              0: IDENT@56..59 "f3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@59..79
              0: EQ@59..61 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@61..79
                0: JS_COMPUTED_MEMBER_EXPRESSION@61..71
                  0: JS_IDENTIFIER_EXPRESSION@61..63
                    0: JS_REFERENCE_IDENTIFIER@61..63
                      0: IDENT@61..63 "fx" [] []
                  1: (empty)
                  2: L_BRACK@63..64 "[" [] []
                  3: JS_STRING_LITERAL_EXPRESSION@64..70
                    0: JS_STRING_LITERAL@64..70 "'test'" [] []
                  4: R_BRACK@70..71 "]" [] []
                1: TS_TYPE_ARGUMENTS@71..79
                  0: L_ANGLE@71..72 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@72..78
                    0: TS_STRING_TYPE@72..78
                      0: STRING_KW@72..78 "string" [] []
                  2: R_ANGLE@78..79 ">" [] []
      1: SEMICOLON@79..81 ";" [] [Whitespace(" ")]
    3: JS_VARIABLE_STATEMENT@81..122
      0: JS_VARIABLE_DECLARATION@81..104
        0: CONST_KW@81..88 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@88..104
          0: JS_VARIABLE_DECLARATOR@88..104
            0: JS_IDENTIFIER_BINDING@88..91
              0: IDENT@88..91 "a2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@91..104
              0: EQ@91..93 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@93..104
                0: JS_STATIC_MEMBER_EXPRESSION@93..96
                  0: JS_IDENTIFIER_EXPRESSION@93..94
                    0: JS_REFERENCE_IDENTIFIER@93..94
                      0: IDENT@93..94 "f" [] []
                  1: DOT@94..95 "." [] []
                  2: JS_NAME@95..96
                    0: IDENT@95..96 "g" [] []
                1: TS_TYPE_ARGUMENTS@96..104
                  0: L_ANGLE@96..97 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@97..103
                    0: TS_NUMBER_TYPE@97..103
                      0: NUMBER_KW@97..103 "number" [] []
                  2: R_ANGLE@103..104 ">" [] []
      1: SEMICOLON@104..122 ";" [] [Whitespace("  "), Comments("// () => number")]
    4: JS_VARIABLE_STATEMENT@122..161
      0: JS_VARIABLE_DECLARATION@122..145
        0: CONST_KW@122..129 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@129..145
          0: JS_VARIABLE_DECLARATOR@129..145
            0: JS_IDENTIFIER_BINDING@129..132
              0: IDENT@129..132 "a3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@132..145
              0: EQ@132..134 "=" [] [Whitespace(" ")]
              1: JS_STATIC_MEMBER_EXPRESSION@134..145
                0: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@134..143
                  0: JS_IDENTIFIER_EXPRESSION@134..135
                    0: JS_REFERENCE_IDENTIFIER@134..135
                      0: IDENT@134..135 "f" [] []
                  1: TS_TYPE_ARGUMENTS@135..143
                    0: L_ANGLE@135..136 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@136..142
                      0: TS_NUMBER_TYPE@136..142
                        0: NUMBER_KW@136..142 "number" [] []
                    2: R_ANGLE@142..143 ">" [] []
                1: DOT@143..144 "." [] []
                2: JS_NAME@144..145
                  0: IDENT@144..145 "g" [] []
      1: SEMICOLON@145..161 ";" [] [Whitespace("  "), Comments("// <U>() => U")]
    5: JS_VARIABLE_STATEMENT@161..210
      0: JS_VARIABLE_DECLARATION@161..192
        0: CONST_KW@161..168 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@168..192
          0: JS_VARIABLE_DECLARATOR@168..192
            0: JS_IDENTIFIER_BINDING@168..171
              0: IDENT@168..171 "a4" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@171..192
              0: EQ@171..173 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@173..192
                0: JS_STATIC_MEMBER_EXPRESSION@173..184
                  0: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@173..182
                    0: JS_IDENTIFIER_EXPRESSION@173..174
                      0: JS_REFERENCE_IDENTIFIER@173..174
                        0: IDENT@173..174 "f" [] []
                    1: TS_TYPE_ARGUMENTS@174..182
                      0: L_ANGLE@174..175 "<" [] []
                      1: TS_TYPE_ARGUMENT_LIST@175..181
                        0: TS_NUMBER_TYPE@175..181
                          0: NUMBER_KW@175..181 "number" [] []
                      2: R_ANGLE@181..182 ">" [] []
                  1: DOT@182..183 "." [] []
                  2: JS_NAME@183..184
                    0: IDENT@183..184 "g" [] []
                1: TS_TYPE_ARGUMENTS@184..192
                  0: L_ANGLE@184..185 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@185..191
                    0: TS_NUMBER_TYPE@185..191
                      0: NUMBER_KW@185..191 "number" [] []
                  2: R_ANGLE@191..192 ">" [] []
      1: SEMICOLON@192..210 ";" [] [Whitespace("  "), Comments("// () => number")]
    6: JS_VARIABLE_STATEMENT@210..254
      0: JS_VARIABLE_DECLARATION@210..236
        0: CONST_KW@210..217 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@217..236
          0: JS_VARIABLE_DECLARATOR@217..236
            0: JS_IDENTIFIER_BINDING@217..220
              0: IDENT@217..220 "a5" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@220..236
              0: EQ@220..222 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@222..236
                0: JS_COMPUTED_MEMBER_EXPRESSION@222..228
                  0: JS_IDENTIFIER_EXPRESSION@222..223
                    0: JS_REFERENCE_IDENTIFIER@222..223
                      0: IDENT@222..223 "f" [] []
                  1: (empty)
                  2: L_BRACK@223..224 "[" [] []
                  3: JS_STRING_LITERAL_EXPRESSION@224..227
                    0: JS_STRING_LITERAL@224..227 "'g'" [] []
                  4: R_BRACK@227..228 "]" [] []
                1: TS_TYPE_ARGUMENTS@228..236
                  0: L_ANGLE@228..229 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@229..235
                    0: TS_NUMBER_TYPE@229..235
                      0: NUMBER_KW@229..235 "number" [] []
                  2: R_ANGLE@235..236 ">" [] []
      1: SEMICOLON@236..254 ";" [] [Whitespace("  "), Comments("// () => number")]
    7: JS_VARIABLE_STATEMENT@254..283
      0: JS_VARIABLE_DECLARATION@254..282
        0: CONST_KW@254..261 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@261..282
          0: JS_VARIABLE_DECLARATOR@261..282
            0: JS_IDENTIFIER_BINDING@261..264
              0: IDENT@261..264 "a7" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@264..282
              0: EQ@264..266 "=" [] [Whitespace(" ")]
              1: JS_COMPUTED_MEMBER_EXPRESSION@266..282
                0: JS_PARENTHESIZED_EXPRESSION@266..277
                  0: L_PAREN@266..267 "(" [] []
                  1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@267..276
                    0: JS_IDENTIFIER_EXPRESSION@267..268
                      0: JS_REFERENCE_IDENTIFIER@267..268
                        0: IDENT@267..268 "f" [] []
                    1: TS_TYPE_ARGUMENTS@268..276
                      0: L_ANGLE@268..269 "<" [] []
                      1: TS_TYPE_ARGUMENT_LIST@269..275
                        0: TS_NUMBER_TYPE@269..275
                          0: NUMBER_KW@269..275 "number" [] []
                      2: R_ANGLE@275..276 ">" [] []
                  2: R_PAREN@276..277 ")" [] []
                1: (empty)
                2: L_BRACK@277..278 "[" [] []
                3: JS_STRING_LITERAL_EXPRESSION@278..281
                  0: JS_STRING_LITERAL@278..281 "'g'" [] []
                4: R_BRACK@281..282 "]" [] []
      1: SEMICOLON@282..283 ";" [] []
    8: JS_VARIABLE_STATEMENT@283..325
      0: JS_VARIABLE_DECLARATION@283..309
        0: CONST_KW@283..290 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@290..309
          0: JS_VARIABLE_DECLARATOR@290..309
            0: JS_IDENTIFIER_BINDING@290..293
              0: IDENT@290..293 "a6" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@293..309
              0: EQ@293..295 "=" [] [Whitespace(" ")]
              1: JS_BINARY_EXPRESSION@295..309
                0: JS_BINARY_EXPRESSION@295..303
                  0: JS_IDENTIFIER_EXPRESSION@295..296
                    0: JS_REFERENCE_IDENTIFIER@295..296
                      0: IDENT@295..296 "f" [] []
                  1: L_ANGLE@296..297 "<" [] []
                  2: JS_IDENTIFIER_EXPRESSION@297..303
                    0: JS_REFERENCE_IDENTIFIER@297..303
                      0: IDENT@297..303 "number" [] []
                1: R_ANGLE@303..304 ">" [] []
                2: JS_ARRAY_EXPRESSION@304..309
                  0: L_BRACK@304..305 "[" [] []
                  1: JS_ARRAY_ELEMENT_LIST@305..308
                    0: JS_STRING_LITERAL_EXPRESSION@305..308
                      0: JS_STRING_LITERAL@305..308 "'g'" [] []
                  2: R_BRACK@308..309 "]" [] []
      1: SEMICOLON@309..325 ";" [] [Whitespace("  "), Comments("// type Error")]
    9: JS_VARIABLE_STATEMENT@325..351
      0: JS_VARIABLE_DECLARATION@325..350
        0: CONST_KW@325..332 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@332..350
          0: JS_VARIABLE_DECLARATOR@332..350
            0: JS_IDENTIFIER_BINDING@332..335
              0: IDENT@332..335 "b2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@335..350
              0: EQ@335..337 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@337..350
                0: JS_IDENTIFIER_EXPRESSION@337..338
                  0: JS_REFERENCE_IDENTIFIER@337..338
                    0: IDENT@337..338 "f" [] []
                1: QUESTIONDOT@338..340 "?." [] []
                2: TS_TYPE_ARGUMENTS@340..348
                  0: L_ANGLE@340..341 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@341..347
                    0: TS_NUMBER_TYPE@341..347
                      0: NUMBER_KW@341..347 "number" [] []
                  2: R_ANGLE@347..348 ">" [] []
                3: JS_CALL_ARGUMENTS@348..350
                  0: L_PAREN@348..349 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@349..349
                  2: R_PAREN@349..350 ")" [] []
      1: SEMICOLON@350..351 ";" [] []
    10: JS_VARIABLE_STATEMENT@351..487
      0: JS_VARIABLE_DECLARATION@351..486
        0: CONST_KW@351..467 "const" [Newline("\n"), Comments("// const b3 = f<numbe ..."), Newline("\n"), Comments("// const b4 = f<numbe ..."), Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@467..486
          0: JS_VARIABLE_DECLARATOR@467..486
            0: JS_IDENTIFIER_BINDING@467..470
              0: IDENT@467..470 "x1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@470..486
              0: EQ@470..472 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@472..486
                0: JS_IDENTIFIER_EXPRESSION@472..473
                  0: JS_REFERENCE_IDENTIFIER@472..473
                    0: IDENT@472..473 "f" [] []
                1: (empty)
                2: TS_TYPE_ARGUMENTS@473..479
                  0: L_ANGLE@473..474 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@474..478
                    0: TS_BOOLEAN_LITERAL_TYPE@474..478
                      0: TRUE_KW@474..478 "true" [] []
                  2: R_ANGLE@478..479 ">" [] []
                3: JS_CALL_ARGUMENTS@479..486
                  0: L_PAREN@479..481 "(" [Newline("\n")] []
                  1: JS_CALL_ARGUMENT_LIST@481..485
                    0: JS_BOOLEAN_LITERAL_EXPRESSION@481..485
                      0: TRUE_KW@481..485 "true" [] []
                  2: R_PAREN@485..486 ")" [] []
      1: SEMICOLON@486..487 ";" [] []
    11: JS_VARIABLE_STATEMENT@487..547
      0: JS_VARIABLE_DECLARATION@487..546
        0: CONST_KW@487..529 "const" [Newline("\n"), Comments("// Parsed as relation ..."), Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@529..546
          0: JS_VARIABLE_DECLARATOR@529..546
            0: JS_IDENTIFIER_BINDING@529..532
              0: IDENT@529..532 "x2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@532..546
              0: EQ@532..534 "=" [] [Whitespace(" ")]
              1: JS_BINARY_EXPRESSION@534..546
                0: JS_BINARY_EXPRESSION@534..540
                  0: JS_IDENTIFIER_EXPRESSION@534..535
                    0: JS_REFERENCE_IDENTIFIER@534..535
                      0: IDENT@534..535 "f" [] []
                  1: L_ANGLE@535..536 "<" [] []
                  2: JS_BOOLEAN_LITERAL_EXPRESSION@536..540
                    0: TRUE_KW@536..540 "true" [] []
                1: R_ANGLE@540..541 ">" [] []
                2: JS_BOOLEAN_LITERAL_EXPRESSION@541..546
                  0: TRUE_KW@541..546 "true" [Newline("\n")] []
      1: SEMICOLON@546..547 ";" [] []
    12: JS_VARIABLE_STATEMENT@547..605
      0: JS_VARIABLE_DECLARATION@547..604
        0: CONST_KW@547..592 "const" [Newline("\n"), Comments("// Parsed as instanti ..."), Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@592..604
          0: JS_VARIABLE_DECLARATOR@592..604
            0: JS_IDENTIFIER_BINDING@592..595
              0: IDENT@592..595 "x3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@595..604
              0: EQ@595..597 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@597..604
                0: JS_IDENTIFIER_EXPRESSION@597..598
                  0: JS_REFERENCE_IDENTIFIER@597..598
                    0: IDENT@597..598 "f" [] []
                1: TS_TYPE_ARGUMENTS@598..604
                  0: L_ANGLE@598..599 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@599..603
                    0: TS_BOOLEAN_LITERAL_TYPE@599..603
                      0: TRUE_KW@599..603 "true" [] []
                  2: R_ANGLE@603..604 ">" [] []
      1: SEMICOLON@604..605 ";" [] []
    13: JS_EXPRESSION_STATEMENT@605..611
      0: JS_BOOLEAN_LITERAL_EXPRESSION@605..610
        0: TRUE_KW@605..610 "true" [Newline("\n")] []
      1: SEMICOLON@610..611 ";" [] []
  3: EOF@611..612 "" [Newline("\n")] []
