JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..7 "f1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@9..11 "fx" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@11..12 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@12..18 "string" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@18..19 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@19..20 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@20..25 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@25..28 "f2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@28..30 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@30..32 "fx" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@32..33 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@33..39 "string" [] [],
                                        },
                                        COMMA@39..41 "," [] [Whitespace(" ")],
                                        TsNumberType {
                                            number_token: NUMBER_KW@41..47 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@47..48 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@48..49 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@49..54 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@54..57 "f3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@57..59 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsComputedMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@59..61 "fx" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    l_brack_token: L_BRACK@61..62 "[" [] [],
                                    member: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@62..68 "'test'" [] [],
                                    },
                                    r_brack_token: R_BRACK@68..69 "]" [] [],
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@69..70 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@70..76 "string" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@76..77 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@77..78 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@78..85 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@85..88 "a2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@88..90 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsStaticMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@90..91 "f" [] [],
                                        },
                                    },
                                    operator_token: DOT@91..92 "." [] [],
                                    member: JsName {
                                        value_token: IDENT@92..93 "g" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@93..94 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@94..100 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@100..101 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@101..119 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@119..126 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@126..129 "a3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@129..131 "=" [] [Whitespace(" ")],
                            expression: JsStaticMemberExpression {
                                object: TsExpressionWithTypeArguments {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@131..132 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@132..133 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@133..139 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@139..140 ">" [] [],
                                    },
                                },
                                operator_token: DOT@140..141 "." [] [],
                                member: JsName {
                                    value_token: IDENT@141..142 "g" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@142..158 ";" [] [Whitespace("  "), Comments("// <U>() => U")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@158..165 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@165..168 "a4" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@168..170 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsStaticMemberExpression {
                                    object: TsExpressionWithTypeArguments {
                                        expression: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@170..171 "f" [] [],
                                            },
                                        },
                                        arguments: TsTypeArguments {
                                            l_angle_token: L_ANGLE@171..172 "<" [] [],
                                            ts_type_argument_list: TsTypeArgumentList [
                                                TsNumberType {
                                                    number_token: NUMBER_KW@172..178 "number" [] [],
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@178..179 ">" [] [],
                                        },
                                    },
                                    operator_token: DOT@179..180 "." [] [],
                                    member: JsName {
                                        value_token: IDENT@180..181 "g" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@181..182 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@182..188 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@188..189 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@189..207 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@207..214 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@214..217 "a5" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@217..219 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsComputedMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@219..220 "f" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    l_brack_token: L_BRACK@220..221 "[" [] [],
                                    member: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@221..224 "'g'" [] [],
                                    },
                                    r_brack_token: R_BRACK@224..225 "]" [] [],
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@225..226 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@226..232 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@232..233 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@233..251 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@251..258 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@258..261 "a7" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@261..263 "=" [] [Whitespace(" ")],
                            expression: JsComputedMemberExpression {
                                object: JsParenthesizedExpression {
                                    l_paren_token: L_PAREN@263..264 "(" [] [],
                                    expression: TsExpressionWithTypeArguments {
                                        expression: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@264..265 "f" [] [],
                                            },
                                        },
                                        arguments: TsTypeArguments {
                                            l_angle_token: L_ANGLE@265..266 "<" [] [],
                                            ts_type_argument_list: TsTypeArgumentList [
                                                TsNumberType {
                                                    number_token: NUMBER_KW@266..272 "number" [] [],
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@272..273 ">" [] [],
                                        },
                                    },
                                    r_paren_token: R_PAREN@273..274 ")" [] [],
                                },
                                optional_chain_token: missing (optional),
                                l_brack_token: L_BRACK@274..275 "[" [] [],
                                member: JsStringLiteralExpression {
                                    value_token: JS_STRING_LITERAL@275..278 "'g'" [] [],
                                },
                                r_brack_token: R_BRACK@278..279 "]" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@279..280 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@280..287 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@287..290 "a6" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@290..292 "=" [] [Whitespace(" ")],
                            expression: JsBinaryExpression {
                                left: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@292..293 "f" [] [],
                                        },
                                    },
                                    operator_token: L_ANGLE@293..294 "<" [] [],
                                    right: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@294..300 "number" [] [],
                                        },
                                    },
                                },
                                operator_token: R_ANGLE@300..301 ">" [] [],
                                right: JsArrayExpression {
                                    l_brack_token: L_BRACK@301..302 "[" [] [],
                                    elements: JsArrayElementList [
                                        JsStringLiteralExpression {
                                            value_token: JS_STRING_LITERAL@302..305 "'g'" [] [],
                                        },
                                    ],
                                    r_brack_token: R_BRACK@305..306 "]" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@306..322 ";" [] [Whitespace("  "), Comments("// type Error")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@322..329 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@329..332 "b2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@332..334 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@334..335 "f" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@335..337 "?." [] [],
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@337..338 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@338..344 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@344..345 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@345..346 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@346..347 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@347..348 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@348..355 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@355..358 "b3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@358..360 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: TsExpressionWithTypeArguments {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@360..361 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@361..362 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@362..368 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@368..369 ">" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@369..371 "?." [] [],
                                type_arguments: missing (optional),
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@371..372 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@372..373 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@373..374 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@374..381 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@381..384 "b4" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@384..386 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: TsExpressionWithTypeArguments {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@386..387 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@387..388 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@388..394 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@394..395 ">" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@395..397 "?." [] [],
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@397..398 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@398..404 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@404..405 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@405..406 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@406..407 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@407..451 ";" [] [Whitespace("  "), Comments("// Type Error, expect ...")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@451..458 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@458..461 "x1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@461..463 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@463..464 "f" [] [],
                                    },
                                },
                                optional_chain_token: missing (optional),
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@464..465 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@465..469 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@469..470 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@470..472 "(" [Newline("\n")] [],
                                    args: JsCallArgumentList [
                                        JsBooleanLiteralExpression {
                                            value_token: TRUE_KW@472..476 "true" [] [],
                                        },
                                    ],
                                    r_paren_token: R_PAREN@476..477 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@477..478 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@478..520 "const" [Newline("\n"), Comments("// Parsed as relation ..."), Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@520..523 "x2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@523..525 "=" [] [Whitespace(" ")],
                            expression: JsBinaryExpression {
                                left: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@525..526 "f" [] [],
                                        },
                                    },
                                    operator_token: L_ANGLE@526..527 "<" [] [],
                                    right: JsBooleanLiteralExpression {
                                        value_token: TRUE_KW@527..531 "true" [] [],
                                    },
                                },
                                operator_token: R_ANGLE@531..532 ">" [] [],
                                right: JsBooleanLiteralExpression {
                                    value_token: TRUE_KW@532..537 "true" [Newline("\n")] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@537..538 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@538..583 "const" [Newline("\n"), Comments("// Parsed as instanti ..."), Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@583..586 "x3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@586..588 "=" [] [Whitespace(" ")],
                            expression: TsExpressionWithTypeArguments {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@588..589 "f" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@589..590 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@590..594 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@594..595 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@595..596 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsBooleanLiteralExpression {
                value_token: TRUE_KW@596..601 "true" [Newline("\n")] [],
            },
            semicolon_token: SEMICOLON@601..602 ";" [] [],
        },
    ],
    eof_token: EOF@602..603 "" [Newline("\n")] [],
}

0: JS_MODULE@0..603
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..602
    0: JS_VARIABLE_STATEMENT@0..20
      0: JS_VARIABLE_DECLARATION@0..19
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@4..19
          0: JS_VARIABLE_DECLARATOR@4..19
            0: JS_IDENTIFIER_BINDING@4..7
              0: IDENT@4..7 "f1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@7..19
              0: EQ@7..9 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@9..19
                0: JS_IDENTIFIER_EXPRESSION@9..11
                  0: JS_REFERENCE_IDENTIFIER@9..11
                    0: IDENT@9..11 "fx" [] []
                1: TS_TYPE_ARGUMENTS@11..19
                  0: L_ANGLE@11..12 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@12..18
                    0: TS_STRING_TYPE@12..18
                      0: STRING_KW@12..18 "string" [] []
                  2: R_ANGLE@18..19 ">" [] []
      1: SEMICOLON@19..20 ";" [] []
    1: JS_VARIABLE_STATEMENT@20..49
      0: JS_VARIABLE_DECLARATION@20..48
        0: LET_KW@20..25 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@25..48
          0: JS_VARIABLE_DECLARATOR@25..48
            0: JS_IDENTIFIER_BINDING@25..28
              0: IDENT@25..28 "f2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@28..48
              0: EQ@28..30 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@30..48
                0: JS_IDENTIFIER_EXPRESSION@30..32
                  0: JS_REFERENCE_IDENTIFIER@30..32
                    0: IDENT@30..32 "fx" [] []
                1: TS_TYPE_ARGUMENTS@32..48
                  0: L_ANGLE@32..33 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@33..47
                    0: TS_STRING_TYPE@33..39
                      0: STRING_KW@33..39 "string" [] []
                    1: COMMA@39..41 "," [] [Whitespace(" ")]
                    2: TS_NUMBER_TYPE@41..47
                      0: NUMBER_KW@41..47 "number" [] []
                  2: R_ANGLE@47..48 ">" [] []
      1: SEMICOLON@48..49 ";" [] []
    2: JS_VARIABLE_STATEMENT@49..78
      0: JS_VARIABLE_DECLARATION@49..77
        0: LET_KW@49..54 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@54..77
          0: JS_VARIABLE_DECLARATOR@54..77
            0: JS_IDENTIFIER_BINDING@54..57
              0: IDENT@54..57 "f3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@57..77
              0: EQ@57..59 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@59..77
                0: JS_COMPUTED_MEMBER_EXPRESSION@59..69
                  0: JS_IDENTIFIER_EXPRESSION@59..61
                    0: JS_REFERENCE_IDENTIFIER@59..61
                      0: IDENT@59..61 "fx" [] []
                  1: (empty)
                  2: L_BRACK@61..62 "[" [] []
                  3: JS_STRING_LITERAL_EXPRESSION@62..68
                    0: JS_STRING_LITERAL@62..68 "'test'" [] []
                  4: R_BRACK@68..69 "]" [] []
                1: TS_TYPE_ARGUMENTS@69..77
                  0: L_ANGLE@69..70 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@70..76
                    0: TS_STRING_TYPE@70..76
                      0: STRING_KW@70..76 "string" [] []
                  2: R_ANGLE@76..77 ">" [] []
      1: SEMICOLON@77..78 ";" [] []
    3: JS_VARIABLE_STATEMENT@78..119
      0: JS_VARIABLE_DECLARATION@78..101
        0: CONST_KW@78..85 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@85..101
          0: JS_VARIABLE_DECLARATOR@85..101
            0: JS_IDENTIFIER_BINDING@85..88
              0: IDENT@85..88 "a2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@88..101
              0: EQ@88..90 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@90..101
                0: JS_STATIC_MEMBER_EXPRESSION@90..93
                  0: JS_IDENTIFIER_EXPRESSION@90..91
                    0: JS_REFERENCE_IDENTIFIER@90..91
                      0: IDENT@90..91 "f" [] []
                  1: DOT@91..92 "." [] []
                  2: JS_NAME@92..93
                    0: IDENT@92..93 "g" [] []
                1: TS_TYPE_ARGUMENTS@93..101
                  0: L_ANGLE@93..94 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@94..100
                    0: TS_NUMBER_TYPE@94..100
                      0: NUMBER_KW@94..100 "number" [] []
                  2: R_ANGLE@100..101 ">" [] []
      1: SEMICOLON@101..119 ";" [] [Whitespace("  "), Comments("// () => number")]
    4: JS_VARIABLE_STATEMENT@119..158
      0: JS_VARIABLE_DECLARATION@119..142
        0: CONST_KW@119..126 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@126..142
          0: JS_VARIABLE_DECLARATOR@126..142
            0: JS_IDENTIFIER_BINDING@126..129
              0: IDENT@126..129 "a3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@129..142
              0: EQ@129..131 "=" [] [Whitespace(" ")]
              1: JS_STATIC_MEMBER_EXPRESSION@131..142
                0: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@131..140
                  0: JS_IDENTIFIER_EXPRESSION@131..132
                    0: JS_REFERENCE_IDENTIFIER@131..132
                      0: IDENT@131..132 "f" [] []
                  1: TS_TYPE_ARGUMENTS@132..140
                    0: L_ANGLE@132..133 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@133..139
                      0: TS_NUMBER_TYPE@133..139
                        0: NUMBER_KW@133..139 "number" [] []
                    2: R_ANGLE@139..140 ">" [] []
                1: DOT@140..141 "." [] []
                2: JS_NAME@141..142
                  0: IDENT@141..142 "g" [] []
      1: SEMICOLON@142..158 ";" [] [Whitespace("  "), Comments("// <U>() => U")]
    5: JS_VARIABLE_STATEMENT@158..207
      0: JS_VARIABLE_DECLARATION@158..189
        0: CONST_KW@158..165 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@165..189
          0: JS_VARIABLE_DECLARATOR@165..189
            0: JS_IDENTIFIER_BINDING@165..168
              0: IDENT@165..168 "a4" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@168..189
              0: EQ@168..170 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@170..189
                0: JS_STATIC_MEMBER_EXPRESSION@170..181
                  0: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@170..179
                    0: JS_IDENTIFIER_EXPRESSION@170..171
                      0: JS_REFERENCE_IDENTIFIER@170..171
                        0: IDENT@170..171 "f" [] []
                    1: TS_TYPE_ARGUMENTS@171..179
                      0: L_ANGLE@171..172 "<" [] []
                      1: TS_TYPE_ARGUMENT_LIST@172..178
                        0: TS_NUMBER_TYPE@172..178
                          0: NUMBER_KW@172..178 "number" [] []
                      2: R_ANGLE@178..179 ">" [] []
                  1: DOT@179..180 "." [] []
                  2: JS_NAME@180..181
                    0: IDENT@180..181 "g" [] []
                1: TS_TYPE_ARGUMENTS@181..189
                  0: L_ANGLE@181..182 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@182..188
                    0: TS_NUMBER_TYPE@182..188
                      0: NUMBER_KW@182..188 "number" [] []
                  2: R_ANGLE@188..189 ">" [] []
      1: SEMICOLON@189..207 ";" [] [Whitespace("  "), Comments("// () => number")]
    6: JS_VARIABLE_STATEMENT@207..251
      0: JS_VARIABLE_DECLARATION@207..233
        0: CONST_KW@207..214 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@214..233
          0: JS_VARIABLE_DECLARATOR@214..233
            0: JS_IDENTIFIER_BINDING@214..217
              0: IDENT@214..217 "a5" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@217..233
              0: EQ@217..219 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@219..233
                0: JS_COMPUTED_MEMBER_EXPRESSION@219..225
                  0: JS_IDENTIFIER_EXPRESSION@219..220
                    0: JS_REFERENCE_IDENTIFIER@219..220
                      0: IDENT@219..220 "f" [] []
                  1: (empty)
                  2: L_BRACK@220..221 "[" [] []
                  3: JS_STRING_LITERAL_EXPRESSION@221..224
                    0: JS_STRING_LITERAL@221..224 "'g'" [] []
                  4: R_BRACK@224..225 "]" [] []
                1: TS_TYPE_ARGUMENTS@225..233
                  0: L_ANGLE@225..226 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@226..232
                    0: TS_NUMBER_TYPE@226..232
                      0: NUMBER_KW@226..232 "number" [] []
                  2: R_ANGLE@232..233 ">" [] []
      1: SEMICOLON@233..251 ";" [] [Whitespace("  "), Comments("// () => number")]
    7: JS_VARIABLE_STATEMENT@251..280
      0: JS_VARIABLE_DECLARATION@251..279
        0: CONST_KW@251..258 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@258..279
          0: JS_VARIABLE_DECLARATOR@258..279
            0: JS_IDENTIFIER_BINDING@258..261
              0: IDENT@258..261 "a7" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@261..279
              0: EQ@261..263 "=" [] [Whitespace(" ")]
              1: JS_COMPUTED_MEMBER_EXPRESSION@263..279
                0: JS_PARENTHESIZED_EXPRESSION@263..274
                  0: L_PAREN@263..264 "(" [] []
                  1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@264..273
                    0: JS_IDENTIFIER_EXPRESSION@264..265
                      0: JS_REFERENCE_IDENTIFIER@264..265
                        0: IDENT@264..265 "f" [] []
                    1: TS_TYPE_ARGUMENTS@265..273
                      0: L_ANGLE@265..266 "<" [] []
                      1: TS_TYPE_ARGUMENT_LIST@266..272
                        0: TS_NUMBER_TYPE@266..272
                          0: NUMBER_KW@266..272 "number" [] []
                      2: R_ANGLE@272..273 ">" [] []
                  2: R_PAREN@273..274 ")" [] []
                1: (empty)
                2: L_BRACK@274..275 "[" [] []
                3: JS_STRING_LITERAL_EXPRESSION@275..278
                  0: JS_STRING_LITERAL@275..278 "'g'" [] []
                4: R_BRACK@278..279 "]" [] []
      1: SEMICOLON@279..280 ";" [] []
    8: JS_VARIABLE_STATEMENT@280..322
      0: JS_VARIABLE_DECLARATION@280..306
        0: CONST_KW@280..287 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@287..306
          0: JS_VARIABLE_DECLARATOR@287..306
            0: JS_IDENTIFIER_BINDING@287..290
              0: IDENT@287..290 "a6" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@290..306
              0: EQ@290..292 "=" [] [Whitespace(" ")]
              1: JS_BINARY_EXPRESSION@292..306
                0: JS_BINARY_EXPRESSION@292..300
                  0: JS_IDENTIFIER_EXPRESSION@292..293
                    0: JS_REFERENCE_IDENTIFIER@292..293
                      0: IDENT@292..293 "f" [] []
                  1: L_ANGLE@293..294 "<" [] []
                  2: JS_IDENTIFIER_EXPRESSION@294..300
                    0: JS_REFERENCE_IDENTIFIER@294..300
                      0: IDENT@294..300 "number" [] []
                1: R_ANGLE@300..301 ">" [] []
                2: JS_ARRAY_EXPRESSION@301..306
                  0: L_BRACK@301..302 "[" [] []
                  1: JS_ARRAY_ELEMENT_LIST@302..305
                    0: JS_STRING_LITERAL_EXPRESSION@302..305
                      0: JS_STRING_LITERAL@302..305 "'g'" [] []
                  2: R_BRACK@305..306 "]" [] []
      1: SEMICOLON@306..322 ";" [] [Whitespace("  "), Comments("// type Error")]
    9: JS_VARIABLE_STATEMENT@322..348
      0: JS_VARIABLE_DECLARATION@322..347
        0: CONST_KW@322..329 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@329..347
          0: JS_VARIABLE_DECLARATOR@329..347
            0: JS_IDENTIFIER_BINDING@329..332
              0: IDENT@329..332 "b2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@332..347
              0: EQ@332..334 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@334..347
                0: JS_IDENTIFIER_EXPRESSION@334..335
                  0: JS_REFERENCE_IDENTIFIER@334..335
                    0: IDENT@334..335 "f" [] []
                1: QUESTIONDOT@335..337 "?." [] []
                2: TS_TYPE_ARGUMENTS@337..345
                  0: L_ANGLE@337..338 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@338..344
                    0: TS_NUMBER_TYPE@338..344
                      0: NUMBER_KW@338..344 "number" [] []
                  2: R_ANGLE@344..345 ">" [] []
                3: JS_CALL_ARGUMENTS@345..347
                  0: L_PAREN@345..346 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@346..346
                  2: R_PAREN@346..347 ")" [] []
      1: SEMICOLON@347..348 ";" [] []
    10: JS_VARIABLE_STATEMENT@348..374
      0: JS_VARIABLE_DECLARATION@348..373
        0: CONST_KW@348..355 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@355..373
          0: JS_VARIABLE_DECLARATOR@355..373
            0: JS_IDENTIFIER_BINDING@355..358
              0: IDENT@355..358 "b3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@358..373
              0: EQ@358..360 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@360..373
                0: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@360..369
                  0: JS_IDENTIFIER_EXPRESSION@360..361
                    0: JS_REFERENCE_IDENTIFIER@360..361
                      0: IDENT@360..361 "f" [] []
                  1: TS_TYPE_ARGUMENTS@361..369
                    0: L_ANGLE@361..362 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@362..368
                      0: TS_NUMBER_TYPE@362..368
                        0: NUMBER_KW@362..368 "number" [] []
                    2: R_ANGLE@368..369 ">" [] []
                1: QUESTIONDOT@369..371 "?." [] []
                2: (empty)
                3: JS_CALL_ARGUMENTS@371..373
                  0: L_PAREN@371..372 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@372..372
                  2: R_PAREN@372..373 ")" [] []
      1: SEMICOLON@373..374 ";" [] []
    11: JS_VARIABLE_STATEMENT@374..451
      0: JS_VARIABLE_DECLARATION@374..407
        0: CONST_KW@374..381 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@381..407
          0: JS_VARIABLE_DECLARATOR@381..407
            0: JS_IDENTIFIER_BINDING@381..384
              0: IDENT@381..384 "b4" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@384..407
              0: EQ@384..386 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@386..407
                0: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@386..395
                  0: JS_IDENTIFIER_EXPRESSION@386..387
                    0: JS_REFERENCE_IDENTIFIER@386..387
                      0: IDENT@386..387 "f" [] []
                  1: TS_TYPE_ARGUMENTS@387..395
                    0: L_ANGLE@387..388 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@388..394
                      0: TS_NUMBER_TYPE@388..394
                        0: NUMBER_KW@388..394 "number" [] []
                    2: R_ANGLE@394..395 ">" [] []
                1: QUESTIONDOT@395..397 "?." [] []
                2: TS_TYPE_ARGUMENTS@397..405
                  0: L_ANGLE@397..398 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@398..404
                    0: TS_NUMBER_TYPE@398..404
                      0: NUMBER_KW@398..404 "number" [] []
                  2: R_ANGLE@404..405 ">" [] []
                3: JS_CALL_ARGUMENTS@405..407
                  0: L_PAREN@405..406 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@406..406
                  2: R_PAREN@406..407 ")" [] []
      1: SEMICOLON@407..451 ";" [] [Whitespace("  "), Comments("// Type Error, expect ...")]
    12: JS_VARIABLE_STATEMENT@451..478
      0: JS_VARIABLE_DECLARATION@451..477
        0: CONST_KW@451..458 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@458..477
          0: JS_VARIABLE_DECLARATOR@458..477
            0: JS_IDENTIFIER_BINDING@458..461
              0: IDENT@458..461 "x1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@461..477
              0: EQ@461..463 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@463..477
                0: JS_IDENTIFIER_EXPRESSION@463..464
                  0: JS_REFERENCE_IDENTIFIER@463..464
                    0: IDENT@463..464 "f" [] []
                1: (empty)
                2: TS_TYPE_ARGUMENTS@464..470
                  0: L_ANGLE@464..465 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@465..469
                    0: TS_BOOLEAN_LITERAL_TYPE@465..469
                      0: TRUE_KW@465..469 "true" [] []
                  2: R_ANGLE@469..470 ">" [] []
                3: JS_CALL_ARGUMENTS@470..477
                  0: L_PAREN@470..472 "(" [Newline("\n")] []
                  1: JS_CALL_ARGUMENT_LIST@472..476
                    0: JS_BOOLEAN_LITERAL_EXPRESSION@472..476
                      0: TRUE_KW@472..476 "true" [] []
                  2: R_PAREN@476..477 ")" [] []
      1: SEMICOLON@477..478 ";" [] []
    13: JS_VARIABLE_STATEMENT@478..538
      0: JS_VARIABLE_DECLARATION@478..537
        0: CONST_KW@478..520 "const" [Newline("\n"), Comments("// Parsed as relation ..."), Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@520..537
          0: JS_VARIABLE_DECLARATOR@520..537
            0: JS_IDENTIFIER_BINDING@520..523
              0: IDENT@520..523 "x2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@523..537
              0: EQ@523..525 "=" [] [Whitespace(" ")]
              1: JS_BINARY_EXPRESSION@525..537
                0: JS_BINARY_EXPRESSION@525..531
                  0: JS_IDENTIFIER_EXPRESSION@525..526
                    0: JS_REFERENCE_IDENTIFIER@525..526
                      0: IDENT@525..526 "f" [] []
                  1: L_ANGLE@526..527 "<" [] []
                  2: JS_BOOLEAN_LITERAL_EXPRESSION@527..531
                    0: TRUE_KW@527..531 "true" [] []
                1: R_ANGLE@531..532 ">" [] []
                2: JS_BOOLEAN_LITERAL_EXPRESSION@532..537
                  0: TRUE_KW@532..537 "true" [Newline("\n")] []
      1: SEMICOLON@537..538 ";" [] []
    14: JS_VARIABLE_STATEMENT@538..596
      0: JS_VARIABLE_DECLARATION@538..595
        0: CONST_KW@538..583 "const" [Newline("\n"), Comments("// Parsed as instanti ..."), Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@583..595
          0: JS_VARIABLE_DECLARATOR@583..595
            0: JS_IDENTIFIER_BINDING@583..586
              0: IDENT@583..586 "x3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@586..595
              0: EQ@586..588 "=" [] [Whitespace(" ")]
              1: TS_EXPRESSION_WITH_TYPE_ARGUMENTS@588..595
                0: JS_IDENTIFIER_EXPRESSION@588..589
                  0: JS_REFERENCE_IDENTIFIER@588..589
                    0: IDENT@588..589 "f" [] []
                1: TS_TYPE_ARGUMENTS@589..595
                  0: L_ANGLE@589..590 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@590..594
                    0: TS_BOOLEAN_LITERAL_TYPE@590..594
                      0: TRUE_KW@590..594 "true" [] []
                  2: R_ANGLE@594..595 ">" [] []
      1: SEMICOLON@595..596 ";" [] []
    15: JS_EXPRESSION_STATEMENT@596..602
      0: JS_BOOLEAN_LITERAL_EXPRESSION@596..601
        0: TRUE_KW@596..601 "true" [Newline("\n")] []
      1: SEMICOLON@601..602 ";" [] []
  3: EOF@602..603 "" [Newline("\n")] []
