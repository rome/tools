---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noUnusedVariables.ts
---
# Input
```js
// Invalid

class D {
	constructor(a: number) {}
	f(a: number) {}
	set a(a: number) {}
}
console.log(new D());

// Valid

interface A {
	f(a: number);
	set a(a: number);
	[key: string]: string;
}

abstract class B {
	constructor(a: number);
	abstract f(a: number);
	g(a: number);
	abstract set a(a: number);
}
console.log(new B());

class C {
	constructor(a: number);
	f(a: number);
}
console.log(new C());

function f(fn: (title: string) => boolean) {
	console.log(fn);
}
f();

export type Command = (...args: any[]) => unknown;

```

# Diagnostics
```
warning[js/noUnusedVariables]: This parameter is unused.
  ┌─ noUnusedVariables.ts:4:14
  │
4 │     constructor(a: number) {}
  │                 -

=  note: Unused variables usually are result of incomplete refactoring, typos and other source of bugs.


```

```
warning[js/noUnusedVariables]: This parameter is unused.
  ┌─ noUnusedVariables.ts:5:4
  │
5 │     f(a: number) {}
  │       -

=  note: Unused variables usually are result of incomplete refactoring, typos and other source of bugs.


```

```
warning[js/noUnusedVariables]: This parameter is unused.
  ┌─ noUnusedVariables.ts:6:8
  │
6 │     set a(a: number) {}
  │           -

=  note: Unused variables usually are result of incomplete refactoring, typos and other source of bugs.


```


