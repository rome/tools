---
source: crates/rome_js_analyze/tests/spec_tests.rs
assertion_line: 88
expression: noImportAssign.js
---
# Input
```js

// invalid
import x from "y";
x = 1;

import y from "y";
[y] = 1;

import z from "y";
({ z } = 1);

import a from "y";
[...a] = 1;

import b from "y";
({ ...b } = 1);

import c from "y";
for (c in y) {};

import d from "y";
d += 1;

import * as e from "y";
e = 1;

import { f } from "y";
f = 1;
f = 2;

import {xx} from 'y';
xx=1;

import xxx, * as yyy from "d"
xxx = 4;
yyy = 4;
// valid
import { g } from "y";
k = 3;
```

# Diagnostics
```
warning[js/noImportAssign]: The imported variable x is read-only
  ┌─ noImportAssign.js:4:1
  │
3 │ import x from "y";
  │        - The variable is imported here
4 │ x = 1;
  │ -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable y is read-only
  ┌─ noImportAssign.js:7:2
  │
6 │ import y from "y";
  │        - The variable is imported here
7 │ [y] = 1;
  │  -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable z is read-only
   ┌─ noImportAssign.js:10:4
   │
 9 │ import z from "y";
   │        - The variable is imported here
10 │ ({ z } = 1);
   │    -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable a is read-only
   ┌─ noImportAssign.js:13:5
   │
12 │ import a from "y";
   │        - The variable is imported here
13 │ [...a] = 1;
   │     -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable b is read-only
   ┌─ noImportAssign.js:16:7
   │
15 │ import b from "y";
   │        - The variable is imported here
16 │ ({ ...b } = 1);
   │       -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable c is read-only
   ┌─ noImportAssign.js:19:6
   │
18 │ import c from "y";
   │        - The variable is imported here
19 │ for (c in y) {};
   │      -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable d is read-only
   ┌─ noImportAssign.js:22:1
   │
21 │ import d from "y";
   │        - The variable is imported here
22 │ d += 1;
   │ -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable e is read-only
   ┌─ noImportAssign.js:25:1
   │
24 │ import * as e from "y";
   │             - The variable is imported here
25 │ e = 1;
   │ -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable f is read-only
   ┌─ noImportAssign.js:28:1
   │
27 │ import { f } from "y";
   │          - The variable is imported here
28 │ f = 1;
   │ -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable f is read-only
   ┌─ noImportAssign.js:29:1
   │
27 │ import { f } from "y";
   │          - The variable is imported here
28 │ f = 1;
29 │ f = 2;
   │ -

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable xx is read-only
   ┌─ noImportAssign.js:32:1
   │
31 │ import {xx} from 'y';
   │         -- The variable is imported here
32 │ xx=1;
   │ --

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable xxx is read-only
   ┌─ noImportAssign.js:35:1
   │
34 │ import xxx, * as yyy from "d"
   │        --- The variable is imported here
35 │ xxx = 4;
   │ ---

=  note: Use a local variable instead of reassigning an import.


```

```
warning[js/noImportAssign]: The imported variable yyy is read-only
   ┌─ noImportAssign.js:36:1
   │
34 │ import xxx, * as yyy from "d"
   │                  --- The variable is imported here
35 │ xxx = 4;
36 │ yyy = 4;
   │ ---

=  note: Use a local variable instead of reassigning an import.


```


