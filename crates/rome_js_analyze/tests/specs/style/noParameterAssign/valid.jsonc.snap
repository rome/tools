---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: valid.jsonc
---
# Input
```js
function foo(a) { var b = a; }
```

# Input
```js
function foo(a) { for (b in a); }
```

# Input
```js
function foo(a) { for (b of a); }
```

# Input
```js
function foo(a) { a.prop = 'value'; }
```

# Input
```js
function foo(a) { for (a.prop in obj); }
```

# Input
```js
function foo(a) { for (a.prop of arr); }
```

# Input
```js
function foo(a) { (function() { var a = 12; a++; })(); }
```

# Input
```js
function foo() { someGlobal = 13; }
```

# Input
```js
function foo() { someGlobal = 13; }
```

# Input
```js
function foo(a) { a.b = 0; }
```

# Input
```js
function foo(a) { delete a.b; }
```

# Input
```js
function foo(a) { ++a.b; }
```

# Input
```js
function foo(a) { [a.b] = []; }
```

# Input
```js
function foo(a) { bar(a.b).c = 0; }
```

# Input
```js
function foo(a) { data[a.b] = 0; }
```

# Input
```js
function foo(a) { +a.b; }
```

# Input
```js
function foo(a) { (a ? [] : [])[0] = 1; }
```

# Input
```js
function foo(a) { (a.b ? [] : [])[0] = 1; }
```

# Input
```js
function foo(a) { a.b = 0; }
```

# Input
```js
function foo(a) { ++a.b; }
```

# Input
```js
function foo(a) { delete a.b; }
```

# Input
```js
function foo(a) { for (a.b in obj); }
```

# Input
```js
function foo(a) { for (a.b of arr); }
```

# Input
```js
function foo(a, z) { a.b = 0; x.y = 0; }
```

# Input
```js
function foo(a) { a.b.c = 0;}
```

# Input
```js
function foo(aFoo) { aFoo.b = 0; }
```

# Input
```js
function foo(aFoo) { ++aFoo.b; }
```

# Input
```js
function foo(aFoo) { delete aFoo.b; }
```

# Input
```js
function foo(a, z) { aFoo.b = 0; x.y = 0; }
```

# Input
```js
function foo(aFoo) { aFoo.b.c = 0;}
```

# Input
```js
function foo(a) { ({ [a]: variable } = value) }
```

# Input
```js
function foo(a) { ([...a.b] = obj); }
```

# Input
```js
function foo(a) { ({...a.b} = obj); }
```

# Input
```js
function foo(a) { for (obj[a.b] in obj); }
```

# Input
```js
function foo(a) { for (obj[a.b] of arr); }
```

# Input
```js
function foo(a) { for (bar in a.b); }
```

# Input
```js
function foo(a) { for (bar of a.b); }
```

# Input
```js
function foo(a) { for (bar in baz) a.b; }
```

# Input
```js
function foo(a) { for (bar of baz) a.b; }
```

# Input
```js
function foo(bar, baz) { bar.a = true; baz.b = false; }
```

# Input
```js
function foo(bar) { bar.a = 0; }
```

# Input
```js
function foo(bar) { bar.get(0).a = 0; }
```

# Input
```js
function foo(bar) { delete bar.a; }
```

# Input
```js
function foo(bar) { ++bar.a; }
```

# Input
```js
function foo(bar) { for (bar.a in {}); }
```

# Input
```js
function foo(bar) { for (bar.a of []); }
```

# Input
```js
function foo(bar) { (bar ? bar : [])[0] = 1; }
```

# Input
```js
function foo(bar) { [bar.a] = []; }
```

# Input
```js
function foo(bar) { [bar.a] = []; }
```

# Input
```js
function foo(bar) { [bar.a] = []; }
```

# Input
```js
function foo(bar) { [bar.a] = []; }
```

# Input
```js
function foo(bar) { ({foo: bar.a} = {}); }
```

# Input
```js
function foo(a) { ([...a.b] = obj); }
```

# Input
```js
function foo(a) { ({...a.b} = obj); }
```

# Input
```js
function foo(a) { for ({bar: a.b} in {}); }
```

# Input
```js
function foo(a) { for ([a.b] of []); }
```

# Input
```js
function foo(a) { a.b &&= c; }
```

# Input
```js
function foo(a) { a.b.c ||= d; }
```

# Input
```js
function foo(a) { a[b] ??= c; }
```

# Input
```js
function foo(arguments) { }
```


