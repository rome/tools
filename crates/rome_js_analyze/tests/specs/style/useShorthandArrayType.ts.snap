---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: useShorthandArrayType.ts
---
# Input
```js
// valid
let valid: Array<Foo | Bar>;
let valid: Array<keyof Bar>;
let valid: Array<foo | bar>;
// invalid
let valid: Array<foo>;
let invalid1: Array<foo, Array<string>>;
let invalid2: Promise<Array<string>>;
let invalid3: Array<Foo<Bar>>;
let invalid4: Array<[number, number]>;

// valid
let valid5: Array<string & number>;
let valid6: Array<() => string>;
type valid7<T> = Array<T extends string ? string : number>
type valid8 = Array<new (string, number) => string>
// valid end

//parenthesized type
let valid8: Array<(string & number)>;
// infer type
type valid9<T> = T extends Array<infer R> ? R : any;
// mapped type
type valid10<T> = { [K in keyof T]: T[K] };

```

# Diagnostics
```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
  ┌─ useShorthandArrayType.ts:6:12
  │
6 │ let valid: Array<foo>;
  │            ----------

Suggested fix: Use shorthand T[] syntax to replace
    | @@ -3,7 +3,7 @@
2 2 |   let valid: Array<keyof Bar>;
3 3 |   let valid: Array<foo | bar>;
4 4 |   // invalid
5   | - let valid: Array<foo>;
  5 | + let valid: foo[];
6 6 |   let invalid1: Array<foo, Array<string>>;
7 7 |   let invalid2: Promise<Array<string>>;
8 8 |   let invalid3: Array<Foo<Bar>>;


```

```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
  ┌─ useShorthandArrayType.ts:7:15
  │
7 │ let invalid1: Array<foo, Array<string>>;
  │               -------------------------

Suggested fix: Use shorthand T[] syntax to replace
    | @@ -4,7 +4,7 @@
3 3 |   let valid: Array<foo | bar>;
4 4 |   // invalid
5 5 |   let valid: Array<foo>;
6   | - let invalid1: Array<foo, Array<string>>;
  6 | + let invalid1: foo[] | string[][];
7 7 |   let invalid2: Promise<Array<string>>;
8 8 |   let invalid3: Array<Foo<Bar>>;
9 9 |   let invalid4: Array<[number, number]>;


```

```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
  ┌─ useShorthandArrayType.ts:7:26
  │
7 │ let invalid1: Array<foo, Array<string>>;
  │                          -------------

Suggested fix: Use shorthand T[] syntax to replace
    | @@ -4,7 +4,7 @@
3 3 |   let valid: Array<foo | bar>;
4 4 |   // invalid
5 5 |   let valid: Array<foo>;
6   | - let invalid1: Array<foo, Array<string>>;
  6 | + let invalid1: Array<foo, string[]>;
7 7 |   let invalid2: Promise<Array<string>>;
8 8 |   let invalid3: Array<Foo<Bar>>;
9 9 |   let invalid4: Array<[number, number]>;


```

```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
  ┌─ useShorthandArrayType.ts:8:23
  │
8 │ let invalid2: Promise<Array<string>>;
  │                       -------------

Suggested fix: Use shorthand T[] syntax to replace
    | @@ -5,7 +5,7 @@
4 4 |   // invalid
5 5 |   let valid: Array<foo>;
6 6 |   let invalid1: Array<foo, Array<string>>;
7   | - let invalid2: Promise<Array<string>>;
  7 | + let invalid2: Promise<string[]>;
8 8 |   let invalid3: Array<Foo<Bar>>;
9 9 |   let invalid4: Array<[number, number]>;
10 10 |   


```

```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
  ┌─ useShorthandArrayType.ts:9:15
  │
9 │ let invalid3: Array<Foo<Bar>>;
  │               ---------------

Suggested fix: Use shorthand T[] syntax to replace
    | @@ -6,7 +6,7 @@
5 5 |   let valid: Array<foo>;
6 6 |   let invalid1: Array<foo, Array<string>>;
7 7 |   let invalid2: Promise<Array<string>>;
8   | - let invalid3: Array<Foo<Bar>>;
  8 | + let invalid3: Foo<Bar>[];
9 9 |   let invalid4: Array<[number, number]>;
10 10 |   
11 11 |   // valid


```

```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
   ┌─ useShorthandArrayType.ts:10:15
   │
10 │ let invalid4: Array<[number, number]>;
   │               -----------------------

Suggested fix: Use shorthand T[] syntax to replace
      | @@ -7,7 +7,7 @@
 6  6 |   let invalid1: Array<foo, Array<string>>;
 7  7 |   let invalid2: Promise<Array<string>>;
 8  8 |   let invalid3: Array<Foo<Bar>>;
 9    | - let invalid4: Array<[number, number]>;
    9 | + let invalid4: [number, number][];
10 10 |   
11 11 |   // valid
12 12 |   let valid5: Array<string & number>;


```

```
warning[style/useShorthandArrayType]: Use shorthand T[] syntax instead of Array<T> syntax.
   ┌─ useShorthandArrayType.ts:20:13
   │
20 │ let valid8: Array<(string & number)>;
   │             ------------------------

Suggested fix: Use shorthand T[] syntax to replace
      | @@ -17,7 +17,7 @@
16 16 |   // valid end
17 17 |   
18 18 |   //parenthesized type
19    | - let valid8: Array<(string & number)>;
   19 | + let valid8: (string & number)[];
20 20 |   // infer type
21 21 |   type valid9<T> = T extends Array<infer R> ? R : any;
22 22 |   // mapped type


```


