---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noChildrenPropInvalid.jsx
---
# Input
```js
<>
    <Component children={'foo'}></Component>
</>

createElement('div', {
    children: 'foo'
})

React.createElement('div', {
    children: 'foo'
})

```

# Diagnostics
```
noChildrenPropInvalid.jsx:2:16 lint/react/noChildrenProp ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid passing children using a prop
  
    1 │ <>
  > 2 │     <Component children={'foo'}></Component>
      │                ^^^^^^^^
    3 │ </>
    4 │ 
  
  i The canonical way to pass children in React is to use JSX elements
  

```

```
noChildrenPropInvalid.jsx:6:5 lint/react/noChildrenProp ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid passing children using a prop
  
    5 │ createElement('div', {
  > 6 │     children: 'foo'
      │     ^^^^^^^^
    7 │ })
    8 │ 
  
  i The canonical way to pass children in React is to use additional arguments to React.createElement
  

```

```
noChildrenPropInvalid.jsx:10:5 lint/react/noChildrenProp ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid passing children using a prop
  
     9 │ React.createElement('div', {
  > 10 │     children: 'foo'
       │     ^^^^^^^^
    11 │ })
    12 │ 
  
  i The canonical way to pass children in React is to use additional arguments to React.createElement
  

```


