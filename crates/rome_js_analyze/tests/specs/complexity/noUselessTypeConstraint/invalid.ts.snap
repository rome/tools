---
source: crates/rome_js_analyze/tests/spec_tests.rs
assertion_line: 96
expression: invalid.ts
---
# Input
```js
interface FooAny1<T extends any> {
	field: T;
}

interface FooAny2<T extends unknown> {
	field: T;
}

class BazAny<T extends any> {
  quxAny<U extends any>() {}
}

const QuuxAny = <T extends any>() => {};

function QuuzAny<T extends any>() {}

```

# Diagnostics
```
invalid.ts:1:21 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
  > 1 │ interface FooAny1<T extends any> {
      │                     ^^^^^^^^^^^
    2 │ 	field: T;
    3 │ }
  
  i All types are subtypes of any and unknown.
  
  i Suggested fix: Remove the constraint.
  
    1 │ interface·FooAny1<T·extends·any>·{
      │                     -----------   

```

```
invalid.ts:5:21 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    3 │ }
    4 │ 
  > 5 │ interface FooAny2<T extends unknown> {
      │                     ^^^^^^^^^^^^^^^
    6 │ 	field: T;
    7 │ }
  
  i All types are subtypes of any and unknown.
  
  i Suggested fix: Remove the constraint.
  
    5 │ interface·FooAny2<T·extends·unknown>·{
      │                     ---------------   

```

```
invalid.ts:9:16 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
     7 │ }
     8 │ 
   > 9 │ class BazAny<T extends any> {
       │                ^^^^^^^^^^^
    10 │   quxAny<U extends any>() {}
    11 │ }
  
  i All types are subtypes of any and unknown.
  
  i Suggested fix: Remove the constraint.
  
    9 │ class·BazAny<T·extends·any>·{
      │                -----------   

```

```
invalid.ts:10:12 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
     9 │ class BazAny<T extends any> {
  > 10 │   quxAny<U extends any>() {}
       │            ^^^^^^^^^^^
    11 │ }
    12 │ 
  
  i All types are subtypes of any and unknown.
  
  i Suggested fix: Remove the constraint.
  
    10 │ ··quxAny<U·extends·any>()·{}
       │            -----------      

```

```
invalid.ts:13:20 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    11 │ }
    12 │ 
  > 13 │ const QuuxAny = <T extends any>() => {};
       │                    ^^^^^^^^^^^
    14 │ 
    15 │ function QuuzAny<T extends any>() {}
  
  i All types are subtypes of any and unknown.
  
  i Suggested fix: Remove the constraint.
  
    13 │ const·QuuxAny·=·<T·extends·any>()·=>·{};
       │                    -----------          

```

```
invalid.ts:15:20 lint/complexity/noUselessTypeConstraint  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Constraining a type parameter to any or unknown is useless.
  
    13 │ const QuuxAny = <T extends any>() => {};
    14 │ 
  > 15 │ function QuuzAny<T extends any>() {}
       │                    ^^^^^^^^^^^
    16 │ 
  
  i All types are subtypes of any and unknown.
  
  i Suggested fix: Remove the constraint.
  
    15 │ function·QuuzAny<T·extends·any>()·{}
       │                    -----------      

```


