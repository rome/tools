---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
isFinite({});

(isFinite)({});

globalThis.isFinite({});

(globalThis).isFinite({});

globalThis["isFinite"]({});

(globalThis)[("isFinite")]({});

function localIsNaN(isFinite) {
    globalThis.isFinite({});
}

localIsNaN(isFinite);

```

# Diagnostics
```
invalid.js:1:1 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
  > 1 │ isFinite({});
      │ ^^^^^^^^
    2 │ 
    3 │ (isFinite)({});
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
     1    │ - isFinite({});
        1 │ + Number.isFinite({});
     2  2 │   
     3  3 │   (isFinite)({});
  

```

```
invalid.js:3:2 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
    1 │ isFinite({});
    2 │ 
  > 3 │ (isFinite)({});
      │  ^^^^^^^^
    4 │ 
    5 │ globalThis.isFinite({});
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
     1  1 │   isFinite({});
     2  2 │   
     3    │ - (isFinite)({});
        3 │ + (Number.isFinite)({});
     4  4 │   
     5  5 │   globalThis.isFinite({});
  

```

```
invalid.js:5:1 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
    3 │ (isFinite)({});
    4 │ 
  > 5 │ globalThis.isFinite({});
      │ ^^^^^^^^^^^^^^^^^^^
    6 │ 
    7 │ (globalThis).isFinite({});
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
     3  3 │   (isFinite)({});
     4  4 │   
     5    │ - globalThis.isFinite({});
        5 │ + globalThis.Number.isFinite({});
     6  6 │   
     7  7 │   (globalThis).isFinite({});
  

```

```
invalid.js:7:1 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
    5 │ globalThis.isFinite({});
    6 │ 
  > 7 │ (globalThis).isFinite({});
      │ ^^^^^^^^^^^^^^^^^^^^^
    8 │ 
    9 │ globalThis["isFinite"]({});
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
     5  5 │   globalThis.isFinite({});
     6  6 │   
     7    │ - (globalThis).isFinite({});
        7 │ + (globalThis).Number.isFinite({});
     8  8 │   
     9  9 │   globalThis["isFinite"]({});
  

```

```
invalid.js:9:1 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
     7 │ (globalThis).isFinite({});
     8 │ 
   > 9 │ globalThis["isFinite"]({});
       │ ^^^^^^^^^^^^^^^^^^^^^^
    10 │ 
    11 │ (globalThis)[("isFinite")]({});
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
     7  7 │   (globalThis).isFinite({});
     8  8 │   
     9    │ - globalThis["isFinite"]({});
        9 │ + globalThis.Number["isFinite"]({});
    10 10 │   
    11 11 │   (globalThis)[("isFinite")]({});
  

```

```
invalid.js:11:1 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
     9 │ globalThis["isFinite"]({});
    10 │ 
  > 11 │ (globalThis)[("isFinite")]({});
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
    12 │ 
    13 │ function localIsNaN(isFinite) {
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
    11 │ (globalThis).Number[("isFinite")]({});
       │             +++++++                   

```

```
invalid.js:14:5 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
    13 │ function localIsNaN(isFinite) {
  > 14 │     globalThis.isFinite({});
       │     ^^^^^^^^^^^^^^^^^^^
    15 │ }
    16 │ 
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
    12 12 │   
    13 13 │   function localIsNaN(isFinite) {
    14    │ - ····globalThis.isFinite({});
       14 │ + ····globalThis.Number.isFinite({});
    15 15 │   }
    16 16 │   
  

```

```
invalid.js:17:12 lint/nursery/noGlobalIsFinite  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! isFinite is unsafe. It attempts a type coercion. Use Number.isFinite instead.
  
    15 │ }
    16 │ 
  > 17 │ localIsNaN(isFinite);
       │            ^^^^^^^^
    18 │ 
  
  i See the MDN documentation for more details.
  
  i Suggested fix: Use Number.isFinite instead.
  
    15 15 │   }
    16 16 │   
    17    │ - localIsNaN(isFinite);
       17 │ + localIsNaN(Number.isFinite);
    18 18 │   
  

```


