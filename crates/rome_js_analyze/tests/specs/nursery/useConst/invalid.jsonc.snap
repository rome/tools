---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.jsonc
---
# Input
```js
let x = 1; foo(x);
```

# Diagnostics
```
invalid.jsonc:1:5 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 1; foo(x);
      │     ^
  

```

# Input
```js
for (let i in [1,2,3]) { foo(i); }
```

# Diagnostics
```
invalid.jsonc:1:10 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'i' is never reassigned. Use 'const' instead.
  
  > 1 │ for (let i in [1,2,3]) { foo(i); }
      │          ^
  

```

# Input
```js
for (let x of [1,2,3]) { foo(x); }
```

# Diagnostics
```
invalid.jsonc:1:10 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ for (let x of [1,2,3]) { foo(x); }
      │          ^
  

```

# Input
```js
let [x = -1, y] = [1,2]; y = 0;
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let [x = -1, y] = [1,2]; y = 0;
      │      ^
  

```

# Input
```js
let {a: x = -1, b: y} = {a:1,b:2}; y = 0;
```

# Diagnostics
```
invalid.jsonc:1:9 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a: x = -1, b: y} = {a:1,b:2}; y = 0;
      │         ^
  

```

# Input
```js
(function() { let x = 1; foo(x); })();
```

# Diagnostics
```
invalid.jsonc:1:19 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ (function() { let x = 1; foo(x); })();
      │                   ^
  

```

# Input
```js
(function() { for (let i in [1,2,3]) { foo(i); } })();
```

# Diagnostics
```
invalid.jsonc:1:24 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'i' is never reassigned. Use 'const' instead.
  
  > 1 │ (function() { for (let i in [1,2,3]) { foo(i); } })();
      │                        ^
  

```

# Input
```js
(function() { for (let x of [1,2,3]) { foo(x); } })();
```

# Diagnostics
```
invalid.jsonc:1:24 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ (function() { for (let x of [1,2,3]) { foo(x); } })();
      │                        ^
  

```

# Input
```js
(function() { let [x = -1, y] = [1,2]; y = 0; })();
```

# Diagnostics
```
invalid.jsonc:1:20 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ (function() { let [x = -1, y] = [1,2]; y = 0; })();
      │                    ^
  

```

# Input
```js
let f = (function() { let g = x; })(); f = 1;
```

# Diagnostics
```
invalid.jsonc:1:27 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'g' is never reassigned. Use 'const' instead.
  
  > 1 │ let f = (function() { let g = x; })(); f = 1;
      │                           ^
  

```

# Input
```js
(function() { let {a: x = -1, b: y} = {a:1,b:2}; y = 0; })();
```

# Diagnostics
```
invalid.jsonc:1:23 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ (function() { let {a: x = -1, b: y} = {a:1,b:2}; y = 0; })();
      │                       ^
  

```

# Input
```js
let x = 0; { let x = 1; foo(x); } x = 0;
```

# Diagnostics
```
invalid.jsonc:1:18 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 0; { let x = 1; foo(x); } x = 0;
      │                  ^
  

```

# Input
```js
for (let i = 0; i < 10; ++i) { let x = 1; foo(x); }
```

# Diagnostics
```
invalid.jsonc:1:36 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ for (let i = 0; i < 10; ++i) { let x = 1; foo(x); }
      │                                    ^
  

```

# Input
```js
for (let i in [1,2,3]) { let x = 1; foo(x); }
```

# Diagnostics
```
invalid.jsonc:1:10 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'i' is never reassigned. Use 'const' instead.
  
  > 1 │ for (let i in [1,2,3]) { let x = 1; foo(x); }
      │          ^
  

```

```
invalid.jsonc:1:30 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ for (let i in [1,2,3]) { let x = 1; foo(x); }
      │                              ^
  

```

# Input
```js
var foo = function() { for (const b of c) { let a; a = 1; } };
```

# Input
```js
var foo = function() { for (const b of c) { let a; ({a} = 1); } };
```

# Input
```js
let x; x = 0;
```

# Input
```js
switch (a) { case 0: let x; x = 0; }
```

# Input
```js
(function() { let x; x = 1; })();
```

# Input
```js
let {a = 0, b} = obj; b = 0; foo(a, b);
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj; b = 0; foo(a, b);
      │      ^
  

```

# Input
```js
let {a: {b, c}} = {a: {b: 1, c: 2}}; b = 3;
```

# Diagnostics
```
invalid.jsonc:1:13 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'c' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a: {b, c}} = {a: {b: 1, c: 2}}; b = 3;
      │             ^
  

```

# Input
```js
let {a: {b, c}} = {a: {b: 1, c: 2}}
```

# Diagnostics
```
invalid.jsonc:1:10 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a: {b, c}} = {a: {b: 1, c: 2}}
      │          ^
  

```

```
invalid.jsonc:1:13 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'c' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a: {b, c}} = {a: {b: 1, c: 2}}
      │             ^
  

```

# Input
```js
let a, b; ({a = 0, b} = obj); b = 0; foo(a, b);
```

# Input
```js
let {a = 0, b} = obj; foo(a, b);
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj; foo(a, b);
      │      ^
  

```

```
invalid.jsonc:1:13 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj; foo(a, b);
      │             ^
  

```

# Input
```js
let [a] = [1]
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let [a] = [1]
      │      ^
  

```

# Input
```js
let {a} = obj
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a} = obj
      │      ^
  

```

# Input
```js
let a, b; ({a = 0, b} = obj); foo(a, b);
```

# Input
```js
let {a = 0, b} = obj, c = a; b = a;
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj, c = a; b = a;
      │      ^
  

```

```
invalid.jsonc:1:23 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'c' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj, c = a; b = a;
      │                       ^
  

```

# Input
```js
let {a = 0, b} = obj, c = a; b = a;
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj, c = a; b = a;
      │      ^
  

```

```
invalid.jsonc:1:23 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'c' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a = 0, b} = obj, c = a; b = a;
      │                       ^
  

```

# Input
```js
let { name, ...otherStuff } = obj; otherStuff = {};
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'name' is never reassigned. Use 'const' instead.
  
  > 1 │ let { name, ...otherStuff } = obj; otherStuff = {};
      │       ^^^^
  

```

# Input
```js
let { name, ...otherStuff } = obj; otherStuff = {};
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'name' is never reassigned. Use 'const' instead.
  
  > 1 │ let { name, ...otherStuff } = obj; otherStuff = {};
      │       ^^^^
  

```

# Input
```js
let x; function foo() { bar(x); } x = 0;
```

# Input
```js
/*eslint use-x:error*/ let x = 1
```

# Diagnostics
```
invalid.jsonc:1:28 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ /*eslint use-x:error*/ let x = 1
      │                            ^
  

```

# Input
```js
/*eslint use-x:error*/ { let x = 1 }
```

# Diagnostics
```
invalid.jsonc:1:30 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ /*eslint use-x:error*/ { let x = 1 }
      │                              ^
  

```

# Input
```js
let { foo, bar } = baz;
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'foo' is never reassigned. Use 'const' instead.
  
  > 1 │ let { foo, bar } = baz;
      │       ^^^
  

```

```
invalid.jsonc:1:12 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'bar' is never reassigned. Use 'const' instead.
  
  > 1 │ let { foo, bar } = baz;
      │            ^^^
  

```

# Input
```js
const x = [1,2]; let [,y] = x;
```

# Diagnostics
```
invalid.jsonc:1:24 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ const x = [1,2]; let [,y] = x;
      │                        ^
  

```

# Input
```js
const x = [1,2,3]; let [y,,z] = x;
```

# Diagnostics
```
invalid.jsonc:1:25 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ const x = [1,2,3]; let [y,,z] = x;
      │                         ^
  

```

```
invalid.jsonc:1:28 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'z' is never reassigned. Use 'const' instead.
  
  > 1 │ const x = [1,2,3]; let [y,,z] = x;
      │                            ^
  

```

# Input
```js
let predicate; [, {foo:returnType, predicate}] = foo();
```

# Input
```js
let predicate; [, {foo:returnType, predicate}, ...bar ] = foo();
```

# Input
```js
let predicate; [, {foo:returnType, ...predicate} ] = foo();
```

# Input
```js
let x = 'x', y = 'y';
```

# Diagnostics
```
invalid.jsonc:1:5 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y';
      │     ^
  

```

```
invalid.jsonc:1:14 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y';
      │              ^
  

```

# Input
```js
let x = 'x', y = 'y'; x = 1
```

# Diagnostics
```
invalid.jsonc:1:14 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y'; x = 1
      │              ^
  

```

# Input
```js
let x = 1, y = 'y'; let z = 1;
```

# Diagnostics
```
invalid.jsonc:1:5 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 1, y = 'y'; let z = 1;
      │     ^
  

```

```
invalid.jsonc:1:12 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 1, y = 'y'; let z = 1;
      │            ^
  

```

```
invalid.jsonc:1:25 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'z' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 1, y = 'y'; let z = 1;
      │                         ^
  

```

# Input
```js
let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;
      │       ^
  

```

```
invalid.jsonc:1:10 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;
      │          ^
  

```

```
invalid.jsonc:1:13 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'c' is never reassigned. Use 'const' instead.
  
  > 1 │ let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;
      │             ^
  

```

```
invalid.jsonc:1:32 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;
      │                                ^
  

```

```
invalid.jsonc:1:35 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'z' is never reassigned. Use 'const' instead.
  
  > 1 │ let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;
      │                                   ^
  

```

# Input
```js
let x = 'x', y = 'y'; function someFunc() { let a = 1, b = 2; foo(a, b) }
```

# Diagnostics
```
invalid.jsonc:1:5 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'x' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y'; function someFunc() { let a = 1, b = 2; foo(a, b) }
      │     ^
  

```

```
invalid.jsonc:1:14 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'y' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y'; function someFunc() { let a = 1, b = 2; foo(a, b) }
      │              ^
  

```

```
invalid.jsonc:1:49 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y'; function someFunc() { let a = 1, b = 2; foo(a, b) }
      │                                                 ^
  

```

```
invalid.jsonc:1:56 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let x = 'x', y = 'y'; function someFunc() { let a = 1, b = 2; foo(a, b) }
      │                                                        ^
  

```

# Input
```js
let someFunc = () => { let a = 1, b = 2; foo(a, b) }
```

# Diagnostics
```
invalid.jsonc:1:5 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'someFunc' is never reassigned. Use 'const' instead.
  
  > 1 │ let someFunc = () => { let a = 1, b = 2; foo(a, b) }
      │     ^^^^^^^^
  

```

```
invalid.jsonc:1:28 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let someFunc = () => { let a = 1, b = 2; foo(a, b) }
      │                            ^
  

```

```
invalid.jsonc:1:35 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let someFunc = () => { let a = 1, b = 2; foo(a, b) }
      │                                   ^
  

```

# Input
```js
let {a, b} = c, d;
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a, b} = c, d;
      │      ^
  

```

```
invalid.jsonc:1:9 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a, b} = c, d;
      │         ^
  

```

# Input
```js
let {a, b, c} = {}, e, f;
```

# Diagnostics
```
invalid.jsonc:1:6 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a, b, c} = {}, e, f;
      │      ^
  

```

```
invalid.jsonc:1:9 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a, b, c} = {}, e, f;
      │         ^
  

```

```
invalid.jsonc:1:12 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'c' is never reassigned. Use 'const' instead.
  
  > 1 │ let {a, b, c} = {}, e, f;
      │            ^
  

```

# Input
```js
function a() { let foo = 0, bar = 1; foo = 1; } function b() { let foo = 0, bar = 2; foo = 2; }
```

# Diagnostics
```
invalid.jsonc:1:29 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'bar' is never reassigned. Use 'const' instead.
  
  > 1 │ function a() { let foo = 0, bar = 1; foo = 1; } function b() { let foo = 0, bar = 2; foo = 2; }
      │                             ^^^
  

```

```
invalid.jsonc:1:77 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'bar' is never reassigned. Use 'const' instead.
  
  > 1 │ function a() { let foo = 0, bar = 1; foo = 1; } function b() { let foo = 0, bar = 2; foo = 2; }
      │                                                                             ^^^
  

```

# Input
```js
/*eslint no-undef-init:error*/ let foo = undefined;
```

# Diagnostics
```
invalid.jsonc:1:36 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'foo' is never reassigned. Use 'const' instead.
  
  > 1 │ /*eslint no-undef-init:error*/ let foo = undefined;
      │                                    ^^^
  

```

# Input
```js
let a = 1; class C { static { a; } }
```

# Diagnostics
```
invalid.jsonc:1:5 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ let a = 1; class C { static { a; } }
      │     ^
  

```

# Input
```js
class C { static { a; } } let a = 1;
```

# Diagnostics
```
invalid.jsonc:1:31 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ class C { static { a; } } let a = 1;
      │                               ^
  

```

# Input
```js
class C { static { let a = 1; } }
```

# Diagnostics
```
invalid.jsonc:1:24 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ class C { static { let a = 1; } }
      │                        ^
  

```

# Input
```js
class C { static { if (foo) { let a = 1; } } }
```

# Diagnostics
```
invalid.jsonc:1:35 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ class C { static { if (foo) { let a = 1; } } }
      │                                   ^
  

```

# Input
```js
class C { static { let a = 1; if (foo) { a; } } }
```

# Diagnostics
```
invalid.jsonc:1:24 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ class C { static { let a = 1; if (foo) { a; } } }
      │                        ^
  

```

# Input
```js
class C { static { if (foo) { let a; a = 1; } } }
```

# Input
```js
class C { static { let a; a = 1; } }
```

# Input
```js
class C { static { let { a, b } = foo; } }
```

# Diagnostics
```
invalid.jsonc:1:26 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'a' is never reassigned. Use 'const' instead.
  
  > 1 │ class C { static { let { a, b } = foo; } }
      │                          ^
  

```

```
invalid.jsonc:1:29 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'b' is never reassigned. Use 'const' instead.
  
  > 1 │ class C { static { let { a, b } = foo; } }
      │                             ^
  

```

# Input
```js
class C { static { let a, b; ({ a, b } = foo); } }
```

# Input
```js
class C { static { let a; let b; ({ a, b } = foo); } }
```

# Input
```js
class C { static { let a; a = 0; console.log(a); } }
```

# Input
```js
let { itemId, list } = {}, obj = [], total = 0; total = 9; console.log(itemId, list, obj, total);
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'itemId' is never reassigned. Use 'const' instead.
  
  > 1 │ let { itemId, list } = {}, obj = [], total = 0; total = 9; console.log(itemId, list, obj, total);
      │       ^^^^^^
  

```

```
invalid.jsonc:1:15 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'list' is never reassigned. Use 'const' instead.
  
  > 1 │ let { itemId, list } = {}, obj = [], total = 0; total = 9; console.log(itemId, list, obj, total);
      │               ^^^^
  

```

```
invalid.jsonc:1:28 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'obj' is never reassigned. Use 'const' instead.
  
  > 1 │ let { itemId, list } = {}, obj = [], total = 0; total = 9; console.log(itemId, list, obj, total);
      │                            ^^^
  

```

# Input
```js
let { itemId, list } = {}, obj = []; console.log(itemId, list, obj);
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'itemId' is never reassigned. Use 'const' instead.
  
  > 1 │ let { itemId, list } = {}, obj = []; console.log(itemId, list, obj);
      │       ^^^^^^
  

```

```
invalid.jsonc:1:15 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'list' is never reassigned. Use 'const' instead.
  
  > 1 │ let { itemId, list } = {}, obj = []; console.log(itemId, list, obj);
      │               ^^^^
  

```

```
invalid.jsonc:1:28 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'obj' is never reassigned. Use 'const' instead.
  
  > 1 │ let { itemId, list } = {}, obj = []; console.log(itemId, list, obj);
      │                            ^^^
  

```

# Input
```js
let [ itemId, list ] = [], total = 0; total = 9; console.log(itemId, list, total);
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'itemId' is never reassigned. Use 'const' instead.
  
  > 1 │ let [ itemId, list ] = [], total = 0; total = 9; console.log(itemId, list, total);
      │       ^^^^^^
  

```

```
invalid.jsonc:1:15 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'list' is never reassigned. Use 'const' instead.
  
  > 1 │ let [ itemId, list ] = [], total = 0; total = 9; console.log(itemId, list, total);
      │               ^^^^
  

```

# Input
```js
let [ itemId, list ] = [], obj = []; console.log(itemId, list, obj);
```

# Diagnostics
```
invalid.jsonc:1:7 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'itemId' is never reassigned. Use 'const' instead.
  
  > 1 │ let [ itemId, list ] = [], obj = []; console.log(itemId, list, obj);
      │       ^^^^^^
  

```

```
invalid.jsonc:1:15 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'list' is never reassigned. Use 'const' instead.
  
  > 1 │ let [ itemId, list ] = [], obj = []; console.log(itemId, list, obj);
      │               ^^^^
  

```

```
invalid.jsonc:1:28 lint/nursery/useConst ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! 'obj' is never reassigned. Use 'const' instead.
  
  > 1 │ let [ itemId, list ] = [], obj = []; console.log(itemId, list, obj);
      │                            ^^^
  

```


