---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: duplicateSuper.js
---
# Input
```js
// valid
class B extends A {
    constructor(cond) {
        if (cond) {
            super(true);
        } else {
            super(false);
        }
    }
}

// invalid
class C extends A {
    constructor() {
        super(1);
        super(2);
    }
}

// invalid
class D extends A {
    constructor(cond) {
        if (cond) {
            super(true);
        }

        super();
    }
}

// invalid
class E extends A {
    constructor(cond) {
        do {
            super();
        } while (cond);
    }
}

// invalid
class F extends A {
    constructor(condA, condB) {
        if (condA) {
            super(true);
        }
        if (condB) {
            super(true);
        }
    }
}

// invalid
class G extends A {
    constructor(condA, condB) {
        while (condA) {
            if (condB) {
                super();
            }
        }
    }
}

```

# Diagnostics
```
duplicateSuper.js:14:5 lint/nursery/noUnreachableSuper ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This constructor has code paths where `super()` is called more than once.
  
    12 │ // invalid
    13 │ class C extends A {
  > 14 │     constructor() {
       │     ^^^^^^^^^^^^^^^
  > 15 │         super(1);
  > 16 │         super(2);
  > 17 │     }
       │     ^
    18 │ }
    19 │ 
  
  i `super()` is first called here:
  
    13 │ class C extends A {
    14 │     constructor() {
  > 15 │         super(1);
       │         ^^^^^
    16 │         super(2);
    17 │     }
  
  i `super()` is then called again here:
  
    14 │     constructor() {
    15 │         super(1);
  > 16 │         super(2);
       │         ^^^^^
    17 │     }
    18 │ }
  

```

```
duplicateSuper.js:22:5 lint/nursery/noUnreachableSuper ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This constructor has code paths where `super()` is called more than once.
  
    20 │ // invalid
    21 │ class D extends A {
  > 22 │     constructor(cond) {
       │     ^^^^^^^^^^^^^^^^^^^
  > 23 │         if (cond) {
        ...
  > 27 │         super();
  > 28 │     }
       │     ^
    29 │ }
    30 │ 
  
  i `super()` is first called here:
  
    22 │     constructor(cond) {
    23 │         if (cond) {
  > 24 │             super(true);
       │             ^^^^^
    25 │         }
    26 │ 
  
  i `super()` is then called again here:
  
    25 │         }
    26 │ 
  > 27 │         super();
       │         ^^^^^
    28 │     }
    29 │ }
  

```

```
duplicateSuper.js:33:5 lint/nursery/noUnreachableSuper ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This constructor calls `super()` in a loop.
  
    31 │ // invalid
    32 │ class E extends A {
  > 33 │     constructor(cond) {
       │     ^^^^^^^^^^^^^^^^^^^
  > 34 │         do {
  > 35 │             super();
  > 36 │         } while (cond);
  > 37 │     }
       │     ^
    38 │ }
    39 │ 
  
  i `super()` is called here:
  
    33 │     constructor(cond) {
    34 │         do {
  > 35 │             super();
       │             ^^^^^
    36 │         } while (cond);
    37 │     }
  

```

```
duplicateSuper.js:42:5 lint/nursery/noUnreachableSuper ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This constructor has code paths where `super()` is called more than once.
  
    40 │ // invalid
    41 │ class F extends A {
  > 42 │     constructor(condA, condB) {
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 43 │         if (condA) {
        ...
  > 48 │         }
  > 49 │     }
       │     ^
    50 │ }
    51 │ 
  
  i `super()` is first called here:
  
    42 │     constructor(condA, condB) {
    43 │         if (condA) {
  > 44 │             super(true);
       │             ^^^^^
    45 │         }
    46 │         if (condB) {
  
  i `super()` is then called again here:
  
    45 │         }
    46 │         if (condB) {
  > 47 │             super(true);
       │             ^^^^^
    48 │         }
    49 │     }
  

```

```
duplicateSuper.js:54:5 lint/nursery/noUnreachableSuper ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This constructor calls `super()` in a loop.
  
    52 │ // invalid
    53 │ class G extends A {
  > 54 │     constructor(condA, condB) {
       │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 55 │         while (condA) {
        ...
  > 59 │         }
  > 60 │     }
       │     ^
    61 │ }
    62 │ 
  
  i `super()` is called here:
  
    55 │         while (condA) {
    56 │             if (condB) {
  > 57 │                 super();
       │                 ^^^^^
    58 │             }
    59 │         }
  

```


