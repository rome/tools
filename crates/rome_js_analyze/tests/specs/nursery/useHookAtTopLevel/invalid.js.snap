---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
// Hook called directly at the component function
function Component1({ a }) {
    if (a == 1) {
        useEffect();
    }

    if (a == 1) {
        {
            useEffect();
        }
    }

    for (;a < 10;) {
        useEffect();
    }

    for (const x of a) {
        useEffect();
    }

    for (const x in a) {
        useEffect();
    }

    while(a < 10) {
        useEffect();
    }

    do {
        useEffect();
    } while(a < 10)

    a && useEffect();

    a.map(() => useEffect());
}

// Hook called indirectly
function helper1() {
    useEffect();
}

function helper2() {
    helper1();
}

function Component2({a}) {
    if (a) {
        helper2(1);
    }
}

```

# Diagnostics
```
invalid.js:4:9 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    2 │ function Component1({ a }) {
    3 │     if (a == 1) {
  > 4 │         useEffect();
      │         ^^^^^^^^^
    5 │     }
    6 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:9:13 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
     7 │     if (a == 1) {
     8 │         {
   > 9 │             useEffect();
       │             ^^^^^^^^^
    10 │         }
    11 │     }
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:14:9 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    13 │     for (;a < 10;) {
  > 14 │         useEffect();
       │         ^^^^^^^^^
    15 │     }
    16 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:18:9 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    17 │     for (const x of a) {
  > 18 │         useEffect();
       │         ^^^^^^^^^
    19 │     }
    20 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:22:9 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    21 │     for (const x in a) {
  > 22 │         useEffect();
       │         ^^^^^^^^^
    23 │     }
    24 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:26:9 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    25 │     while(a < 10) {
  > 26 │         useEffect();
       │         ^^^^^^^^^
    27 │     }
    28 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:30:9 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    29 │     do {
  > 30 │         useEffect();
       │         ^^^^^^^^^
    31 │     } while(a < 10)
    32 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:33:10 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    31 │     } while(a < 10)
    32 │ 
  > 33 │     a && useEffect();
       │          ^^^^^^^^^
    34 │ 
    35 │     a.map(() => useEffect());
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:35:17 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is not necessarily being called from the Top Level of the component function.
  
    33 │     a && useEffect();
    34 │ 
  > 35 │     a.map(() => useEffect());
       │                 ^^^^^^^^^
    36 │ }
    37 │ 
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```

```
invalid.js:40:5 lint/nursery/useHookAtTopLevel ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook is being called indirectly and it is not necessarily being called from the Top Level of the component function.
  
    38 │ // Hook called indirectly
    39 │ function helper1() {
  > 40 │     useEffect();
       │     ^^^^^^^^^
    41 │ }
    42 │ 
  
  i This is the call path until the hook.
  
    41 │ }
    42 │ 
  > 43 │ function helper2() {
       │                     
  > 44 │     helper1();
       │     ^^^^^^^^^
    45 │ }
    46 │ 
  
  i 
  
    47 │ function Component2({a}) {
  > 48 │     if (a) {
       │             
  > 49 │         helper2(1);
       │         ^^^^^^^^^^
    50 │     }
    51 │ }
  
  i For React to preserve state between calls, hooks needs to be called always in the same order.
  
  i See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level
  

```


