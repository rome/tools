---
source: crates/rome_js_analyze/tests/spec_tests.rs
assertion_line: 92
expression: invalid.ts
---
# Input
```js
// const contexts
const x/*before*/: /*inside*/ 1 /*after*/ = (1);

const x: 1n = 1n;
const x: -1n = -1n;
const x: false = false;
const x: false = !true;
const x: false = !1;
const x: true = true;
const x: true = !false;
const x: true = !0;
const x: null = null;
const x: 1 = +1;
const x: -1 = -1;
const x: 1e-5 = 1e-5;
const x: RegExp = /a/;
const x: "str" = "str";
const x: "str" = `str`; // constant template string
const x: "str2" = `str${f()}`;
const x: undefined = void f();

class X {
	readonly x: 1 = 1;
}

class X {
	constructor(readonly x: 1 = 1) {}
}

// non-const contexts
let x /*before*/: /*inside*/ number /*after*/ = (1);

let x: bigint = 1n;
let x: bigint = -1n;
let x: boolean = false;
let x: boolean = true;
let x: boolean = !false;
let x: boolean = !true;
let x: number = +1;
let x: number = -1;
let x: number = 1e-5;
let x: RegExp = /a/;
let x: string = "str";
let x: string = `str`;
let x: string = `str${f()}`;
let x: number = +"";
let x: boolean = !"";

function f(x: number = 1) {}

class X {
	x: number = 1;
}

class X {
	constructor(protected x: number = 1) {}
}

```

# Diagnostics
```
invalid.ts:2:18 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    1 │ // const contexts
  > 2 │ const x/*before*/: /*inside*/ 1 /*after*/ = (1);
      │                  ^^^^^^^^^^^^^^
    3 │ 
    4 │ const x: 1n = 1n;
  
  i Safe fix: Remove the type annotation.
  
    2 │ const·x/*before*/:·/*inside*/·1·/*after*/·=·(1);
      │                  --------------                 

```

```
invalid.ts:4:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    2 │ const x/*before*/: /*inside*/ 1 /*after*/ = (1);
    3 │ 
  > 4 │ const x: 1n = 1n;
      │        ^^^^
    5 │ const x: -1n = -1n;
    6 │ const x: false = false;
  
  i Safe fix: Remove the type annotation.
  
    4 │ const·x:·1n·=·1n;
      │        ----      

```

```
invalid.ts:5:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    4 │ const x: 1n = 1n;
  > 5 │ const x: -1n = -1n;
      │        ^^^^^
    6 │ const x: false = false;
    7 │ const x: false = !true;
  
  i Safe fix: Remove the type annotation.
  
    5 │ const·x:·-1n·=·-1n;
      │        -----       

```

```
invalid.ts:6:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    4 │ const x: 1n = 1n;
    5 │ const x: -1n = -1n;
  > 6 │ const x: false = false;
      │        ^^^^^^^
    7 │ const x: false = !true;
    8 │ const x: false = !1;
  
  i Safe fix: Remove the type annotation.
  
    6 │ const·x:·false·=·false;
      │        -------         

```

```
invalid.ts:7:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    5 │ const x: -1n = -1n;
    6 │ const x: false = false;
  > 7 │ const x: false = !true;
      │        ^^^^^^^
    8 │ const x: false = !1;
    9 │ const x: true = true;
  
  i Safe fix: Remove the type annotation.
  
    7 │ const·x:·false·=·!true;
      │        -------         

```

```
invalid.ts:8:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     6 │ const x: false = false;
     7 │ const x: false = !true;
   > 8 │ const x: false = !1;
       │        ^^^^^^^
     9 │ const x: true = true;
    10 │ const x: true = !false;
  
  i Safe fix: Remove the type annotation.
  
    8 │ const·x:·false·=·!1;
      │        -------      

```

```
invalid.ts:9:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     7 │ const x: false = !true;
     8 │ const x: false = !1;
   > 9 │ const x: true = true;
       │        ^^^^^^
    10 │ const x: true = !false;
    11 │ const x: true = !0;
  
  i Safe fix: Remove the type annotation.
  
    9 │ const·x:·true·=·true;
      │        ------        

```

```
invalid.ts:10:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     8 │ const x: false = !1;
     9 │ const x: true = true;
  > 10 │ const x: true = !false;
       │        ^^^^^^
    11 │ const x: true = !0;
    12 │ const x: null = null;
  
  i Safe fix: Remove the type annotation.
  
    10 │ const·x:·true·=·!false;
       │        ------          

```

```
invalid.ts:11:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
     9 │ const x: true = true;
    10 │ const x: true = !false;
  > 11 │ const x: true = !0;
       │        ^^^^^^
    12 │ const x: null = null;
    13 │ const x: 1 = +1;
  
  i Safe fix: Remove the type annotation.
  
    11 │ const·x:·true·=·!0;
       │        ------      

```

```
invalid.ts:12:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    10 │ const x: true = !false;
    11 │ const x: true = !0;
  > 12 │ const x: null = null;
       │        ^^^^^^
    13 │ const x: 1 = +1;
    14 │ const x: -1 = -1;
  
  i Safe fix: Remove the type annotation.
  
    12 │ const·x:·null·=·null;
       │        ------        

```

```
invalid.ts:13:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    11 │ const x: true = !0;
    12 │ const x: null = null;
  > 13 │ const x: 1 = +1;
       │        ^^^
    14 │ const x: -1 = -1;
    15 │ const x: 1e-5 = 1e-5;
  
  i Safe fix: Remove the type annotation.
  
    13 │ const·x:·1·=·+1;
       │        ---      

```

```
invalid.ts:14:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    12 │ const x: null = null;
    13 │ const x: 1 = +1;
  > 14 │ const x: -1 = -1;
       │        ^^^^
    15 │ const x: 1e-5 = 1e-5;
    16 │ const x: RegExp = /a/;
  
  i Safe fix: Remove the type annotation.
  
    14 │ const·x:·-1·=·-1;
       │        ----      

```

```
invalid.ts:15:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    13 │ const x: 1 = +1;
    14 │ const x: -1 = -1;
  > 15 │ const x: 1e-5 = 1e-5;
       │        ^^^^^^
    16 │ const x: RegExp = /a/;
    17 │ const x: "str" = "str";
  
  i Safe fix: Remove the type annotation.
  
    15 │ const·x:·1e-5·=·1e-5;
       │        ------        

```

```
invalid.ts:17:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    15 │ const x: 1e-5 = 1e-5;
    16 │ const x: RegExp = /a/;
  > 17 │ const x: "str" = "str";
       │        ^^^^^^^
    18 │ const x: "str" = `str`; // constant template string
    19 │ const x: "str2" = `str${f()}`;
  
  i Safe fix: Remove the type annotation.
  
    17 │ const·x:·"str"·=·"str";
       │        -------         

```

```
invalid.ts:18:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    16 │ const x: RegExp = /a/;
    17 │ const x: "str" = "str";
  > 18 │ const x: "str" = `str`; // constant template string
       │        ^^^^^^^
    19 │ const x: "str2" = `str${f()}`;
    20 │ const x: undefined = void f();
  
  i Safe fix: Remove the type annotation.
  
    18 │ const·x:·"str"·=·`str`;·//·constant·template·string
       │        -------                                     

```

```
invalid.ts:19:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    17 │ const x: "str" = "str";
    18 │ const x: "str" = `str`; // constant template string
  > 19 │ const x: "str2" = `str${f()}`;
       │        ^^^^^^^^
    20 │ const x: undefined = void f();
    21 │ 
  
  i Safe fix: Remove the type annotation.
  
    19 │ const·x:·"str2"·=·`str${f()}`;
       │        --------               

```

```
invalid.ts:20:8 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    18 │ const x: "str" = `str`; // constant template string
    19 │ const x: "str2" = `str${f()}`;
  > 20 │ const x: undefined = void f();
       │        ^^^^^^^^^^^
    21 │ 
    22 │ class X {
  
  i Safe fix: Remove the type annotation.
  
    20 │ const·x:·undefined·=·void·f();
       │        -----------            

```

```
invalid.ts:23:12 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    22 │ class X {
  > 23 │ 	readonly x: 1 = 1;
       │ 	          ^^^
    24 │ }
    25 │ 
  
  i Safe fix: Remove the type annotation.
  
    23 │ → readonly·x:·1·=·1;
       │             ---     

```

```
invalid.ts:27:24 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    26 │ class X {
  > 27 │ 	constructor(readonly x: 1 = 1) {}
       │ 	                      ^^^
    28 │ }
    29 │ 
  
  i Safe fix: Remove the type annotation.
  
    27 │ → constructor(readonly·x:·1·=·1)·{}
       │                         ---        

```

```
invalid.ts:31:17 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    30 │ // non-const contexts
  > 31 │ let x /*before*/: /*inside*/ number /*after*/ = (1);
       │                 ^^^^^^^^^^^^^^^^^^^
    32 │ 
    33 │ let x: bigint = 1n;
  
  i Safe fix: Remove the type annotation.
  
    31 │ let·x·/*before*/:·/*inside*/·number·/*after*/·=·(1);
       │                 -------------------                 

```

```
invalid.ts:33:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    31 │ let x /*before*/: /*inside*/ number /*after*/ = (1);
    32 │ 
  > 33 │ let x: bigint = 1n;
       │      ^^^^^^^^
    34 │ let x: bigint = -1n;
    35 │ let x: boolean = false;
  
  i Safe fix: Remove the type annotation.
  
    33 │ let·x:·bigint·=·1n;
       │      --------      

```

```
invalid.ts:34:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    33 │ let x: bigint = 1n;
  > 34 │ let x: bigint = -1n;
       │      ^^^^^^^^
    35 │ let x: boolean = false;
    36 │ let x: boolean = true;
  
  i Safe fix: Remove the type annotation.
  
    34 │ let·x:·bigint·=·-1n;
       │      --------       

```

```
invalid.ts:35:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    33 │ let x: bigint = 1n;
    34 │ let x: bigint = -1n;
  > 35 │ let x: boolean = false;
       │      ^^^^^^^^^
    36 │ let x: boolean = true;
    37 │ let x: boolean = !false;
  
  i Safe fix: Remove the type annotation.
  
    35 │ let·x:·boolean·=·false;
       │      ---------         

```

```
invalid.ts:36:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    34 │ let x: bigint = -1n;
    35 │ let x: boolean = false;
  > 36 │ let x: boolean = true;
       │      ^^^^^^^^^
    37 │ let x: boolean = !false;
    38 │ let x: boolean = !true;
  
  i Safe fix: Remove the type annotation.
  
    36 │ let·x:·boolean·=·true;
       │      ---------        

```

```
invalid.ts:37:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    35 │ let x: boolean = false;
    36 │ let x: boolean = true;
  > 37 │ let x: boolean = !false;
       │      ^^^^^^^^^
    38 │ let x: boolean = !true;
    39 │ let x: number = +1;
  
  i Safe fix: Remove the type annotation.
  
    37 │ let·x:·boolean·=·!false;
       │      ---------          

```

```
invalid.ts:38:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    36 │ let x: boolean = true;
    37 │ let x: boolean = !false;
  > 38 │ let x: boolean = !true;
       │      ^^^^^^^^^
    39 │ let x: number = +1;
    40 │ let x: number = -1;
  
  i Safe fix: Remove the type annotation.
  
    38 │ let·x:·boolean·=·!true;
       │      ---------         

```

```
invalid.ts:39:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    37 │ let x: boolean = !false;
    38 │ let x: boolean = !true;
  > 39 │ let x: number = +1;
       │      ^^^^^^^^
    40 │ let x: number = -1;
    41 │ let x: number = 1e-5;
  
  i Safe fix: Remove the type annotation.
  
    39 │ let·x:·number·=·+1;
       │      --------      

```

```
invalid.ts:40:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    38 │ let x: boolean = !true;
    39 │ let x: number = +1;
  > 40 │ let x: number = -1;
       │      ^^^^^^^^
    41 │ let x: number = 1e-5;
    42 │ let x: RegExp = /a/;
  
  i Safe fix: Remove the type annotation.
  
    40 │ let·x:·number·=·-1;
       │      --------      

```

```
invalid.ts:41:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    39 │ let x: number = +1;
    40 │ let x: number = -1;
  > 41 │ let x: number = 1e-5;
       │      ^^^^^^^^
    42 │ let x: RegExp = /a/;
    43 │ let x: string = "str";
  
  i Safe fix: Remove the type annotation.
  
    41 │ let·x:·number·=·1e-5;
       │      --------        

```

```
invalid.ts:43:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    41 │ let x: number = 1e-5;
    42 │ let x: RegExp = /a/;
  > 43 │ let x: string = "str";
       │      ^^^^^^^^
    44 │ let x: string = `str`;
    45 │ let x: string = `str${f()}`;
  
  i Safe fix: Remove the type annotation.
  
    43 │ let·x:·string·=·"str";
       │      --------         

```

```
invalid.ts:44:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    42 │ let x: RegExp = /a/;
    43 │ let x: string = "str";
  > 44 │ let x: string = `str`;
       │      ^^^^^^^^
    45 │ let x: string = `str${f()}`;
    46 │ let x: number = +"";
  
  i Safe fix: Remove the type annotation.
  
    44 │ let·x:·string·=·`str`;
       │      --------         

```

```
invalid.ts:45:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    43 │ let x: string = "str";
    44 │ let x: string = `str`;
  > 45 │ let x: string = `str${f()}`;
       │      ^^^^^^^^
    46 │ let x: number = +"";
    47 │ let x: boolean = !"";
  
  i Safe fix: Remove the type annotation.
  
    45 │ let·x:·string·=·`str${f()}`;
       │      --------               

```

```
invalid.ts:46:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    44 │ let x: string = `str`;
    45 │ let x: string = `str${f()}`;
  > 46 │ let x: number = +"";
       │      ^^^^^^^^
    47 │ let x: boolean = !"";
    48 │ 
  
  i Safe fix: Remove the type annotation.
  
    46 │ let·x:·number·=·+"";
       │      --------       

```

```
invalid.ts:47:6 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    45 │ let x: string = `str${f()}`;
    46 │ let x: number = +"";
  > 47 │ let x: boolean = !"";
       │      ^^^^^^^^^
    48 │ 
    49 │ function f(x: number = 1) {}
  
  i Safe fix: Remove the type annotation.
  
    47 │ let·x:·boolean·=·!"";
       │      ---------       

```

```
invalid.ts:49:13 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    47 │ let x: boolean = !"";
    48 │ 
  > 49 │ function f(x: number = 1) {}
       │             ^^^^^^^^
    50 │ 
    51 │ class X {
  
  i Safe fix: Remove the type annotation.
  
    49 │ function·f(x:·number·=·1)·{}
       │             --------        

```

```
invalid.ts:52:3 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    51 │ class X {
  > 52 │ 	x: number = 1;
       │ 	 ^^^^^^^^
    53 │ }
    54 │ 
  
  i Safe fix: Remove the type annotation.
  
    52 │ → x:·number·=·1;
       │    --------     

```

```
invalid.ts:56:25 lint/nursery/noInferrableTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This type annotation is trivially inferred from its initialization.
  
    55 │ class X {
  > 56 │ 	constructor(protected x: number = 1) {}
       │ 	                       ^^^^^^^^
    57 │ }
    58 │ 
  
  i Safe fix: Remove the type annotation.
  
    56 │ → constructor(protected·x:·number·=·1)·{}
       │                          --------        

```


