---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: missingDependenciesInvalid.js
---
# Input
```js
function MyComponent() {
    let a = 1;
    const b = a + 1;
    useEffect(() => {
      console.log(a, b);
    });
  }

// interaction with other react hooks

function MyComponent2() {
  const [name, setName] = useState(0);
  const [state, dispatch] = useReducer();
  const memoizedCallback = useCallback();
  const memoizedValue = useMemo();
  const deferredValue = useDeferredValue(value);
  const [isPending, startTransition] = useTransition();
  useEffect(() => {
      console.log(name);
      setName(1);

      console.log(state);
      dispatch(1);

      console.log(memoizedCallback);
      console.log(memoizedValue);
      console.log(deferredValue);

      console.log(isPending);
      startTransition();
  }, []);
}

// all hooks with dependencies

function MyComponent3() {
  let a = 1;
  useEffect(() => console.log(a));
  useCallback(() => console.log(a));
  useMemo(() => console.log(a));
  useImperativeHandle(ref, () => console.log(a));
  useLayoutEffect(() => console.log(a));
  useInsertionEffect(() => console.log(a));
}

// inner closures

function MyComponent4() {
  let a = 1;
  useEffect(() => {
      return () => console.log(a)
  }, []);
}

// same variable multiple times

function MyComponent5() {
  let a = 1;
  useEffect(() => {
    console.log(a);
    return () => console.log(a);
  }, []);
}

// Capturing an object property

function MyComponent1() {
  let someObj = getObj();
  useEffect(() => {
      console.log(someObj.name)
  });
}

```

# Diagnostics
```
missingDependenciesInvalid.js:4:5 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    2 │     let a = 1;
    3 │     const b = a + 1;
  > 4 │     useEffect(() => {
      │     ^^^^^^^^^
    5 │       console.log(a, b);
    6 │     });
  
  i This dependency is not specified in the hook dependency list.
  
    3 │     const b = a + 1;
    4 │     useEffect(() => {
  > 5 │       console.log(a, b);
      │                   ^
    6 │     });
    7 │   }
  

```

```
missingDependenciesInvalid.js:4:5 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    2 │     let a = 1;
    3 │     const b = a + 1;
  > 4 │     useEffect(() => {
      │     ^^^^^^^^^
    5 │       console.log(a, b);
    6 │     });
  
  i This dependency is not specified in the hook dependency list.
  
    3 │     const b = a + 1;
    4 │     useEffect(() => {
  > 5 │       console.log(a, b);
      │                      ^
    6 │     });
    7 │   }
  

```

```
missingDependenciesInvalid.js:18:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    16 │   const deferredValue = useDeferredValue(value);
    17 │   const [isPending, startTransition] = useTransition();
  > 18 │   useEffect(() => {
       │   ^^^^^^^^^
    19 │       console.log(name);
    20 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    25 │       console.log(memoizedCallback);
    26 │       console.log(memoizedValue);
  > 27 │       console.log(deferredValue);
       │                   ^^^^^^^^^^^^^
    28 │ 
    29 │       console.log(isPending);
  

```

```
missingDependenciesInvalid.js:18:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    16 │   const deferredValue = useDeferredValue(value);
    17 │   const [isPending, startTransition] = useTransition();
  > 18 │   useEffect(() => {
       │   ^^^^^^^^^
    19 │       console.log(name);
    20 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    23 │       dispatch(1);
    24 │ 
  > 25 │       console.log(memoizedCallback);
       │                   ^^^^^^^^^^^^^^^^
    26 │       console.log(memoizedValue);
    27 │       console.log(deferredValue);
  

```

```
missingDependenciesInvalid.js:18:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    16 │   const deferredValue = useDeferredValue(value);
    17 │   const [isPending, startTransition] = useTransition();
  > 18 │   useEffect(() => {
       │   ^^^^^^^^^
    19 │       console.log(name);
    20 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    20 │       setName(1);
    21 │ 
  > 22 │       console.log(state);
       │                   ^^^^^
    23 │       dispatch(1);
    24 │ 
  

```

```
missingDependenciesInvalid.js:18:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    16 │   const deferredValue = useDeferredValue(value);
    17 │   const [isPending, startTransition] = useTransition();
  > 18 │   useEffect(() => {
       │   ^^^^^^^^^
    19 │       console.log(name);
    20 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    17 │   const [isPending, startTransition] = useTransition();
    18 │   useEffect(() => {
  > 19 │       console.log(name);
       │                   ^^^^
    20 │       setName(1);
    21 │ 
  

```

```
missingDependenciesInvalid.js:18:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    16 │   const deferredValue = useDeferredValue(value);
    17 │   const [isPending, startTransition] = useTransition();
  > 18 │   useEffect(() => {
       │   ^^^^^^^^^
    19 │       console.log(name);
    20 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    27 │       console.log(deferredValue);
    28 │ 
  > 29 │       console.log(isPending);
       │                   ^^^^^^^^^
    30 │       startTransition();
    31 │   }, []);
  

```

```
missingDependenciesInvalid.js:18:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    16 │   const deferredValue = useDeferredValue(value);
    17 │   const [isPending, startTransition] = useTransition();
  > 18 │   useEffect(() => {
       │   ^^^^^^^^^
    19 │       console.log(name);
    20 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    25 │       console.log(memoizedCallback);
  > 26 │       console.log(memoizedValue);
       │                   ^^^^^^^^^^^^^
    27 │       console.log(deferredValue);
    28 │ 
  

```

```
missingDependenciesInvalid.js:38:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    36 │ function MyComponent3() {
    37 │   let a = 1;
  > 38 │   useEffect(() => console.log(a));
       │   ^^^^^^^^^
    39 │   useCallback(() => console.log(a));
    40 │   useMemo(() => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    36 │ function MyComponent3() {
    37 │   let a = 1;
  > 38 │   useEffect(() => console.log(a));
       │                               ^
    39 │   useCallback(() => console.log(a));
    40 │   useMemo(() => console.log(a));
  

```

```
missingDependenciesInvalid.js:39:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    37 │   let a = 1;
    38 │   useEffect(() => console.log(a));
  > 39 │   useCallback(() => console.log(a));
       │   ^^^^^^^^^^^
    40 │   useMemo(() => console.log(a));
    41 │   useImperativeHandle(ref, () => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    37 │   let a = 1;
    38 │   useEffect(() => console.log(a));
  > 39 │   useCallback(() => console.log(a));
       │                                 ^
    40 │   useMemo(() => console.log(a));
    41 │   useImperativeHandle(ref, () => console.log(a));
  

```

```
missingDependenciesInvalid.js:40:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    38 │   useEffect(() => console.log(a));
    39 │   useCallback(() => console.log(a));
  > 40 │   useMemo(() => console.log(a));
       │   ^^^^^^^
    41 │   useImperativeHandle(ref, () => console.log(a));
    42 │   useLayoutEffect(() => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    38 │   useEffect(() => console.log(a));
    39 │   useCallback(() => console.log(a));
  > 40 │   useMemo(() => console.log(a));
       │                             ^
    41 │   useImperativeHandle(ref, () => console.log(a));
    42 │   useLayoutEffect(() => console.log(a));
  

```

```
missingDependenciesInvalid.js:41:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    39 │   useCallback(() => console.log(a));
    40 │   useMemo(() => console.log(a));
  > 41 │   useImperativeHandle(ref, () => console.log(a));
       │   ^^^^^^^^^^^^^^^^^^^
    42 │   useLayoutEffect(() => console.log(a));
    43 │   useInsertionEffect(() => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    39 │   useCallback(() => console.log(a));
    40 │   useMemo(() => console.log(a));
  > 41 │   useImperativeHandle(ref, () => console.log(a));
       │                                              ^
    42 │   useLayoutEffect(() => console.log(a));
    43 │   useInsertionEffect(() => console.log(a));
  

```

```
missingDependenciesInvalid.js:42:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    40 │   useMemo(() => console.log(a));
    41 │   useImperativeHandle(ref, () => console.log(a));
  > 42 │   useLayoutEffect(() => console.log(a));
       │   ^^^^^^^^^^^^^^^
    43 │   useInsertionEffect(() => console.log(a));
    44 │ }
  
  i This dependency is not specified in the hook dependency list.
  
    40 │   useMemo(() => console.log(a));
    41 │   useImperativeHandle(ref, () => console.log(a));
  > 42 │   useLayoutEffect(() => console.log(a));
       │                                     ^
    43 │   useInsertionEffect(() => console.log(a));
    44 │ }
  

```

```
missingDependenciesInvalid.js:43:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    41 │   useImperativeHandle(ref, () => console.log(a));
    42 │   useLayoutEffect(() => console.log(a));
  > 43 │   useInsertionEffect(() => console.log(a));
       │   ^^^^^^^^^^^^^^^^^^
    44 │ }
    45 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    41 │   useImperativeHandle(ref, () => console.log(a));
    42 │   useLayoutEffect(() => console.log(a));
  > 43 │   useInsertionEffect(() => console.log(a));
       │                                        ^
    44 │ }
    45 │ 
  

```

```
missingDependenciesInvalid.js:50:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    48 │ function MyComponent4() {
    49 │   let a = 1;
  > 50 │   useEffect(() => {
       │   ^^^^^^^^^
    51 │       return () => console.log(a)
    52 │   }, []);
  
  i This dependency is not specified in the hook dependency list.
  
    49 │   let a = 1;
    50 │   useEffect(() => {
  > 51 │       return () => console.log(a)
       │                                ^
    52 │   }, []);
    53 │ }
  

```

```
missingDependenciesInvalid.js:59:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    57 │ function MyComponent5() {
    58 │   let a = 1;
  > 59 │   useEffect(() => {
       │   ^^^^^^^^^
    60 │     console.log(a);
    61 │     return () => console.log(a);
  
  i This dependency is not specified in the hook dependency list.
  
    58 │   let a = 1;
    59 │   useEffect(() => {
  > 60 │     console.log(a);
       │                 ^
    61 │     return () => console.log(a);
    62 │   }, []);
  
  i This dependency is not specified in the hook dependency list.
  
    59 │   useEffect(() => {
    60 │     console.log(a);
  > 61 │     return () => console.log(a);
       │                              ^
    62 │   }, []);
    63 │ }
  

```

```
missingDependenciesInvalid.js:69:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    67 │ function MyComponent1() {
    68 │   let someObj = getObj();
  > 69 │   useEffect(() => {
       │   ^^^^^^^^^
    70 │       console.log(someObj.name)
    71 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    68 │   let someObj = getObj();
    69 │   useEffect(() => {
  > 70 │       console.log(someObj.name)
       │                   ^^^^^^^^^^^^
    71 │   });
    72 │ }
  

```


