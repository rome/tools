---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: missingDependenciesInvalid.js
---
# Input
```js
import React from "react";
import { useEffect, useCallback, useMemo, useLayoutEffect, useInsertionEffect, useImperativeHandle } from "react";

function MyComponent1() {
    let a = 1;
    const b = a + 1;
    useEffect(() => {
      console.log(a, b);
    });
}

// interaction with other react hooks

function MyComponent2() {
  const [name, setName] = useState(0);
  const [state, dispatch] = useReducer();
  const memoizedCallback = useCallback();
  const memoizedValue = useMemo();
  const deferredValue = useDeferredValue(value);
  const [isPending, startTransition] = useTransition();
  useEffect(() => {
      console.log(name);
      setName(1);

      console.log(state);
      dispatch(1);

      console.log(memoizedCallback);
      console.log(memoizedValue);
      console.log(deferredValue);

      console.log(isPending);
      startTransition();
  }, []);
}

// all hooks with dependencies

function MyComponent3() {
  let a = 1;
  useEffect(() => console.log(a));
  useCallback(() => console.log(a));
  useMemo(() => console.log(a));
  useImperativeHandle(ref, () => console.log(a));
  useLayoutEffect(() => console.log(a));
  useInsertionEffect(() => console.log(a));
}

// inner closures

function MyComponent4() {
  let a = 1;
  useEffect(() => {
      return () => console.log(a)
  }, []);
}

// same variable multiple times

function MyComponent5() {
  let a = 1;
  useEffect(() => {
    console.log(a);
    return () => console.log(a);
  }, []);
}

// Capturing an object property

function MyComponent6() {
  let someObj = getObj();
  useEffect(() => {
      console.log(someObj.name)
  });
}

const MyComponent7 = React.memo(function ({ a }) {
  useEffect(() => {
      console.log(a);
  });
});

const MyComponent8 = React.memo(({ a }) => {
  useEffect(() => {
      console.log(a);
  });
});

// exported functions
export function MyComponent9() {
  let a = 1;
  useEffect(() => {
      console.log(a);
  });
}

export default function MyComponent10() {
  let a = 1;
  useEffect(() => {
      console.log(a);
  });
}

// named function
function MyComponent11() {
  let a = 1;
  useEffect(function inner() {
      console.log(a);
  });
}

function MyComponent12() {
  let a = 1;
  useEffect(async function inner() {
      console.log(a);
  });
}

// React.useXXX case
function MyComponent13() {
  let a = 1;
  React.useEffect(() => {
      console.log(a);
  });
}

```

# Diagnostics
```
missingDependenciesInvalid.js:7:5 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    5 │     let a = 1;
    6 │     const b = a + 1;
  > 7 │     useEffect(() => {
      │     ^^^^^^^^^
    8 │       console.log(a, b);
    9 │     });
  
  i This dependency is not specified in the hook dependency list.
  
     6 │     const b = a + 1;
     7 │     useEffect(() => {
   > 8 │       console.log(a, b);
       │                   ^
     9 │     });
    10 │ }
  

```

```
missingDependenciesInvalid.js:7:5 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    5 │     let a = 1;
    6 │     const b = a + 1;
  > 7 │     useEffect(() => {
      │     ^^^^^^^^^
    8 │       console.log(a, b);
    9 │     });
  
  i This dependency is not specified in the hook dependency list.
  
     6 │     const b = a + 1;
     7 │     useEffect(() => {
   > 8 │       console.log(a, b);
       │                      ^
     9 │     });
    10 │ }
  

```

```
missingDependenciesInvalid.js:21:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    19 │   const deferredValue = useDeferredValue(value);
    20 │   const [isPending, startTransition] = useTransition();
  > 21 │   useEffect(() => {
       │   ^^^^^^^^^
    22 │       console.log(name);
    23 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    28 │       console.log(memoizedCallback);
    29 │       console.log(memoizedValue);
  > 30 │       console.log(deferredValue);
       │                   ^^^^^^^^^^^^^
    31 │ 
    32 │       console.log(isPending);
  

```

```
missingDependenciesInvalid.js:21:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    19 │   const deferredValue = useDeferredValue(value);
    20 │   const [isPending, startTransition] = useTransition();
  > 21 │   useEffect(() => {
       │   ^^^^^^^^^
    22 │       console.log(name);
    23 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    26 │       dispatch(1);
    27 │ 
  > 28 │       console.log(memoizedCallback);
       │                   ^^^^^^^^^^^^^^^^
    29 │       console.log(memoizedValue);
    30 │       console.log(deferredValue);
  

```

```
missingDependenciesInvalid.js:21:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    19 │   const deferredValue = useDeferredValue(value);
    20 │   const [isPending, startTransition] = useTransition();
  > 21 │   useEffect(() => {
       │   ^^^^^^^^^
    22 │       console.log(name);
    23 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    23 │       setName(1);
    24 │ 
  > 25 │       console.log(state);
       │                   ^^^^^
    26 │       dispatch(1);
    27 │ 
  

```

```
missingDependenciesInvalid.js:21:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    19 │   const deferredValue = useDeferredValue(value);
    20 │   const [isPending, startTransition] = useTransition();
  > 21 │   useEffect(() => {
       │   ^^^^^^^^^
    22 │       console.log(name);
    23 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    20 │   const [isPending, startTransition] = useTransition();
    21 │   useEffect(() => {
  > 22 │       console.log(name);
       │                   ^^^^
    23 │       setName(1);
    24 │ 
  

```

```
missingDependenciesInvalid.js:21:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    19 │   const deferredValue = useDeferredValue(value);
    20 │   const [isPending, startTransition] = useTransition();
  > 21 │   useEffect(() => {
       │   ^^^^^^^^^
    22 │       console.log(name);
    23 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    30 │       console.log(deferredValue);
    31 │ 
  > 32 │       console.log(isPending);
       │                   ^^^^^^^^^
    33 │       startTransition();
    34 │   }, []);
  

```

```
missingDependenciesInvalid.js:21:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    19 │   const deferredValue = useDeferredValue(value);
    20 │   const [isPending, startTransition] = useTransition();
  > 21 │   useEffect(() => {
       │   ^^^^^^^^^
    22 │       console.log(name);
    23 │       setName(1);
  
  i This dependency is not specified in the hook dependency list.
  
    28 │       console.log(memoizedCallback);
  > 29 │       console.log(memoizedValue);
       │                   ^^^^^^^^^^^^^
    30 │       console.log(deferredValue);
    31 │ 
  

```

```
missingDependenciesInvalid.js:41:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    39 │ function MyComponent3() {
    40 │   let a = 1;
  > 41 │   useEffect(() => console.log(a));
       │   ^^^^^^^^^
    42 │   useCallback(() => console.log(a));
    43 │   useMemo(() => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    39 │ function MyComponent3() {
    40 │   let a = 1;
  > 41 │   useEffect(() => console.log(a));
       │                               ^
    42 │   useCallback(() => console.log(a));
    43 │   useMemo(() => console.log(a));
  

```

```
missingDependenciesInvalid.js:42:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    40 │   let a = 1;
    41 │   useEffect(() => console.log(a));
  > 42 │   useCallback(() => console.log(a));
       │   ^^^^^^^^^^^
    43 │   useMemo(() => console.log(a));
    44 │   useImperativeHandle(ref, () => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    40 │   let a = 1;
    41 │   useEffect(() => console.log(a));
  > 42 │   useCallback(() => console.log(a));
       │                                 ^
    43 │   useMemo(() => console.log(a));
    44 │   useImperativeHandle(ref, () => console.log(a));
  

```

```
missingDependenciesInvalid.js:43:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    41 │   useEffect(() => console.log(a));
    42 │   useCallback(() => console.log(a));
  > 43 │   useMemo(() => console.log(a));
       │   ^^^^^^^
    44 │   useImperativeHandle(ref, () => console.log(a));
    45 │   useLayoutEffect(() => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    41 │   useEffect(() => console.log(a));
    42 │   useCallback(() => console.log(a));
  > 43 │   useMemo(() => console.log(a));
       │                             ^
    44 │   useImperativeHandle(ref, () => console.log(a));
    45 │   useLayoutEffect(() => console.log(a));
  

```

```
missingDependenciesInvalid.js:44:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    42 │   useCallback(() => console.log(a));
    43 │   useMemo(() => console.log(a));
  > 44 │   useImperativeHandle(ref, () => console.log(a));
       │   ^^^^^^^^^^^^^^^^^^^
    45 │   useLayoutEffect(() => console.log(a));
    46 │   useInsertionEffect(() => console.log(a));
  
  i This dependency is not specified in the hook dependency list.
  
    42 │   useCallback(() => console.log(a));
    43 │   useMemo(() => console.log(a));
  > 44 │   useImperativeHandle(ref, () => console.log(a));
       │                                              ^
    45 │   useLayoutEffect(() => console.log(a));
    46 │   useInsertionEffect(() => console.log(a));
  

```

```
missingDependenciesInvalid.js:45:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    43 │   useMemo(() => console.log(a));
    44 │   useImperativeHandle(ref, () => console.log(a));
  > 45 │   useLayoutEffect(() => console.log(a));
       │   ^^^^^^^^^^^^^^^
    46 │   useInsertionEffect(() => console.log(a));
    47 │ }
  
  i This dependency is not specified in the hook dependency list.
  
    43 │   useMemo(() => console.log(a));
    44 │   useImperativeHandle(ref, () => console.log(a));
  > 45 │   useLayoutEffect(() => console.log(a));
       │                                     ^
    46 │   useInsertionEffect(() => console.log(a));
    47 │ }
  

```

```
missingDependenciesInvalid.js:46:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    44 │   useImperativeHandle(ref, () => console.log(a));
    45 │   useLayoutEffect(() => console.log(a));
  > 46 │   useInsertionEffect(() => console.log(a));
       │   ^^^^^^^^^^^^^^^^^^
    47 │ }
    48 │ 
  
  i This dependency is not specified in the hook dependency list.
  
    44 │   useImperativeHandle(ref, () => console.log(a));
    45 │   useLayoutEffect(() => console.log(a));
  > 46 │   useInsertionEffect(() => console.log(a));
       │                                        ^
    47 │ }
    48 │ 
  

```

```
missingDependenciesInvalid.js:53:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    51 │ function MyComponent4() {
    52 │   let a = 1;
  > 53 │   useEffect(() => {
       │   ^^^^^^^^^
    54 │       return () => console.log(a)
    55 │   }, []);
  
  i This dependency is not specified in the hook dependency list.
  
    52 │   let a = 1;
    53 │   useEffect(() => {
  > 54 │       return () => console.log(a)
       │                                ^
    55 │   }, []);
    56 │ }
  

```

```
missingDependenciesInvalid.js:62:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    60 │ function MyComponent5() {
    61 │   let a = 1;
  > 62 │   useEffect(() => {
       │   ^^^^^^^^^
    63 │     console.log(a);
    64 │     return () => console.log(a);
  
  i This dependency is not specified in the hook dependency list.
  
    61 │   let a = 1;
    62 │   useEffect(() => {
  > 63 │     console.log(a);
       │                 ^
    64 │     return () => console.log(a);
    65 │   }, []);
  
  i This dependency is not specified in the hook dependency list.
  
    62 │   useEffect(() => {
    63 │     console.log(a);
  > 64 │     return () => console.log(a);
       │                              ^
    65 │   }, []);
    66 │ }
  

```

```
missingDependenciesInvalid.js:72:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    70 │ function MyComponent6() {
    71 │   let someObj = getObj();
  > 72 │   useEffect(() => {
       │   ^^^^^^^^^
    73 │       console.log(someObj.name)
    74 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    71 │   let someObj = getObj();
    72 │   useEffect(() => {
  > 73 │       console.log(someObj.name)
       │                   ^^^^^^^^^^^^
    74 │   });
    75 │ }
  

```

```
missingDependenciesInvalid.js:78:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    77 │ const MyComponent7 = React.memo(function ({ a }) {
  > 78 │   useEffect(() => {
       │   ^^^^^^^^^
    79 │       console.log(a);
    80 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    77 │ const MyComponent7 = React.memo(function ({ a }) {
    78 │   useEffect(() => {
  > 79 │       console.log(a);
       │                   ^
    80 │   });
    81 │ });
  

```

```
missingDependenciesInvalid.js:84:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    83 │ const MyComponent8 = React.memo(({ a }) => {
  > 84 │   useEffect(() => {
       │   ^^^^^^^^^
    85 │       console.log(a);
    86 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    83 │ const MyComponent8 = React.memo(({ a }) => {
    84 │   useEffect(() => {
  > 85 │       console.log(a);
       │                   ^
    86 │   });
    87 │ });
  

```

```
missingDependenciesInvalid.js:92:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    90 │ export function MyComponent9() {
    91 │   let a = 1;
  > 92 │   useEffect(() => {
       │   ^^^^^^^^^
    93 │       console.log(a);
    94 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    91 │   let a = 1;
    92 │   useEffect(() => {
  > 93 │       console.log(a);
       │                   ^
    94 │   });
    95 │ }
  

```

```
missingDependenciesInvalid.js:99:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
     97 │ export default function MyComponent10() {
     98 │   let a = 1;
   > 99 │   useEffect(() => {
        │   ^^^^^^^^^
    100 │       console.log(a);
    101 │   });
  
  i This dependency is not specified in the hook dependency list.
  
     98 │   let a = 1;
     99 │   useEffect(() => {
  > 100 │       console.log(a);
        │                   ^
    101 │   });
    102 │ }
  

```

```
missingDependenciesInvalid.js:107:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    105 │ function MyComponent11() {
    106 │   let a = 1;
  > 107 │   useEffect(function inner() {
        │   ^^^^^^^^^
    108 │       console.log(a);
    109 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    106 │   let a = 1;
    107 │   useEffect(function inner() {
  > 108 │       console.log(a);
        │                   ^
    109 │   });
    110 │ }
  

```

```
missingDependenciesInvalid.js:114:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    112 │ function MyComponent12() {
    113 │   let a = 1;
  > 114 │   useEffect(async function inner() {
        │   ^^^^^^^^^
    115 │       console.log(a);
    116 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    113 │   let a = 1;
    114 │   useEffect(async function inner() {
  > 115 │       console.log(a);
        │                   ^
    116 │   });
    117 │ }
  

```

```
missingDependenciesInvalid.js:122:9 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    120 │ function MyComponent13() {
    121 │   let a = 1;
  > 122 │   React.useEffect(() => {
        │         ^^^^^^^^^
    123 │       console.log(a);
    124 │   });
  
  i This dependency is not specified in the hook dependency list.
  
    121 │   let a = 1;
    122 │   React.useEffect(() => {
  > 123 │       console.log(a);
        │                   ^
    124 │   });
    125 │ }
  

```


