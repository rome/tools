---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: extraDependenciesInvalid.js
---
# Input
```js
function MyComponent() {
  let a = 1;
  useEffect(() => {}, [a]);
}

// multiple extra dependencies

function MyComponent2() {
  let a = 1, b = 1;
  useEffect(() => {}, [a, b]);
}

// extra const

function MyComponent2() {
  const a = 1;
  useEffect(() => {}, [a]);
}

// dependency more deep than capture
// Note: This can be a valid case, but there is
// no way for the lint rule to know

function MyComponent1() {
  let someObj = getObj();
  useEffect(() => {
      console.log(someObj)
  }, [someObj.id]);
}
```

# Diagnostics
```
extraDependenciesInvalid.js:3:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook specifies more dependencies than necessary.
  
    1 │ function MyComponent() {
    2 │   let a = 1;
  > 3 │   useEffect(() => {}, [a]);
      │   ^^^^^^^^^
    4 │ }
    5 │ 
  
  i This dependency can be removed from the list.
  
    1 │ function MyComponent() {
    2 │   let a = 1;
  > 3 │   useEffect(() => {}, [a]);
      │                        ^
    4 │ }
    5 │ 
  

```

```
extraDependenciesInvalid.js:10:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook specifies more dependencies than necessary.
  
     8 │ function MyComponent2() {
     9 │   let a = 1, b = 1;
  > 10 │   useEffect(() => {}, [a, b]);
       │   ^^^^^^^^^
    11 │ }
    12 │ 
  
  i This dependency can be removed from the list.
  
     8 │ function MyComponent2() {
     9 │   let a = 1, b = 1;
  > 10 │   useEffect(() => {}, [a, b]);
       │                        ^
    11 │ }
    12 │ 
  
  i This dependency can be removed from the list.
  
     8 │ function MyComponent2() {
     9 │   let a = 1, b = 1;
  > 10 │   useEffect(() => {}, [a, b]);
       │                           ^
    11 │ }
    12 │ 
  

```

```
extraDependenciesInvalid.js:17:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook specifies more dependencies than necessary.
  
    15 │ function MyComponent2() {
    16 │   const a = 1;
  > 17 │   useEffect(() => {}, [a]);
       │   ^^^^^^^^^
    18 │ }
    19 │ 
  
  i This dependency can be removed from the list.
  
    15 │ function MyComponent2() {
    16 │   const a = 1;
  > 17 │   useEffect(() => {}, [a]);
       │                        ^
    18 │ }
    19 │ 
  

```

```
extraDependenciesInvalid.js:26:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook specifies a dependency more specific that its captures
  
    24 │ function MyComponent1() {
    25 │   let someObj = getObj();
  > 26 │   useEffect(() => {
       │   ^^^^^^^^^
    27 │       console.log(someObj)
    28 │   }, [someObj.id]);
  
  i This capture is more generic than...
  
    25 │   let someObj = getObj();
    26 │   useEffect(() => {
  > 27 │       console.log(someObj)
       │                   ^^^^^^^
    28 │   }, [someObj.id]);
    29 │ }
  
  i ...this dependency.
  
    26 │   useEffect(() => {
    27 │       console.log(someObj)
  > 28 │   }, [someObj.id]);
       │       ^^^^^^^^^^
    29 │ }
  

```

```
extraDependenciesInvalid.js:26:3 lint/nursery/useExhaustiveDependencies ━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This hook do not specify all of its dependencies.
  
    24 │ function MyComponent1() {
    25 │   let someObj = getObj();
  > 26 │   useEffect(() => {
       │   ^^^^^^^^^
    27 │       console.log(someObj)
    28 │   }, [someObj.id]);
  
  i This dependency is not specified in the hook dependency list.
  
    25 │   let someObj = getObj();
    26 │   useEffect(() => {
  > 27 │       console.log(someObj)
       │                   ^^^^^^^
    28 │   }, [someObj.id]);
    29 │ }
  

```


