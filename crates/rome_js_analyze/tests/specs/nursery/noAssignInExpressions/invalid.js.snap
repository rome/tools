---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
{
	let a;
	(a += 1) + 2;
}

{
	let a, b;
	a = (b /*before*/ = /*after*/ 1) + 1;
}

{
	let a, b;
	a = ((b = 1), a);
}

{
	let a, b;
	a = (b = 1, b = 2);
}

{
	let a, b;
	a = (class {}, b = 2, function() {});
}

{
	let a;
	const b = (a = 0) ? 1 : 0;
}

{
	let a, b;
	const c = a && (b = 0) ? 1 : 0;
}

function f(a) {
	return (a = 5 + 1);
}

if (a = 0) {
}

if (a || (a = b)) {
}

if (a += b) {
}

while ((a = 0)) {}

while (a *= b) {}

do {} while ((a = a + 1));

do {} while (((a -= 1), a));

do {} while (((a = a + 1), a));

do {} while (a || (a = b));

for (let a = 5; (a = 0); i--) {}

for (let x = 0; (x += 1); ) {}

for (let l; typeof l === "undefined" ? (l = 0) : l; i++) {}

for (; (a = y); ) {}

for (let a = (b = 1); a < 5; ) {}

switch (foo) {
	case (a = b):
		bar();
}

switch (foo) {
	case baz + (a = b):
		bar();
}

((3496.29).bkufyydt = 2e308) ? foo : bar;

```

# Diagnostics
```
invalid.js:3:3 lint/nursery/noAssignInExpressions ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    1 │ {
    2 │ 	let a;
  > 3 │ 	(a += 1) + 2;
      │ 	 ^^^^^^
    4 │ }
    5 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  

```

```
invalid.js:8:7 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
     6 │ {
     7 │ 	let a, b;
   > 8 │ 	a = (b /*before*/ = /*after*/ 1) + 1;
       │ 	     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     9 │ }
    10 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    8 │ → a·=·(b·/*before*/·===·/*after*/·1)·+·1;
      │                      ++                  

```

```
invalid.js:13:8 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    11 │ {
    12 │ 	let a, b;
  > 13 │ 	a = ((b = 1), a);
       │ 	      ^^^^^
    14 │ }
    15 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    13 │ → a·=·((b·===·1),·a);
       │            ++        

```

```
invalid.js:18:7 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    16 │ {
    17 │ 	let a, b;
  > 18 │ 	a = (b = 1, b = 2);
       │ 	     ^^^^^
    19 │ }
    20 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    18 │ → a·=·(b·===·1,·b·=·2);
       │           ++           

```

```
invalid.js:18:14 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    16 │ {
    17 │ 	let a, b;
  > 18 │ 	a = (b = 1, b = 2);
       │ 	            ^^^^^
    19 │ }
    20 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    18 │ → a·=·(b·=·1,·b·===·2);
       │                  ++    

```

```
invalid.js:23:17 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    21 │ {
    22 │ 	let a, b;
  > 23 │ 	a = (class {}, b = 2, function() {});
       │ 	               ^^^^^
    24 │ }
    25 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    23 │ → a·=·(class·{},·b·===·2,·function()·{});
       │                     ++                   

```

```
invalid.js:28:13 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    26 │ {
    27 │ 	let a;
  > 28 │ 	const b = (a = 0) ? 1 : 0;
       │ 	           ^^^^^
    29 │ }
    30 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    28 │ → const·b·=·(a·===·0)·?·1·:·0;
       │                 ++            

```

```
invalid.js:33:18 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    31 │ {
    32 │ 	let a, b;
  > 33 │ 	const c = a && (b = 0) ? 1 : 0;
       │ 	                ^^^^^
    34 │ }
    35 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    33 │ → const·c·=·a·&&·(b·===·0)·?·1·:·0;
       │                      ++            

```

```
invalid.js:37:10 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    36 │ function f(a) {
  > 37 │ 	return (a = 5 + 1);
       │ 	        ^^^^^^^^^
    38 │ }
    39 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    37 │ → return·(a·===·5·+·1);
       │              ++        

```

```
invalid.js:40:5 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    38 │ }
    39 │ 
  > 40 │ if (a = 0) {
       │     ^^^^^
    41 │ }
    42 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    40 │ if·(a·===·0)·{
       │        ++     

```

```
invalid.js:43:11 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    41 │ }
    42 │ 
  > 43 │ if (a || (a = b)) {
       │           ^^^^^
    44 │ }
    45 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    43 │ if·(a·||·(a·===·b))·{
       │              ++      

```

```
invalid.js:46:5 lint/nursery/noAssignInExpressions ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    44 │ }
    45 │ 
  > 46 │ if (a += b) {
       │     ^^^^^^
    47 │ }
    48 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  

```

```
invalid.js:49:9 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    47 │ }
    48 │ 
  > 49 │ while ((a = 0)) {}
       │         ^^^^^
    50 │ 
    51 │ while (a *= b) {}
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    49 │ while·((a·===·0))·{}
       │            ++       

```

```
invalid.js:51:8 lint/nursery/noAssignInExpressions ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    49 │ while ((a = 0)) {}
    50 │ 
  > 51 │ while (a *= b) {}
       │        ^^^^^^
    52 │ 
    53 │ do {} while ((a = a + 1));
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  

```

```
invalid.js:53:15 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    51 │ while (a *= b) {}
    52 │ 
  > 53 │ do {} while ((a = a + 1));
       │               ^^^^^^^^^
    54 │ 
    55 │ do {} while (((a -= 1), a));
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    53 │ do·{}·while·((a·===·a·+·1));
       │                  ++         

```

```
invalid.js:55:16 lint/nursery/noAssignInExpressions ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    53 │ do {} while ((a = a + 1));
    54 │ 
  > 55 │ do {} while (((a -= 1), a));
       │                ^^^^^^
    56 │ 
    57 │ do {} while (((a = a + 1), a));
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  

```

```
invalid.js:57:16 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    55 │ do {} while (((a -= 1), a));
    56 │ 
  > 57 │ do {} while (((a = a + 1), a));
       │                ^^^^^^^^^
    58 │ 
    59 │ do {} while (a || (a = b));
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    57 │ do·{}·while·(((a·===·a·+·1),·a));
       │                   ++             

```

```
invalid.js:59:20 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    57 │ do {} while (((a = a + 1), a));
    58 │ 
  > 59 │ do {} while (a || (a = b));
       │                    ^^^^^
    60 │ 
    61 │ for (let a = 5; (a = 0); i--) {}
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    59 │ do·{}·while·(a·||·(a·===·b));
       │                       ++     

```

```
invalid.js:61:18 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    59 │ do {} while (a || (a = b));
    60 │ 
  > 61 │ for (let a = 5; (a = 0); i--) {}
       │                  ^^^^^
    62 │ 
    63 │ for (let x = 0; (x += 1); ) {}
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    61 │ for·(let·a·=·5;·(a·===·0);·i--)·{}
       │                     ++            

```

```
invalid.js:63:18 lint/nursery/noAssignInExpressions ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    61 │ for (let a = 5; (a = 0); i--) {}
    62 │ 
  > 63 │ for (let x = 0; (x += 1); ) {}
       │                  ^^^^^^
    64 │ 
    65 │ for (let l; typeof l === "undefined" ? (l = 0) : l; i++) {}
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  

```

```
invalid.js:65:41 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    63 │ for (let x = 0; (x += 1); ) {}
    64 │ 
  > 65 │ for (let l; typeof l === "undefined" ? (l = 0) : l; i++) {}
       │                                         ^^^^^
    66 │ 
    67 │ for (; (a = y); ) {}
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    65 │ for·(let·l;·typeof·l·===·"undefined"·?·(l·===·0)·:·l;·i++)·{}
       │                                            ++                

```

```
invalid.js:67:9 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    65 │ for (let l; typeof l === "undefined" ? (l = 0) : l; i++) {}
    66 │ 
  > 67 │ for (; (a = y); ) {}
       │         ^^^^^
    68 │ 
    69 │ for (let a = (b = 1); a < 5; ) {}
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    67 │ for·(;·(a·===·y);·)·{}
       │            ++         

```

```
invalid.js:69:15 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    67 │ for (; (a = y); ) {}
    68 │ 
  > 69 │ for (let a = (b = 1); a < 5; ) {}
       │               ^^^^^
    70 │ 
    71 │ switch (foo) {
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    69 │ for·(let·a·=·(b·===·1);·a·<·5;·)·{}
       │                  ++                

```

```
invalid.js:72:8 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    71 │ switch (foo) {
  > 72 │ 	case (a = b):
       │ 	      ^^^^^
    73 │ 		bar();
    74 │ }
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    72 │ → case·(a·===·b):
       │            ++    

```

```
invalid.js:77:14 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    76 │ switch (foo) {
  > 77 │ 	case baz + (a = b):
       │ 	            ^^^^^
    78 │ 		bar();
    79 │ }
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    77 │ → case·baz·+·(a·===·b):
       │                  ++    

```

```
invalid.js:81:2 lint/nursery/noAssignInExpressions  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! The assignment should not be in an expression.
  
    79 │ }
    80 │ 
  > 81 │ ((3496.29).bkufyydt = 2e308) ? foo : bar;
       │  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    82 │ 
  
  i The use of assignments in expressions is confusing.
    Expressions are often considered as side-effect free.
  
  i Suggested fix: Did you mean '==='?
  
    81 │ ((3496.29).bkufyydt·===·2e308)·?·foo·:·bar;
       │                      ++                    

```


