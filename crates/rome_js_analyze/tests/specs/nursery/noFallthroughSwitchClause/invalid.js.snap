---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
switch(bar) { case 0: a(); case 1: b() }

switch (bar) { case 0: a(); default: b(); case 1: c() }

```

# Diagnostics
```
invalid.js:1:15 lint/nursery/noFallthroughSwitchClause ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This case is falling through to the next case.
  
  > 1 │ switch(bar) { case 0: a(); case 1: b() }
      │               ^^^^^^^^^^^^
    2 │ 
    3 │ switch (bar) { case 0: a(); default: b(); case 1: c() }
  
  i Add a `break` statement to the end of this case to prevent fallthrough.
  

```

```
invalid.js:3:16 lint/nursery/noFallthroughSwitchClause ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This case is falling through to the next case.
  
    1 │ switch(bar) { case 0: a(); case 1: b() }
    2 │ 
  > 3 │ switch (bar) { case 0: a(); default: b(); case 1: c() }
      │                ^^^^^^^^^^^^
    4 │ 
  
  i Add a `break` statement to the end of this case to prevent fallthrough.
  

```

```
invalid.js:3:29 lint/nursery/noFallthroughSwitchClause ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This case is falling through to the next case.
  
    1 │ switch(bar) { case 0: a(); case 1: b() }
    2 │ 
  > 3 │ switch (bar) { case 0: a(); default: b(); case 1: c() }
      │                             ^^^^^^^^^^^^^
    4 │ 
  
  i Add a `break` statement to the end of this case to prevent fallthrough.
  

```


