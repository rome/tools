---
source: crates/rome_js_analyze/tests/spec_tests.rs
assertion_line: 73
expression: invalidClass.ts
---
# Input
```js
// @ts-nocheck
class C<T> extends Math.pow(a, b) implements Foo<T> {}
(class A extends Math.pow(a, b) implements Foo {})
(class A<T> extends (Math.pow(a, b)) {})
class C<T> extends (Math.pow(a, b)) implements Foo, Bar<T> {}

```

# Diagnostics
```
invalidClass.ts:2:20 lint/nursery/useExponentiationOperator  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use the '**' operator instead of 'Math.pow'.
  
    1 │ // @ts-nocheck
  > 2 │ class C<T> extends Math.pow(a, b) implements Foo<T> {}
      │                    ^^^^^^^^^^^^^^
    3 │ (class A extends Math.pow(a, b) implements Foo {})
    4 │ (class A<T> extends (Math.pow(a, b)) {})
  
  i Suggested fix: Use the '**' operator instead of 'Math.pow'.
  
    1 1 │   // @ts-nocheck
    2   │ - class·C<T>·extends·Math.pow(a,·b)·implements·Foo<T>·{}
      2 │ + class·C<T>·extends·(a**b)·implements·Foo<T>·{}
    3 3 │   (class A extends Math.pow(a, b) implements Foo {})
    4 4 │   (class A<T> extends (Math.pow(a, b)) {})
  

```

```
invalidClass.ts:3:18 lint/nursery/useExponentiationOperator  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use the '**' operator instead of 'Math.pow'.
  
    1 │ // @ts-nocheck
    2 │ class C<T> extends Math.pow(a, b) implements Foo<T> {}
  > 3 │ (class A extends Math.pow(a, b) implements Foo {})
      │                  ^^^^^^^^^^^^^^
    4 │ (class A<T> extends (Math.pow(a, b)) {})
    5 │ class C<T> extends (Math.pow(a, b)) implements Foo, Bar<T> {}
  
  i Suggested fix: Use the '**' operator instead of 'Math.pow'.
  
    1 1 │   // @ts-nocheck
    2 2 │   class C<T> extends Math.pow(a, b) implements Foo<T> {}
    3   │ - (class·A·extends·Math.pow(a,·b)·implements·Foo·{})
      3 │ + (class·A·extends·(a**b)·implements·Foo·{})
    4 4 │   (class A<T> extends (Math.pow(a, b)) {})
    5 5 │   class C<T> extends (Math.pow(a, b)) implements Foo, Bar<T> {}
  

```

```
invalidClass.ts:4:22 lint/nursery/useExponentiationOperator  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use the '**' operator instead of 'Math.pow'.
  
    2 │ class C<T> extends Math.pow(a, b) implements Foo<T> {}
    3 │ (class A extends Math.pow(a, b) implements Foo {})
  > 4 │ (class A<T> extends (Math.pow(a, b)) {})
      │                      ^^^^^^^^^^^^^^
    5 │ class C<T> extends (Math.pow(a, b)) implements Foo, Bar<T> {}
    6 │ 
  
  i Suggested fix: Use the '**' operator instead of 'Math.pow'.
  
    2 2 │   class C<T> extends Math.pow(a, b) implements Foo<T> {}
    3 3 │   (class A extends Math.pow(a, b) implements Foo {})
    4   │ - (class·A<T>·extends·(Math.pow(a,·b))·{})
      4 │ + (class·A<T>·extends·(a**b)·{})
    5 5 │   class C<T> extends (Math.pow(a, b)) implements Foo, Bar<T> {}
    6 6 │   
  

```

```
invalidClass.ts:5:21 lint/nursery/useExponentiationOperator  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Use the '**' operator instead of 'Math.pow'.
  
    3 │ (class A extends Math.pow(a, b) implements Foo {})
    4 │ (class A<T> extends (Math.pow(a, b)) {})
  > 5 │ class C<T> extends (Math.pow(a, b)) implements Foo, Bar<T> {}
      │                     ^^^^^^^^^^^^^^
    6 │ 
  
  i Suggested fix: Use the '**' operator instead of 'Math.pow'.
  
    3 3 │   (class A extends Math.pow(a, b) implements Foo {})
    4 4 │   (class A<T> extends (Math.pow(a, b)) {})
    5   │ - class·C<T>·extends·(Math.pow(a,·b))·implements·Foo,·Bar<T>·{}
      5 │ + class·C<T>·extends·(a**b)·implements·Foo,·Bar<T>·{}
    6 6 │   
  

```


