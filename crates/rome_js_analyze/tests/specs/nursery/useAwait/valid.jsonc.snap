---
source: crates/rome_js_analyze/tests/spec_tests.rs
assertion_line: 91
expression: valid.jsonc
---
# Input
```js
async function foo() { await doSomething() }
```

# Input
```js
(async function() { await doSomething() })
```

# Input
```js
async () => { await doSomething() }
```

# Input
```js
async () => await doSomething()
```

# Input
```js
({ async foo() { await doSomething() } })
```

# Input
```js
class A { async foo() { await doSomething() } }
```

# Input
```js
(class { async foo() { await doSomething() } })
```

# Input
```js
async function foo() { await (async () => { await doSomething() }) }
```

# Input
```js
async function foo() {}
```

# Input
```js
async () => {}
```

# Input
```js
function foo() { doSomething() }
```

# Input
```js
async function foo() { for await (x of xs); }
```

# Input
```js
await foo()
```

# Input
```js
for await (let num of asyncIterable) { console.log(num); }
```

# Input
```js
async function* run() { yield * anotherAsyncGenerator() }
```

# Input
```js
async function* run() { }
```

# Input
```js
const foo = async function *(){}
```

# Input
```js
const foo = async function *(){ console.log('bar') }
```

# Input
```js
async function* run() { console.log('bar') }
```


