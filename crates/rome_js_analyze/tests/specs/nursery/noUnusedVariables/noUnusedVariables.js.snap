---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noUnusedVariables.js
---
# Input
```js
import React from 'react';

const a = 1;
const b = 2,
	c = 3;
console.log(c);

function f1() {}

function f2() {
	f2();
}

function f3() {
	function g() {
		f3();
	}
	g();
}

function f41(a) {}
f41();

function f42(a, b) {
	console.log(a);
}
f42();

function f43(a, b) {
	console.log(a);
}
f43();

const f5 = () => {};

const f6 = () => {
	f6();
};

try {
} catch (e) {}

export function exported_function() {}

function exported_function_2() {}
export { exported_function_2 };

let value;
function Button() {}
console.log(<Button att={value}/>);

(function f(_a){})()

new (class C {

})
```

# Diagnostics
```
noUnusedVariables.js:3:7 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    1 │ import React from 'react';
    2 │ 
  > 3 │ const a = 1;
      │       ^
    4 │ const b = 2,
    5 │ 	c = 3;
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:4:7 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    3 │ const a = 1;
  > 4 │ const b = 2,
      │       ^
    5 │ 	c = 3;
    6 │ console.log(c);
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:8:10 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
     6 │ console.log(c);
     7 │ 
   > 8 │ function f1() {}
       │          ^^
     9 │ 
    10 │ function f2() {
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:10:10 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
     8 │ function f1() {}
     9 │ 
  > 10 │ function f2() {
       │          ^^
    11 │ 	f2();
    12 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:14:10 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
    12 │ }
    13 │ 
  > 14 │ function f3() {
       │          ^^
    15 │ 	function g() {
    16 │ 		f3();
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:21:14 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    19 │ }
    20 │ 
  > 21 │ function f41(a) {}
       │              ^
    22 │ f41();
    23 │ 
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:24:17 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    22 │ f41();
    23 │ 
  > 24 │ function f42(a, b) {
       │                 ^
    25 │ 	console.log(a);
    26 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:29:17 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    27 │ f42();
    28 │ 
  > 29 │ function f43(a, b) {
       │                 ^
    30 │ 	console.log(a);
    31 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:34:7 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    32 │ f43();
    33 │ 
  > 34 │ const f5 = () => {};
       │       ^^
    35 │ 
    36 │ const f6 = () => {
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:36:7 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    34 │ const f5 = () => {};
    35 │ 
  > 36 │ const f6 = () => {
       │       ^^
    37 │ 	f6();
    38 │ };
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.js:41:10 lint/nursery/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    40 │ try {
  > 41 │ } catch (e) {}
       │          ^
    42 │ 
    43 │ export function exported_function() {}
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```


