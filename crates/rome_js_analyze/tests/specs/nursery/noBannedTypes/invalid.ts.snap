---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.ts
---
# Input
```js
let a: String;

let e: Object;

let b: { c: String };

function foo(a: String) {}

'a' as String;

class Foo<T = String> extends Bar<String> implements Baz<Object> {
  constructor(foo: String | Object) {}

  exit(): Array<String> {
    const foo: String = 1 as String;
  }
}

let baz: [boolean, Boolean] = [true, false];

let z = true as Boolean;

type Props = {};

let fn: Function = () => true

const str: String = 'foo';

const bool: Boolean = true;

const num: Number = 1;

const symb: Symbol = Symbol('foo');

const bigInt: BigInt = 1n;

const lowerObj: Object = {};

const capitalObj: Object = { a: 'string' };

const curly1: {

} = 1;

const curly2: {} = { a: 'string' };

```

# Diagnostics
```
invalid.ts:1:8 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
  > 1 │ let a: String;
      │        ^^^^^^
    2 │ 
    3 │ let e: Object;
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
     1    │ - let·a:·String;
        1 │ + let·a:·string;
     2  2 │   
     3  3 │   let e: Object;
  

```

```
invalid.ts:3:8 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Object' as a type.
  
    1 │ let a: String;
    2 │ 
  > 3 │ let e: Object;
      │        ^^^^^^
    4 │ 
    5 │ let b: { c: String };
  
  i Prefer explicitly define the object shape. This type means "any non-nullish value", which is slightly better than 'unknown', but it's still a broad type.
  

```

```
invalid.ts:5:13 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    3 │ let e: Object;
    4 │ 
  > 5 │ let b: { c: String };
      │             ^^^^^^
    6 │ 
    7 │ function foo(a: String) {}
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
     3  3 │   let e: Object;
     4  4 │   
     5    │ - let·b:·{·c:·String·};
        5 │ + let·b:·{·c:·string·};
     6  6 │   
     7  7 │   function foo(a: String) {}
  

```

```
invalid.ts:7:17 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    5 │ let b: { c: String };
    6 │ 
  > 7 │ function foo(a: String) {}
      │                 ^^^^^^
    8 │ 
    9 │ 'a' as String;
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
     5  5 │   let b: { c: String };
     6  6 │   
     7    │ - function·foo(a:·String)·{}
        7 │ + function·foo(a:·string)·{}
     8  8 │   
     9  9 │   'a' as String;
  

```

```
invalid.ts:9:8 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
     7 │ function foo(a: String) {}
     8 │ 
   > 9 │ 'a' as String;
       │        ^^^^^^
    10 │ 
    11 │ class Foo<T = String> extends Bar<String> implements Baz<Object> {
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
     7  7 │   function foo(a: String) {}
     8  8 │   
     9    │ - 'a'·as·String;
        9 │ + 'a'·as·string;
    10 10 │   
    11 11 │   class Foo<T = String> extends Bar<String> implements Baz<Object> {
  

```

```
invalid.ts:11:15 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
     9 │ 'a' as String;
    10 │ 
  > 11 │ class Foo<T = String> extends Bar<String> implements Baz<Object> {
       │               ^^^^^^
    12 │   constructor(foo: String | Object) {}
    13 │ 
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
     9  9 │   'a' as String;
    10 10 │   
    11    │ - class·Foo<T·=·String>·extends·Bar<String>·implements·Baz<Object>·{
       11 │ + class·Foo<T·=·string>·extends·Bar<String>·implements·Baz<Object>·{
    12 12 │     constructor(foo: String | Object) {}
    13 13 │   
  

```

```
invalid.ts:11:35 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
     9 │ 'a' as String;
    10 │ 
  > 11 │ class Foo<T = String> extends Bar<String> implements Baz<Object> {
       │                                   ^^^^^^
    12 │   constructor(foo: String | Object) {}
    13 │ 
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
     9  9 │   'a' as String;
    10 10 │   
    11    │ - class·Foo<T·=·String>·extends·Bar<String>·implements·Baz<Object>·{
       11 │ + class·Foo<T·=·String>·extends·Bar<string>·implements·Baz<Object>·{
    12 12 │     constructor(foo: String | Object) {}
    13 13 │   
  

```

```
invalid.ts:11:58 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Object' as a type.
  
     9 │ 'a' as String;
    10 │ 
  > 11 │ class Foo<T = String> extends Bar<String> implements Baz<Object> {
       │                                                          ^^^^^^
    12 │   constructor(foo: String | Object) {}
    13 │ 
  
  i Prefer explicitly define the object shape. This type means "any non-nullish value", which is slightly better than 'unknown', but it's still a broad type.
  

```

```
invalid.ts:12:20 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    11 │ class Foo<T = String> extends Bar<String> implements Baz<Object> {
  > 12 │   constructor(foo: String | Object) {}
       │                    ^^^^^^
    13 │ 
    14 │   exit(): Array<String> {
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
    10 10 │   
    11 11 │   class Foo<T = String> extends Bar<String> implements Baz<Object> {
    12    │ - ··constructor(foo:·String·|·Object)·{}
       12 │ + ··constructor(foo:·string·|·Object)·{}
    13 13 │   
    14 14 │     exit(): Array<String> {
  

```

```
invalid.ts:12:29 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Object' as a type.
  
    11 │ class Foo<T = String> extends Bar<String> implements Baz<Object> {
  > 12 │   constructor(foo: String | Object) {}
       │                             ^^^^^^
    13 │ 
    14 │   exit(): Array<String> {
  
  i Prefer explicitly define the object shape. This type means "any non-nullish value", which is slightly better than 'unknown', but it's still a broad type.
  

```

```
invalid.ts:14:17 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    12 │   constructor(foo: String | Object) {}
    13 │ 
  > 14 │   exit(): Array<String> {
       │                 ^^^^^^
    15 │     const foo: String = 1 as String;
    16 │   }
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
    12 12 │     constructor(foo: String | Object) {}
    13 13 │   
    14    │ - ··exit():·Array<String>·{
       14 │ + ··exit():·Array<string>·{
    15 15 │       const foo: String = 1 as String;
    16 16 │     }
  

```

```
invalid.ts:15:16 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    14 │   exit(): Array<String> {
  > 15 │     const foo: String = 1 as String;
       │                ^^^^^^
    16 │   }
    17 │ }
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
    13 13 │   
    14 14 │     exit(): Array<String> {
    15    │ - ····const·foo:·String·=·1·as·String;
       15 │ + ····const·foo:·string·=·1·as·String;
    16 16 │     }
    17 17 │   }
  

```

```
invalid.ts:15:30 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    14 │   exit(): Array<String> {
  > 15 │     const foo: String = 1 as String;
       │                              ^^^^^^
    16 │   }
    17 │ }
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
    13 13 │   
    14 14 │     exit(): Array<String> {
    15    │ - ····const·foo:·String·=·1·as·String;
       15 │ + ····const·foo:·String·=·1·as·string;
    16 16 │     }
    17 17 │   }
  

```

```
invalid.ts:19:20 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Boolean' as a type.
  
    17 │ }
    18 │ 
  > 19 │ let baz: [boolean, Boolean] = [true, false];
       │                    ^^^^^^^
    20 │ 
    21 │ let z = true as Boolean;
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'boolean' instead
  
    17 17 │   }
    18 18 │   
    19    │ - let·baz:·[boolean,·Boolean]·=·[true,·false];
       19 │ + let·baz:·[boolean,·boolean]·=·[true,·false];
    20 20 │   
    21 21 │   let z = true as Boolean;
  

```

```
invalid.ts:21:17 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Boolean' as a type.
  
    19 │ let baz: [boolean, Boolean] = [true, false];
    20 │ 
  > 21 │ let z = true as Boolean;
       │                 ^^^^^^^
    22 │ 
    23 │ type Props = {};
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'boolean' instead
  
    19 19 │   let baz: [boolean, Boolean] = [true, false];
    20 20 │   
    21    │ - let·z·=·true·as·Boolean;
       21 │ + let·z·=·true·as·boolean;
    22 22 │   
    23 23 │   type Props = {};
  

```

```
invalid.ts:23:14 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use '{}' as a type.
  
    21 │ let z = true as Boolean;
    22 │ 
  > 23 │ type Props = {};
       │              ^^
    24 │ 
    25 │ let fn: Function = () => true
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullish value".
  

```

```
invalid.ts:25:9 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Function' as a type.
  
    23 │ type Props = {};
    24 │ 
  > 25 │ let fn: Function = () => true
       │         ^^^^^^^^
    26 │ 
    27 │ const str: String = 'foo';
  
  i Prefer explicitly define the function shape. This type accepts any function-like value, which can be a common source of bugs.
  

```

```
invalid.ts:27:12 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'String' as a type.
  
    25 │ let fn: Function = () => true
    26 │ 
  > 27 │ const str: String = 'foo';
       │            ^^^^^^
    28 │ 
    29 │ const bool: Boolean = true;
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'string' instead
  
    25 25 │   let fn: Function = () => true
    26 26 │   
    27    │ - const·str:·String·=·'foo';
       27 │ + const·str:·string·=·'foo';
    28 28 │   
    29 29 │   const bool: Boolean = true;
  

```

```
invalid.ts:29:13 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Boolean' as a type.
  
    27 │ const str: String = 'foo';
    28 │ 
  > 29 │ const bool: Boolean = true;
       │             ^^^^^^^
    30 │ 
    31 │ const num: Number = 1;
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'boolean' instead
  
    27 27 │   const str: String = 'foo';
    28 28 │   
    29    │ - const·bool:·Boolean·=·true;
       29 │ + const·bool:·boolean·=·true;
    30 30 │   
    31 31 │   const num: Number = 1;
  

```

```
invalid.ts:31:12 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Number' as a type.
  
    29 │ const bool: Boolean = true;
    30 │ 
  > 31 │ const num: Number = 1;
       │            ^^^^^^
    32 │ 
    33 │ const symb: Symbol = Symbol('foo');
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'number' instead
  
    29 29 │   const bool: Boolean = true;
    30 30 │   
    31    │ - const·num:·Number·=·1;
       31 │ + const·num:·number·=·1;
    32 32 │   
    33 33 │   const symb: Symbol = Symbol('foo');
  

```

```
invalid.ts:33:13 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Symbol' as a type.
  
    31 │ const num: Number = 1;
    32 │ 
  > 33 │ const symb: Symbol = Symbol('foo');
       │             ^^^^^^
    34 │ 
    35 │ const bigInt: BigInt = 1n;
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'symbol' instead
  
    31 31 │   const num: Number = 1;
    32 32 │   
    33    │ - const·symb:·Symbol·=·Symbol('foo');
       33 │ + const·symb:·symbol·=·Symbol('foo');
    34 34 │   
    35 35 │   const bigInt: BigInt = 1n;
  

```

```
invalid.ts:35:15 lint/nursery/noBannedTypes  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'BigInt' as a type.
  
    33 │ const symb: Symbol = Symbol('foo');
    34 │ 
  > 35 │ const bigInt: BigInt = 1n;
       │               ^^^^^^
    36 │ 
    37 │ const lowerObj: Object = {};
  
  i Use lowercase primitives for consistency.
  
  i Safe fix: Use 'bigint' instead
  
    33 33 │   const symb: Symbol = Symbol('foo');
    34 34 │   
    35    │ - const·bigInt:·BigInt·=·1n;
       35 │ + const·bigInt:·bigint·=·1n;
    36 36 │   
    37 37 │   const lowerObj: Object = {};
  

```

```
invalid.ts:37:17 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Object' as a type.
  
    35 │ const bigInt: BigInt = 1n;
    36 │ 
  > 37 │ const lowerObj: Object = {};
       │                 ^^^^^^
    38 │ 
    39 │ const capitalObj: Object = { a: 'string' };
  
  i Prefer explicitly define the object shape. This type means "any non-nullish value", which is slightly better than 'unknown', but it's still a broad type.
  

```

```
invalid.ts:39:19 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use 'Object' as a type.
  
    37 │ const lowerObj: Object = {};
    38 │ 
  > 39 │ const capitalObj: Object = { a: 'string' };
       │                   ^^^^^^
    40 │ 
    41 │ const curly1: {
  
  i Prefer explicitly define the object shape. This type means "any non-nullish value", which is slightly better than 'unknown', but it's still a broad type.
  

```

```
invalid.ts:41:15 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use '{}' as a type.
  
    39 │ const capitalObj: Object = { a: 'string' };
    40 │ 
  > 41 │ const curly1: {
       │               ^
  > 42 │ 
  > 43 │ } = 1;
       │ ^
    44 │ 
    45 │ const curly2: {} = { a: 'string' };
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullish value".
  

```

```
invalid.ts:45:15 lint/nursery/noBannedTypes ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Don't use '{}' as a type.
  
    43 │ } = 1;
    44 │ 
  > 45 │ const curly2: {} = { a: 'string' };
       │               ^^
    46 │ 
  
  i Prefer explicitly define the object shape. '{}' means "any non-nullish value".
  

```


