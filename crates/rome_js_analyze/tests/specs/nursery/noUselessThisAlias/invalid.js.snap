---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalid.js
---
# Input
```js
const self = this, v = 0, /*u*/ u = 2, self2 = this;

function f() {
    // assignment comment
    const self = this;
    return () => {
        /*a*/self/*b*/.g();
    }
}

function f() {
    let self = this;
    return () => {
        self.g();
    }
}

function f() {
    var self;
    self = this;
    self = this;
    return () => {
        self.g();
    }
}

```

# Diagnostics
```
invalid.js:1:7 lint/nursery/noUselessThisAlias  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This aliasing of this is unnecessary.
  
  > 1 │ const self = this, v = 0, /*u*/ u = 2, self2 = this;
      │       ^^^^^^^^^^^
    2 │ 
    3 │ function f() {
  
  i This note will give you more information.
  
  i Safe fix: Use this instead of an alias.
  
    1 │ const·self·=·this,·v·=·0,·/*u*/·u·=·2,·self2·=·this;
      │       -------------                                 

```

```
invalid.js:1:40 lint/nursery/noUselessThisAlias  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This aliasing of this is unnecessary.
  
  > 1 │ const self = this, v = 0, /*u*/ u = 2, self2 = this;
      │                                        ^^^^^^^^^^^^
    2 │ 
    3 │ function f() {
  
  i This note will give you more information.
  
  i Safe fix: Use this instead of an alias.
  
    1 │ const·self·=·this,·v·=·0,·/*u*/·u·=·2,·self2·=·this;
      │                                      -------------- 

```

```
invalid.js:5:11 lint/nursery/noUselessThisAlias  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This aliasing of this is unnecessary.
  
    3 │ function f() {
    4 │     // assignment comment
  > 5 │     const self = this;
      │           ^^^^^^^^^^^
    6 │     return () => {
    7 │         /*a*/self/*b*/.g();
  
  i This note will give you more information.
  
  i Safe fix: Use this instead of an alias.
  
     1  1 │   const self = this, v = 0, /*u*/ u = 2, self2 = this;
     2  2 │   
     3    │ - function·f()·{
     4    │ - ····//·assignment·comment
     5    │ - ····const·self·=·this;
        3 │ + function·f()·{;
     6  4 │       return () => {
     7    │ - ········/*a*/self/*b*/.g();
        5 │ + ········/*a*/this/*b*/.g();
     8  6 │       }
     9  7 │   }
  

```

```
invalid.js:12:9 lint/nursery/noUselessThisAlias  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This aliasing of this is unnecessary.
  
    11 │ function f() {
  > 12 │     let self = this;
       │         ^^^^^^^^^^^
    13 │     return () => {
    14 │         self.g();
  
  i This note will give you more information.
  
  i Safe fix: Use this instead of an alias.
  
     9  9 │   }
    10 10 │   
    11    │ - function·f()·{
    12    │ - ····let·self·=·this;
       11 │ + function·f()·{;
    13 12 │       return () => {
    14    │ - ········self.g();
       13 │ + ········this.g();
    15 14 │       }
    16 15 │   }
  

```

```
invalid.js:19:9 lint/nursery/noUselessThisAlias  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This aliasing of this is unnecessary.
  
    18 │ function f() {
  > 19 │     var self;
       │         ^^^^
    20 │     self = this;
    21 │     self = this;
  
  i This note will give you more information.
  
  i Safe fix: Use this instead of an alias.
  
    16 16 │   }
    17 17 │   
    18    │ - function·f()·{
    19    │ - ····var·self;
    20    │ - ····self·=·this;
    21    │ - ····self·=·this;
    22    │ - ····return·()·=>·{
    23    │ - ········self.g();
       18 │ + function·f()·{;
       19 │ + ····return·()·=>·{
       20 │ + ········this.g();
    24 21 │       }
    25 22 │   }
  

```


