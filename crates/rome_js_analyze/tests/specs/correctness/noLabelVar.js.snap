---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noLabelVar.js
---
# Input
```js
// invalid
const x1 = "test";
x1: expr;
// nested scope 
function test() {
  {
    x1: for (let i = 0; i < 10; i++) {
    }
  }
}

// valid
const x = "test";
z: expr;

```

# Diagnostics
```
noLabelVar.js:3:1 lint/correctness/noLabelVar ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not use the x1 variable name as a label
  
    ┌─ noLabelVar.js:3:1
    │
  3 │ x1: expr;
    │ ^^
  
  i The variable is declared here
  
    ┌─ noLabelVar.js:2:7
    │
  2 │ const x1 = "test";
    │       ^^
  
  i Creating a label with the same name as an in-scope variable leads to confusion.
  

```

```
noLabelVar.js:7:5 lint/correctness/noLabelVar ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not use the x1 variable name as a label
  
    ┌─ noLabelVar.js:7:5
    │
  7 │     x1: for (let i = 0; i < 10; i++) {
    │     ^^
  
  i The variable is declared here
  
    ┌─ noLabelVar.js:2:7
    │
  2 │ const x1 = "test";
    │       ^^
  
  i Creating a label with the same name as an in-scope variable leads to confusion.
  

```


