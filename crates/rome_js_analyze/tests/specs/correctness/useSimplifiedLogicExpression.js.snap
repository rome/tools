---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: useSimplifiedLogicExpression.js
---
# Input
```js
// valid 
const boolExpr3 = true;
const boolExpr4 = false;
const r5 = !(boolExpr1 && boolExpr2);
const boolExpr5 = true;
const boolExpr6 = false;
const r6 = !!boolExpr1 || !!boolExpr2;
// invalid
const boolExp = true;
const r = true && boolExp;
const boolExp2 = true;
const r2 = boolExp || true;
const nonNullExp = 123;
const r3 = null ?? nonNullExp;
const boolExpr1 = true;
const boolExpr2 = false;
const r4 = !boolExpr1 || !boolExpr2;
!!x

```

# Diagnostics
```
useSimplifiedLogicExpression.js:7:12 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    5 │ const boolExpr5 = true;
    6 │ const boolExpr6 = false;
  > 7 │ const r6 = !!boolExpr1 || !!boolExpr2;
      │            ^^^^^^^^^^^
    8 │ // invalid
    9 │ const boolExp = true;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    7 │ const·r6·=·!!boolExpr1·||·!!boolExpr2;
      │            --                         

```

```
useSimplifiedLogicExpression.js:7:27 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    5 │ const boolExpr5 = true;
    6 │ const boolExpr6 = false;
  > 7 │ const r6 = !!boolExpr1 || !!boolExpr2;
      │                           ^^^^^^^^^^^
    8 │ // invalid
    9 │ const boolExp = true;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    7 │ const·r6·=·!!boolExpr1·||·!!boolExpr2;
      │                           --          

```

```
useSimplifiedLogicExpression.js:10:11 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
     8 │ // invalid
     9 │ const boolExp = true;
  > 10 │ const r = true && boolExp;
       │           ^^^^^^^^^^^^^^^
    11 │ const boolExp2 = true;
    12 │ const r2 = boolExp || true;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    10 │ const·r·=·true·&&·boolExp;
       │           --------        

```

```
useSimplifiedLogicExpression.js:12:12 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    10 │ const r = true && boolExp;
    11 │ const boolExp2 = true;
  > 12 │ const r2 = boolExp || true;
       │            ^^^^^^^^^^^^^^^
    13 │ const nonNullExp = 123;
    14 │ const r3 = null ?? nonNullExp;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    12 │ const·r2·=·boolExp·||·true;
       │            -----------     

```

```
useSimplifiedLogicExpression.js:14:12 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    12 │ const r2 = boolExp || true;
    13 │ const nonNullExp = 123;
  > 14 │ const r3 = null ?? nonNullExp;
       │            ^^^^^^^^^^^^^^^^^^
    15 │ const boolExpr1 = true;
    16 │ const boolExpr2 = false;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    14 │ const·r3·=·null·??·nonNullExp;
       │            --------           

```

```
useSimplifiedLogicExpression.js:17:12 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    15 │ const boolExpr1 = true;
    16 │ const boolExpr2 = false;
  > 17 │ const r4 = !boolExpr1 || !boolExpr2;
       │            ^^^^^^^^^^^^^^^^^^^^^^^^
    18 │ !!x
    19 │ 
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    15 15 │   const boolExpr1 = true;
    16 16 │   const boolExpr2 = false;
    17    │ - const·r4·=·!boolExpr1·||·!boolExpr2;
       17 │ + const·r4·=·!(boolExpr1·&&·boolExpr2);
    18 18 │   !!x
    19 19 │   
  

```

```
useSimplifiedLogicExpression.js:18:1 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    16 │ const boolExpr2 = false;
    17 │ const r4 = !boolExpr1 || !boolExpr2;
  > 18 │ !!x
       │ ^^^
    19 │ 
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    18 │ !!x
       │ -- 

```


