---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noUnusedVariables.ts
---
# Input
```js
// Invalid

class D {
	constructor(a: number) {}
	f(a: number) {}
	set a(a: number) {}
}
console.log(new D());

function unused_overloaded(): number;
function unused_overloaded(s: string): string;
function unused_overloaded(s?: string) {
  return s;
}

// Valid

interface A {
	f(a: number);
	set a(a: number);
	[key: string]: string;
}

abstract class B {
	constructor(a: number);
	abstract f(a: number);
	g(a: number);
	abstract set a(a: number);
}
console.log(new B());

class C {
	constructor(a: number);
	f(a: number);
}
console.log(new C());

function f(fn: (title: string) => boolean) {
	console.log(fn);
}
f();

export type Command = (...args: any[]) => unknown;

declare function notUsedParameters(a);

function used_overloaded(): number;
function used_overloaded(s: string): string;
function used_overloaded(s?: string) {
  return s;
}
used_overloaded();

```

# Diagnostics
```
noUnusedVariables.ts:4:14 lint/correctness/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    3 │ class D {
  > 4 │ 	constructor(a: number) {}
      │ 	            ^
    5 │ 	f(a: number) {}
    6 │ 	set a(a: number) {}
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.ts:5:4 lint/correctness/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    3 │ class D {
    4 │ 	constructor(a: number) {}
  > 5 │ 	f(a: number) {}
      │ 	  ^
    6 │ 	set a(a: number) {}
    7 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.ts:6:8 lint/correctness/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    4 │ 	constructor(a: number) {}
    5 │ 	f(a: number) {}
  > 6 │ 	set a(a: number) {}
      │ 	      ^
    7 │ }
    8 │ console.log(new D());
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```

```
noUnusedVariables.ts:12:10 lint/correctness/noUnusedVariables ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
    10 │ function unused_overloaded(): number;
    11 │ function unused_overloaded(s: string): string;
  > 12 │ function unused_overloaded(s?: string) {
       │          ^^^^^^^^^^^^^^^^^
    13 │   return s;
    14 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  

```


