---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noUnusedVariables.js
---
# Input
```js
import React from 'react';

const a = 1;
const b = 2,
	c = 3;
console.log(c);

function f1() {}

function f2() {
	f2();
}

function f3() {
	function g() {
		f3();
	}
	g();
}

function f41(a) {}
f41();

function f42(a, b) {
	console.log(a);
}
f42();

function f43(a, b) {
	console.log(a);
}
f43();

const f5 = () => {};

const f6 = () => {
	f6();
};

try {
} catch (e) {}

export function exported_function() {}

function exported_function_2() {}
export { exported_function_2 };

let value;
function Button() {}
console.log(<Button att={value}/>);

(function f(_a){})()

new (class C {

})

(function loreum(hey, ai) {
	console.log(ai);
})();

const a = {
	loreum(a,b) {
		console.log(b)
	}
};
a;



```

# Diagnostics
```
noUnusedVariables.js:3:7 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    1 │ import React from 'react';
    2 │ 
  > 3 │ const a = 1;
      │       ^
    4 │ const b = 2,
    5 │ 	c = 3;
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend a with an underscore.
  
     1  1 │   import React from 'react';
     2  2 │   
     3    │ - const·a·=·1;
        3 │ + const·_a·=·1;
     4  4 │   const b = 2,
     5  5 │   	c = 3;
  

```

```
noUnusedVariables.js:4:7 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    3 │ const a = 1;
  > 4 │ const b = 2,
      │       ^
    5 │ 	c = 3;
    6 │ console.log(c);
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend b with an underscore.
  
     2  2 │   
     3  3 │   const a = 1;
     4    │ - const·b·=·2,
        4 │ + const·_b·=·2,
     5  5 │   	c = 3;
     6  6 │   console.log(c);
  

```

```
noUnusedVariables.js:8:10 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
     6 │ console.log(c);
     7 │ 
   > 8 │ function f1() {}
       │          ^^
     9 │ 
    10 │ function f2() {
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend f1 with an underscore.
  
     6  6 │   console.log(c);
     7  7 │   
     8    │ - function·f1()·{}
        8 │ + function·_f1()·{}
     9  9 │   
    10 10 │   function f2() {
  

```

```
noUnusedVariables.js:10:10 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
     8 │ function f1() {}
     9 │ 
  > 10 │ function f2() {
       │          ^^
    11 │ 	f2();
    12 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend f2 with an underscore.
  
     8  8 │   function f1() {}
     9  9 │   
    10    │ - function·f2()·{
       10 │ + function·_f2()·{
    11 11 │   	f2();
    12 12 │   }
  

```

```
noUnusedVariables.js:14:10 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This function is unused.
  
    12 │ }
    13 │ 
  > 14 │ function f3() {
       │          ^^
    15 │ 	function g() {
    16 │ 		f3();
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend f3 with an underscore.
  
    12 12 │   }
    13 13 │   
    14    │ - function·f3()·{
       14 │ + function·_f3()·{
    15 15 │   	function g() {
    16 16 │   		f3();
  

```

```
noUnusedVariables.js:21:14 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    19 │ }
    20 │ 
  > 21 │ function f41(a) {}
       │              ^
    22 │ f41();
    23 │ 
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend a with an underscore.
  
    19 19 │   }
    20 20 │   
    21    │ - function·f41(a)·{}
       21 │ + function·f41(_a)·{}
    22 22 │   f41();
    23 23 │   
  

```

```
noUnusedVariables.js:24:17 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    22 │ f41();
    23 │ 
  > 24 │ function f42(a, b) {
       │                 ^
    25 │ 	console.log(a);
    26 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend b with an underscore.
  
    22 22 │   f41();
    23 23 │   
    24    │ - function·f42(a,·b)·{
       24 │ + function·f42(a,·_b)·{
    25 25 │   	console.log(a);
    26 26 │   }
  

```

```
noUnusedVariables.js:29:17 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    27 │ f42();
    28 │ 
  > 29 │ function f43(a, b) {
       │                 ^
    30 │ 	console.log(a);
    31 │ }
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend b with an underscore.
  
    27 27 │   f42();
    28 28 │   
    29    │ - function·f43(a,·b)·{
       29 │ + function·f43(a,·_b)·{
    30 30 │   	console.log(a);
    31 31 │   }
  

```

```
noUnusedVariables.js:34:7 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    32 │ f43();
    33 │ 
  > 34 │ const f5 = () => {};
       │       ^^
    35 │ 
    36 │ const f6 = () => {
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend f5 with an underscore.
  
    32 32 │   f43();
    33 33 │   
    34    │ - const·f5·=·()·=>·{};
       34 │ + const·_f5·=·()·=>·{};
    35 35 │   
    36 36 │   const f6 = () => {
  

```

```
noUnusedVariables.js:36:7 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    34 │ const f5 = () => {};
    35 │ 
  > 36 │ const f6 = () => {
       │       ^^
    37 │ 	f6();
    38 │ };
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend f6 with an underscore.
  
    34 34 │   const f5 = () => {};
    35 35 │   
    36    │ - const·f6·=·()·=>·{
       36 │ + const·_f6·=·()·=>·{
    37 37 │   	f6();
    38 38 │   };
  

```

```
noUnusedVariables.js:41:10 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This variable is unused.
  
    40 │ try {
  > 41 │ } catch (e) {}
       │          ^
    42 │ 
    43 │ export function exported_function() {}
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend e with an underscore.
  
    39 39 │   
    40 40 │   try {
    41    │ - }·catch·(e)·{}
       41 │ + }·catch·(_e)·{}
    42 42 │   
    43 43 │   export function exported_function() {}
  

```

```
noUnusedVariables.js:58:18 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    56 │ })
    57 │ 
  > 58 │ (function loreum(hey, ai) {
       │                  ^^^
    59 │ 	console.log(ai);
    60 │ })();
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend hey with an underscore.
  
    56 56 │   })
    57 57 │   
    58    │ - (function·loreum(hey,·ai)·{
       58 │ + (function·loreum(_hey,·ai)·{
    59 59 │   	console.log(ai);
    60 60 │   })();
  

```

```
noUnusedVariables.js:63:9 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! This parameter is unused.
  
    62 │ const a = {
  > 63 │ 	loreum(a,b) {
       │ 	       ^
    64 │ 		console.log(b)
    65 │ 	}
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: If this is intentional, prepend a with an underscore.
  
    61 61 │   
    62 62 │   const a = {
    63    │ - → loreum(a,b)·{
       63 │ + → loreum(_a,b)·{
    64 64 │   		console.log(b)
    65 65 │   	}
  

```


