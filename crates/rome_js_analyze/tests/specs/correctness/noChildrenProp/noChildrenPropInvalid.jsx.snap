---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noChildrenPropInvalid.jsx
---
# Input
```js
import {createElement} from "react";
import React from "react";

<>
    <Component children={'foo'}></Component>
</>

createElement('div', {
    children: 'foo'
})

React.createElement('div', {
    children: 'foo'
})

```

# Diagnostics
```
noChildrenPropInvalid.jsx:5:16 lint/correctness/noChildrenProp ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid passing children using a prop
  
    4 │ <>
  > 5 │     <Component children={'foo'}></Component>
      │                ^^^^^^^^
    6 │ </>
    7 │ 
  
  i The canonical way to pass children in React is to use JSX elements
  

```

```
noChildrenPropInvalid.jsx:9:5 lint/correctness/noChildrenProp ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid passing children using a prop
  
     8 │ createElement('div', {
   > 9 │     children: 'foo'
       │     ^^^^^^^^
    10 │ })
    11 │ 
  
  i The canonical way to pass children in React is to use additional arguments to React.createElement
  

```

```
noChildrenPropInvalid.jsx:13:5 lint/correctness/noChildrenProp ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid passing children using a prop
  
    12 │ React.createElement('div', {
  > 13 │     children: 'foo'
       │     ^^^^^^^^
    14 │ })
    15 │ 
  
  i The canonical way to pass children in React is to use additional arguments to React.createElement
  

```


