---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noShadowRestrictedNames.js
---
# Input
```js
function NaN() {}
function undefined() {}
function Infinity() {}
//function arguments() {}
//function eval() {}
function Array() {}

function test(JSON) {
	console.log(JSON);
}
let Set;
try {
} catch (Object) {}

```

# Diagnostics
```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "NaN" property.
  ┌─ noShadowRestrictedNames.js:1:10
  │
1 │ function NaN() {}
  │          ---

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```

```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "undefined" property.
  ┌─ noShadowRestrictedNames.js:2:10
  │
2 │ function undefined() {}
  │          ---------

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```

```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "Infinity" property.
  ┌─ noShadowRestrictedNames.js:3:10
  │
3 │ function Infinity() {}
  │          --------

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```

```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "Array" property.
  ┌─ noShadowRestrictedNames.js:6:10
  │
6 │ function Array() {}
  │          -----

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```

```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "JSON" property.
  ┌─ noShadowRestrictedNames.js:8:15
  │
8 │ function test(JSON) {
  │               ----

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```

```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "Set" property.
   ┌─ noShadowRestrictedNames.js:11:5
   │
11 │ let Set;
   │     ---

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```

```
warning[correctness/noShadowRestrictedNames]: Do not shadow the global "Object" property.
   ┌─ noShadowRestrictedNames.js:13:10
   │
13 │ } catch (Object) {}
   │          ------

=  note: Consider renaming this variable. It's easy to confuse the origin of variables when they're named after a known global.


```


