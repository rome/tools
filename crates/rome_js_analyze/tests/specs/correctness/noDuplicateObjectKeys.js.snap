---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noDuplicateObjectKeys.js
---
# Input
```js
// invalid

({ a: 1, a: 2 });
({ a: 1, a: 2, a: 3 });
({ "": 1, "": 2 });
({ z: 1, z: 2 });
({ get a() {}, get a() {} });
({ set a(v) {}, set a(v) {} });
({ a: 1, get a() {} });
({ a: 1, set a(v) {} });
({ get a() {}, a: 1 });
({ set a(v) {}, a: 1 });
({ a: 1, get a() {}, set a(v) {} });
({ get a() {}, a: 1, set a(v) {} });
({ get a() {}, set a(v) {}, a: 1 });

// valid for now

// ESLint already catches properties keyed with different-formatted number literals, we haven't implemented it yet.
({ 0x1: 1, 1: 2 });
({ 012: 1, 10: 2 });
({ 0b1: 1, 1: 2 });
({ 0o1: 1, 1: 2 });
({ 1n: 1, 1: 2 });
({ 1_0: 1, 10: 2 });

// This particular simple computed property case with just a string literal would be easy to catch,
// but we don't want to open Pandora's static analysis box so we have to draw a line somewhere
({ a: 1, ["a"]: 1 });

// valid

({ a: 1, b: 1 });
({ "": 1, " ": 1 });
({ 012: 1, 12: 1 });
({ 1_0: 1, 1: 1 });
({ a: 1, [a]: 1 });
({ [a]: 1, [a]: 1 });
({ get a() {}, set a(v) {} });
({ a: 1, ...a });
({ a: 1, b: { a: 1, b: 1 } });
// Not object keys, so out of scope for this rule
var { a, a } = obj;

```

# Diagnostics
```
noDuplicateObjectKeys.js:3:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
    1 │ // invalid
    2 │ 
  > 3 │ ({ a: 1, a: 2 });
      │    ^^^^
    4 │ ({ a: 1, a: 2, a: 3 });
    5 │ ({ "": 1, "": 2 });
  
  i Overwritten with this value.
  
    1 │ // invalid
    2 │ 
  > 3 │ ({ a: 1, a: 2 });
      │          ^^^^
    4 │ ({ a: 1, a: 2, a: 3 });
    5 │ ({ "": 1, "": 2 });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    3 │ ({·a:·1,·a:·2·});
      │       ------     

```

```
noDuplicateObjectKeys.js:4:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
    3 │ ({ a: 1, a: 2 });
  > 4 │ ({ a: 1, a: 2, a: 3 });
      │    ^^^^
    5 │ ({ "": 1, "": 2 });
    6 │ ({ z: 1, z: 2 });
  
  i Overwritten with this value.
  
    3 │ ({ a: 1, a: 2 });
  > 4 │ ({ a: 1, a: 2, a: 3 });
      │                ^^^^
    5 │ ({ "": 1, "": 2 });
    6 │ ({ z: 1, z: 2 });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    4 │ ({·a:·1,·a:·2,·a:·3·});
      │       ------           

```

```
noDuplicateObjectKeys.js:4:10 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
    3 │ ({ a: 1, a: 2 });
  > 4 │ ({ a: 1, a: 2, a: 3 });
      │          ^^^^
    5 │ ({ "": 1, "": 2 });
    6 │ ({ z: 1, z: 2 });
  
  i Overwritten with this value.
  
    3 │ ({ a: 1, a: 2 });
  > 4 │ ({ a: 1, a: 2, a: 3 });
      │                ^^^^
    5 │ ({ "": 1, "": 2 });
    6 │ ({ z: 1, z: 2 });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    4 │ ({·a:·1,·a:·2,·a:·3·});
      │             ------     

```

```
noDuplicateObjectKeys.js:5:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This property value named  is later overwritten by an object member with the same name.
  
    3 │ ({ a: 1, a: 2 });
    4 │ ({ a: 1, a: 2, a: 3 });
  > 5 │ ({ "": 1, "": 2 });
      │    ^^^^^
    6 │ ({ z: 1, z: 2 });
    7 │ ({ get a() {}, get a() {} });
  
  i Overwritten with this value.
  
    3 │ ({ a: 1, a: 2 });
    4 │ ({ a: 1, a: 2, a: 3 });
  > 5 │ ({ "": 1, "": 2 });
      │           ^^^^^
    6 │ ({ z: 1, z: 2 });
    7 │ ({ get a() {}, get a() {} });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named 
  
    5 │ ({·"":·1,·"":·2·});
      │        -------     

```

```
noDuplicateObjectKeys.js:6:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This property value named z is later overwritten by an object member with the same name.
  
    4 │ ({ a: 1, a: 2, a: 3 });
    5 │ ({ "": 1, "": 2 });
  > 6 │ ({ z: 1, z: 2 });
      │    ^^^^
    7 │ ({ get a() {}, get a() {} });
    8 │ ({ set a(v) {}, set a(v) {} });
  
  i Overwritten with this value.
  
    4 │ ({ a: 1, a: 2, a: 3 });
    5 │ ({ "": 1, "": 2 });
  > 6 │ ({ z: 1, z: 2 });
      │          ^^^^
    7 │ ({ get a() {}, get a() {} });
    8 │ ({ set a(v) {}, set a(v) {} });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named z
  
    6 │ ({·z:·1,·z:·2·});
      │       ------     

```

```
noDuplicateObjectKeys.js:7:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This getter named a is later overwritten by an object member with the same name.
  
    5 │ ({ "": 1, "": 2 });
    6 │ ({ z: 1, z: 2 });
  > 7 │ ({ get a() {}, get a() {} });
      │    ^^^^^^^^^^
    8 │ ({ set a(v) {}, set a(v) {} });
    9 │ ({ a: 1, get a() {} });
  
  i Overwritten with this getter.
  
    5 │ ({ "": 1, "": 2 });
    6 │ ({ z: 1, z: 2 });
  > 7 │ ({ get a() {}, get a() {} });
      │                ^^^^^^^^^^
    8 │ ({ set a(v) {}, set a(v) {} });
    9 │ ({ a: 1, get a() {} });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this getter named a
  
    7 │ ({·get·a()·{},·get·a()·{}·});
      │              ------------    

```

```
noDuplicateObjectKeys.js:8:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This setter named a is later overwritten by an object member with the same name.
  
     6 │ ({ z: 1, z: 2 });
     7 │ ({ get a() {}, get a() {} });
   > 8 │ ({ set a(v) {}, set a(v) {} });
       │    ^^^^^^^^^^^
     9 │ ({ a: 1, get a() {} });
    10 │ ({ a: 1, set a(v) {} });
  
  i Overwritten with this setter.
  
     6 │ ({ z: 1, z: 2 });
     7 │ ({ get a() {}, get a() {} });
   > 8 │ ({ set a(v) {}, set a(v) {} });
       │                 ^^^^^^^^^^^
     9 │ ({ a: 1, get a() {} });
    10 │ ({ a: 1, set a(v) {} });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this setter named a
  
    8 │ ({·set·a(v)·{},·set·a(v)·{}·});
      │               -------------    

```

```
noDuplicateObjectKeys.js:9:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
     7 │ ({ get a() {}, get a() {} });
     8 │ ({ set a(v) {}, set a(v) {} });
   > 9 │ ({ a: 1, get a() {} });
       │    ^^^^
    10 │ ({ a: 1, set a(v) {} });
    11 │ ({ get a() {}, a: 1 });
  
  i Overwritten with this getter.
  
     7 │ ({ get a() {}, get a() {} });
     8 │ ({ set a(v) {}, set a(v) {} });
   > 9 │ ({ a: 1, get a() {} });
       │          ^^^^^^^^^^
    10 │ ({ a: 1, set a(v) {} });
    11 │ ({ get a() {}, a: 1 });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    9 │ ({·a:·1,·get·a()·{}·});
      │    ------              

```

```
noDuplicateObjectKeys.js:10:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
     8 │ ({ set a(v) {}, set a(v) {} });
     9 │ ({ a: 1, get a() {} });
  > 10 │ ({ a: 1, set a(v) {} });
       │    ^^^^
    11 │ ({ get a() {}, a: 1 });
    12 │ ({ set a(v) {}, a: 1 });
  
  i Overwritten with this setter.
  
     8 │ ({ set a(v) {}, set a(v) {} });
     9 │ ({ a: 1, get a() {} });
  > 10 │ ({ a: 1, set a(v) {} });
       │          ^^^^^^^^^^^
    11 │ ({ get a() {}, a: 1 });
    12 │ ({ set a(v) {}, a: 1 });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    10 │ ({·a:·1,·set·a(v)·{}·});
       │    ------               

```

```
noDuplicateObjectKeys.js:11:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ! This getter named a is later overwritten by an object member with the same name.
  
     9 │ ({ a: 1, get a() {} });
    10 │ ({ a: 1, set a(v) {} });
  > 11 │ ({ get a() {}, a: 1 });
       │    ^^^^^^^^^^
    12 │ ({ set a(v) {}, a: 1 });
    13 │ ({ a: 1, get a() {}, set a(v) {} });
  
  i Overwritten with this value.
  
     9 │ ({ a: 1, get a() {} });
    10 │ ({ a: 1, set a(v) {} });
  > 11 │ ({ get a() {}, a: 1 });
       │                ^^^^
    12 │ ({ set a(v) {}, a: 1 });
    13 │ ({ a: 1, get a() {}, set a(v) {} });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this getter named a
  
    11 │ ({·get·a()·{},·a:·1·});
       │    ------------        

```

```
noDuplicateObjectKeys.js:12:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ! This setter named a is later overwritten by an object member with the same name.
  
    10 │ ({ a: 1, set a(v) {} });
    11 │ ({ get a() {}, a: 1 });
  > 12 │ ({ set a(v) {}, a: 1 });
       │    ^^^^^^^^^^^
    13 │ ({ a: 1, get a() {}, set a(v) {} });
    14 │ ({ get a() {}, a: 1, set a(v) {} });
  
  i Overwritten with this value.
  
    10 │ ({ a: 1, set a(v) {} });
    11 │ ({ get a() {}, a: 1 });
  > 12 │ ({ set a(v) {}, a: 1 });
       │                 ^^^^
    13 │ ({ a: 1, get a() {}, set a(v) {} });
    14 │ ({ get a() {}, a: 1, set a(v) {} });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this setter named a
  
    12 │ ({·set·a(v)·{},·a:·1·});
       │    -------------        

```

```
noDuplicateObjectKeys.js:13:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
    11 │ ({ get a() {}, a: 1 });
    12 │ ({ set a(v) {}, a: 1 });
  > 13 │ ({ a: 1, get a() {}, set a(v) {} });
       │    ^^^^
    14 │ ({ get a() {}, a: 1, set a(v) {} });
    15 │ ({ get a() {}, set a(v) {}, a: 1 });
  
  i Overwritten with this setter.
  
    11 │ ({ get a() {}, a: 1 });
    12 │ ({ set a(v) {}, a: 1 });
  > 13 │ ({ a: 1, get a() {}, set a(v) {} });
       │                      ^^^^^^^^^^^
    14 │ ({ get a() {}, a: 1, set a(v) {} });
    15 │ ({ get a() {}, set a(v) {}, a: 1 });
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    13 │ ({·a:·1,·get·a()·{},·set·a(v)·{}·});
       │    ------                           

```

```
noDuplicateObjectKeys.js:14:16 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  ! This property value named a is later overwritten by an object member with the same name.
  
    12 │ ({ set a(v) {}, a: 1 });
    13 │ ({ a: 1, get a() {}, set a(v) {} });
  > 14 │ ({ get a() {}, a: 1, set a(v) {} });
       │                ^^^^
    15 │ ({ get a() {}, set a(v) {}, a: 1 });
    16 │ 
  
  i Overwritten with this setter.
  
    12 │ ({ set a(v) {}, a: 1 });
    13 │ ({ a: 1, get a() {}, set a(v) {} });
  > 14 │ ({ get a() {}, a: 1, set a(v) {} });
       │                      ^^^^^^^^^^^
    15 │ ({ get a() {}, set a(v) {}, a: 1 });
    16 │ 
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this property value named a
  
    14 │ ({·get·a()·{},·a:·1,·set·a(v)·{}·});
       │                ------               

```

```
noDuplicateObjectKeys.js:15:4 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━

  ! This getter named a is later overwritten by an object member with the same name.
  
    13 │ ({ a: 1, get a() {}, set a(v) {} });
    14 │ ({ get a() {}, a: 1, set a(v) {} });
  > 15 │ ({ get a() {}, set a(v) {}, a: 1 });
       │    ^^^^^^^^^^
    16 │ 
    17 │ // valid for now
  
  i Overwritten with this value.
  
    13 │ ({ a: 1, get a() {}, set a(v) {} });
    14 │ ({ get a() {}, a: 1, set a(v) {} });
  > 15 │ ({ get a() {}, set a(v) {}, a: 1 });
       │                             ^^^^
    16 │ 
    17 │ // valid for now
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this getter named a
  
    15 │ ({·get·a()·{},·set·a(v)·{},·a:·1·});
       │    ------------                     

```

```
noDuplicateObjectKeys.js:15:16 lint/correctness/noDuplicateObjectKeys  FIXABLE  ━━━━━━━━━━━━━━━━━━━━

  ! This setter named a is later overwritten by an object member with the same name.
  
    13 │ ({ a: 1, get a() {}, set a(v) {} });
    14 │ ({ get a() {}, a: 1, set a(v) {} });
  > 15 │ ({ get a() {}, set a(v) {}, a: 1 });
       │                ^^^^^^^^^^^
    16 │ 
    17 │ // valid for now
  
  i Overwritten with this value.
  
    13 │ ({ a: 1, get a() {}, set a(v) {} });
    14 │ ({ get a() {}, a: 1, set a(v) {} });
  > 15 │ ({ get a() {}, set a(v) {}, a: 1 });
       │                             ^^^^
    16 │ 
    17 │ // valid for now
  
  i If an object property with the same name is defined multiple times (except when combining a getter with a setter), only the last definition makes it into the object and previous definitions are ignored.
  
  i Suggested fix: Remove this setter named a
  
    15 │ ({·get·a()·{},·set·a(v)·{},·a:·1·});
       │                -------------        

```


