---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: invalidImport.tsx
---
# Input
```js
import CustomReactDOM, { render as customRender } from "react-dom";

const a = CustomReactDOM.render(<div />, document.body);
const foo = bar && CustomReactDOM.render(<div />, document.body);
const foo = bar ? CustomReactDOM.render(<div />, document.body) : null
const foo = () => CustomReactDOM.render(<div />, document.body);
const foo = {
    react: CustomReactDOM.render(<div />, document.body)
};
let lorem;
lorem = CustomReactDOM.render(<div />, document.body);
function render1() {
    return CustomReactDOM.render(<div />, document.body)
}

const a = customRender(<div />, document.body);
const foo = bar && customRender(<div />, document.body);
const foo = bar ? customRender(<div />, document.body) : null
const foo = () => customRender(<div />, document.body);
const foo = {
    react: customRender(<div />, document.body)
};
let lorem;
lorem = customRender(<div />, document.body);
function render2() {
    return customRender(<div />, document.body)
}

```

# Diagnostics
```
invalidImport.tsx:3:11 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    1 │ import CustomReactDOM, { render as customRender } from "react-dom";
    2 │ 
  > 3 │ const a = CustomReactDOM.render(<div />, document.body);
      │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ const foo = bar && CustomReactDOM.render(<div />, document.body);
    5 │ const foo = bar ? CustomReactDOM.render(<div />, document.body) : null
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:4:20 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    3 │ const a = CustomReactDOM.render(<div />, document.body);
  > 4 │ const foo = bar && CustomReactDOM.render(<div />, document.body);
      │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ const foo = bar ? CustomReactDOM.render(<div />, document.body) : null
    6 │ const foo = () => CustomReactDOM.render(<div />, document.body);
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:5:19 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    3 │ const a = CustomReactDOM.render(<div />, document.body);
    4 │ const foo = bar && CustomReactDOM.render(<div />, document.body);
  > 5 │ const foo = bar ? CustomReactDOM.render(<div />, document.body) : null
      │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │ const foo = () => CustomReactDOM.render(<div />, document.body);
    7 │ const foo = {
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:6:19 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    4 │ const foo = bar && CustomReactDOM.render(<div />, document.body);
    5 │ const foo = bar ? CustomReactDOM.render(<div />, document.body) : null
  > 6 │ const foo = () => CustomReactDOM.render(<div />, document.body);
      │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    7 │ const foo = {
    8 │     react: CustomReactDOM.render(<div />, document.body)
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:8:12 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
     6 │ const foo = () => CustomReactDOM.render(<div />, document.body);
     7 │ const foo = {
   > 8 │     react: CustomReactDOM.render(<div />, document.body)
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     9 │ };
    10 │ let lorem;
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:11:9 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
     9 │ };
    10 │ let lorem;
  > 11 │ lorem = CustomReactDOM.render(<div />, document.body);
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    12 │ function render1() {
    13 │     return CustomReactDOM.render(<div />, document.body)
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:13:12 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    11 │ lorem = CustomReactDOM.render(<div />, document.body);
    12 │ function render1() {
  > 13 │     return CustomReactDOM.render(<div />, document.body)
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    14 │ }
    15 │ 
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:16:11 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    14 │ }
    15 │ 
  > 16 │ const a = customRender(<div />, document.body);
       │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    17 │ const foo = bar && customRender(<div />, document.body);
    18 │ const foo = bar ? customRender(<div />, document.body) : null
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:17:20 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    16 │ const a = customRender(<div />, document.body);
  > 17 │ const foo = bar && customRender(<div />, document.body);
       │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    18 │ const foo = bar ? customRender(<div />, document.body) : null
    19 │ const foo = () => customRender(<div />, document.body);
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:18:19 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    16 │ const a = customRender(<div />, document.body);
    17 │ const foo = bar && customRender(<div />, document.body);
  > 18 │ const foo = bar ? customRender(<div />, document.body) : null
       │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ const foo = () => customRender(<div />, document.body);
    20 │ const foo = {
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:19:19 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    17 │ const foo = bar && customRender(<div />, document.body);
    18 │ const foo = bar ? customRender(<div />, document.body) : null
  > 19 │ const foo = () => customRender(<div />, document.body);
       │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    20 │ const foo = {
    21 │     react: customRender(<div />, document.body)
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:21:12 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    19 │ const foo = () => customRender(<div />, document.body);
    20 │ const foo = {
  > 21 │     react: customRender(<div />, document.body)
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    22 │ };
    23 │ let lorem;
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:24:9 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    22 │ };
    23 │ let lorem;
  > 24 │ lorem = customRender(<div />, document.body);
       │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    25 │ function render2() {
    26 │     return customRender(<div />, document.body)
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```

```
invalidImport.tsx:26:12 lint/correctness/noRenderReturnValue ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Do not depend on the value returned by the function ReactDOM.render().
  
    24 │ lorem = customRender(<div />, document.body);
    25 │ function render2() {
  > 26 │     return customRender(<div />, document.body)
       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    27 │ }
    28 │ 
  
  i The returned value is legacy and future versions of react might return that value asynchronously.
    Check the React documentation for more information.
  

```


