---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: noArrayIndexKey.jsx
---
# Input
```js
import { Children, cloneElement } from "react";

// invalid
something.forEach((Element, index) => {
    <Component key={index} >foo</Component>
});
something.forEach((element, index, array) => {
    <Component key={index} >foo</Component>
});
things.filter((thing, index) => {
    otherThings.push(<Hello key={index} >foo</Hello>);
});

something.forEach((Element, index) => {
    <Component key={index} />
});
something.forEach((element, index, array) => {
    <Component key={index} />
});
things.filter((thing, index) => {
    otherThings.push(<Hello key={index} />);
});
things.reduce((collection, thing, index) => (
    collection.concat(<Hello key={index} />)
), []);

React.Children.map(this.props.children, (child, index) => (
    React.cloneElement(child, { key: index })
))

React.Children.forEach(this.props.children, function (child, index) {
    return React.cloneElement(child, { key: index })
})


Children.map(this.props.children, (child, index) => (
    cloneElement(child, { key: index })
))

Children.forEach(this.props.children, function (child, index) {
    return cloneElement(child, { key: index })
})

Children.forEach(this.props.children, function (child, index) {
    const foo = cloneElement(child, { key: index })
    return foo;
})


things.map((thing, index) => (
    React.cloneElement(thing, { key: index })
));

const mapping = {
    foo: () => (
        things.map((_, index) => <Component key={index} />)
    ),
}

class A extends React.Component {
    renderThings = () => (
        things.map((_, index) => <Component key={index} />)
    )
}

const Component1 = () => things.map((_, index) => <Component key={index} />);

const Component2 = () => (
    things.map((_, index) => <Component key={index} />)
);

function Component3() {
    return things.map((_, index) => <Component key={index} />);
}

function Component4() {
    let elements = things.map((_, index) => <Component key={index} />);
    if (condition) {
        elements = others.map((_, index) => <Component key={index} />);
    }
    return elements;
}

function Component5({things}) {
    const elements = useMemo(() => things.map((_, index) => <Component key={index} />), [things]);
    return elements;
}

function Component6({things}) {
    const elements = useMemo(() => (
        things.map((_, index) => <Component key={index} />)
    ), [things]);
    return elements;
}

function Component7() {
    return (
        <HoC>
            {({things}) => (
                things.map((_, index) => <Component key={index} />)
            )}
        </HoC>
    )
}

// valid
something.forEach((element, index) => {
    <Component key={index + "something"} >foo</Component>
});
something.forEach((element, index) => {
    <Component key={index + "something"} />

});


const mapping = {
    foo: () => (
        things.map((_, index) => <Component key={`${index}-something`} />)
    ),
}

class A extends React.Component {
    renderThings = () => (
        things.map((_, index) => <Component key={`${index}-something`} />)
    )
}

const Component8 = () => things.map((_, index) => <Component key={`${index}-something`} />);

const Component9 = () => (
    things.map((_, index) => <Component key={`${index}-something`} />)
);

function Component10() {
    return things.map((_, index) => <Component key={`${index}-something`} />);
}

function Component11() {
    let elements = things.map((_, index) => <Component key={`${index}-something`} />);
    if (condition) {
        elements = others.map((_, index) => <Component key={`${index}-something`} />);
    }
    return elements;
}

function Component12({things}) {
    const elements = useMemo(() => things.map((_, index) => <Component key={`${index}-something`x} />), [things]);
    return elements;
}

function Component13({things}) {
    const elements = useMemo(() => (
        things.map((_, index) => <Component key={`${index}-something`} />)
    ), [things]);
    return elements;
}

function Component14() {
    return (
        <HoC>
            {({things}) => (
                things.map((_, index) => <Component key={`${index}-something`} />)
            )}
        </HoC>
    )
}

```

# Diagnostics
```
noArrayIndexKey.jsx:5:21 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    3 │ // invalid
    4 │ something.forEach((Element, index) => {
  > 5 │     <Component key={index} >foo</Component>
      │                     ^^^^^
    6 │ });
    7 │ something.forEach((element, index, array) => {
  
  i This is the source of the key value.
  
    3 │ // invalid
  > 4 │ something.forEach((Element, index) => {
      │                             ^^^^^
    5 │     <Component key={index} >foo</Component>
    6 │ });
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:8:21 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
     6 │ });
     7 │ something.forEach((element, index, array) => {
   > 8 │     <Component key={index} >foo</Component>
       │                     ^^^^^
     9 │ });
    10 │ things.filter((thing, index) => {
  
  i This is the source of the key value.
  
    5 │     <Component key={index} >foo</Component>
    6 │ });
  > 7 │ something.forEach((element, index, array) => {
      │                             ^^^^^
    8 │     <Component key={index} >foo</Component>
    9 │ });
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:11:34 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
     9 │ });
    10 │ things.filter((thing, index) => {
  > 11 │     otherThings.push(<Hello key={index} >foo</Hello>);
       │                                  ^^^^^
    12 │ });
    13 │ 
  
  i This is the source of the key value.
  
     8 │     <Component key={index} >foo</Component>
     9 │ });
  > 10 │ things.filter((thing, index) => {
       │                       ^^^^^
    11 │     otherThings.push(<Hello key={index} >foo</Hello>);
    12 │ });
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:15:21 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    14 │ something.forEach((Element, index) => {
  > 15 │     <Component key={index} />
       │                     ^^^^^
    16 │ });
    17 │ something.forEach((element, index, array) => {
  
  i This is the source of the key value.
  
    12 │ });
    13 │ 
  > 14 │ something.forEach((Element, index) => {
       │                             ^^^^^
    15 │     <Component key={index} />
    16 │ });
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:18:21 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    16 │ });
    17 │ something.forEach((element, index, array) => {
  > 18 │     <Component key={index} />
       │                     ^^^^^
    19 │ });
    20 │ things.filter((thing, index) => {
  
  i This is the source of the key value.
  
    15 │     <Component key={index} />
    16 │ });
  > 17 │ something.forEach((element, index, array) => {
       │                             ^^^^^
    18 │     <Component key={index} />
    19 │ });
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:21:34 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    19 │ });
    20 │ things.filter((thing, index) => {
  > 21 │     otherThings.push(<Hello key={index} />);
       │                                  ^^^^^
    22 │ });
    23 │ things.reduce((collection, thing, index) => (
  
  i This is the source of the key value.
  
    18 │     <Component key={index} />
    19 │ });
  > 20 │ things.filter((thing, index) => {
       │                       ^^^^^
    21 │     otherThings.push(<Hello key={index} />);
    22 │ });
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:24:35 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    22 │ });
    23 │ things.reduce((collection, thing, index) => (
  > 24 │     collection.concat(<Hello key={index} />)
       │                                   ^^^^^
    25 │ ), []);
    26 │ 
  
  i This is the source of the key value.
  
    21 │     otherThings.push(<Hello key={index} />);
    22 │ });
  > 23 │ things.reduce((collection, thing, index) => (
       │                                   ^^^^^
    24 │     collection.concat(<Hello key={index} />)
    25 │ ), []);
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:28:38 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    27 │ React.Children.map(this.props.children, (child, index) => (
  > 28 │     React.cloneElement(child, { key: index })
       │                                      ^^^^^
    29 │ ))
    30 │ 
  
  i This is the source of the key value.
  
    25 │ ), []);
    26 │ 
  > 27 │ React.Children.map(this.props.children, (child, index) => (
       │                                                 ^^^^^
    28 │     React.cloneElement(child, { key: index })
    29 │ ))
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:32:45 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    31 │ React.Children.forEach(this.props.children, function (child, index) {
  > 32 │     return React.cloneElement(child, { key: index })
       │                                             ^^^^^
    33 │ })
    34 │ 
  
  i This is the source of the key value.
  
    29 │ ))
    30 │ 
  > 31 │ React.Children.forEach(this.props.children, function (child, index) {
       │                                                              ^^^^^
    32 │     return React.cloneElement(child, { key: index })
    33 │ })
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:37:32 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    36 │ Children.map(this.props.children, (child, index) => (
  > 37 │     cloneElement(child, { key: index })
       │                                ^^^^^
    38 │ ))
    39 │ 
  
  i This is the source of the key value.
  
  > 36 │ Children.map(this.props.children, (child, index) => (
       │                                           ^^^^^
    37 │     cloneElement(child, { key: index })
    38 │ ))
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:41:39 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    40 │ Children.forEach(this.props.children, function (child, index) {
  > 41 │     return cloneElement(child, { key: index })
       │                                       ^^^^^
    42 │ })
    43 │ 
  
  i This is the source of the key value.
  
    38 │ ))
    39 │ 
  > 40 │ Children.forEach(this.props.children, function (child, index) {
       │                                                        ^^^^^
    41 │     return cloneElement(child, { key: index })
    42 │ })
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:45:44 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    44 │ Children.forEach(this.props.children, function (child, index) {
  > 45 │     const foo = cloneElement(child, { key: index })
       │                                            ^^^^^
    46 │     return foo;
    47 │ })
  
  i This is the source of the key value.
  
    42 │ })
    43 │ 
  > 44 │ Children.forEach(this.props.children, function (child, index) {
       │                                                        ^^^^^
    45 │     const foo = cloneElement(child, { key: index })
    46 │     return foo;
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:51:38 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    50 │ things.map((thing, index) => (
  > 51 │     React.cloneElement(thing, { key: index })
       │                                      ^^^^^
    52 │ ));
    53 │ 
  
  i This is the source of the key value.
  
  > 50 │ things.map((thing, index) => (
       │                    ^^^^^
    51 │     React.cloneElement(thing, { key: index })
    52 │ ));
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:56:50 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    54 │ const mapping = {
    55 │     foo: () => (
  > 56 │         things.map((_, index) => <Component key={index} />)
       │                                                  ^^^^^
    57 │     ),
    58 │ }
  
  i This is the source of the key value.
  
    54 │ const mapping = {
    55 │     foo: () => (
  > 56 │         things.map((_, index) => <Component key={index} />)
       │                        ^^^^^
    57 │     ),
    58 │ }
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:62:50 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    60 │ class A extends React.Component {
    61 │     renderThings = () => (
  > 62 │         things.map((_, index) => <Component key={index} />)
       │                                                  ^^^^^
    63 │     )
    64 │ }
  
  i This is the source of the key value.
  
    60 │ class A extends React.Component {
    61 │     renderThings = () => (
  > 62 │         things.map((_, index) => <Component key={index} />)
       │                        ^^^^^
    63 │     )
    64 │ }
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:66:67 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    64 │ }
    65 │ 
  > 66 │ const Component1 = () => things.map((_, index) => <Component key={index} />);
       │                                                                   ^^^^^
    67 │ 
    68 │ const Component2 = () => (
  
  i This is the source of the key value.
  
    64 │ }
    65 │ 
  > 66 │ const Component1 = () => things.map((_, index) => <Component key={index} />);
       │                                         ^^^^^
    67 │ 
    68 │ const Component2 = () => (
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:69:46 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    68 │ const Component2 = () => (
  > 69 │     things.map((_, index) => <Component key={index} />)
       │                                              ^^^^^
    70 │ );
    71 │ 
  
  i This is the source of the key value.
  
    68 │ const Component2 = () => (
  > 69 │     things.map((_, index) => <Component key={index} />)
       │                    ^^^^^
    70 │ );
    71 │ 
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:73:53 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    72 │ function Component3() {
  > 73 │     return things.map((_, index) => <Component key={index} />);
       │                                                     ^^^^^
    74 │ }
    75 │ 
  
  i This is the source of the key value.
  
    72 │ function Component3() {
  > 73 │     return things.map((_, index) => <Component key={index} />);
       │                           ^^^^^
    74 │ }
    75 │ 
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:77:61 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    76 │ function Component4() {
  > 77 │     let elements = things.map((_, index) => <Component key={index} />);
       │                                                             ^^^^^
    78 │     if (condition) {
    79 │         elements = others.map((_, index) => <Component key={index} />);
  
  i This is the source of the key value.
  
    76 │ function Component4() {
  > 77 │     let elements = things.map((_, index) => <Component key={index} />);
       │                                   ^^^^^
    78 │     if (condition) {
    79 │         elements = others.map((_, index) => <Component key={index} />);
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:79:61 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    77 │     let elements = things.map((_, index) => <Component key={index} />);
    78 │     if (condition) {
  > 79 │         elements = others.map((_, index) => <Component key={index} />);
       │                                                             ^^^^^
    80 │     }
    81 │     return elements;
  
  i This is the source of the key value.
  
    77 │     let elements = things.map((_, index) => <Component key={index} />);
    78 │     if (condition) {
  > 79 │         elements = others.map((_, index) => <Component key={index} />);
       │                                   ^^^^^
    80 │     }
    81 │     return elements;
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:85:77 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    84 │ function Component5({things}) {
  > 85 │     const elements = useMemo(() => things.map((_, index) => <Component key={index} />), [things]);
       │                                                                             ^^^^^
    86 │     return elements;
    87 │ }
  
  i This is the source of the key value.
  
    84 │ function Component5({things}) {
  > 85 │     const elements = useMemo(() => things.map((_, index) => <Component key={index} />), [things]);
       │                                                   ^^^^^
    86 │     return elements;
    87 │ }
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:91:50 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
    89 │ function Component6({things}) {
    90 │     const elements = useMemo(() => (
  > 91 │         things.map((_, index) => <Component key={index} />)
       │                                                  ^^^^^
    92 │     ), [things]);
    93 │     return elements;
  
  i This is the source of the key value.
  
    89 │ function Component6({things}) {
    90 │     const elements = useMemo(() => (
  > 91 │         things.map((_, index) => <Component key={index} />)
       │                        ^^^^^
    92 │     ), [things]);
    93 │     return elements;
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```

```
noArrayIndexKey.jsx:100:58 lint/correctness/noArrayIndexKey ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  ! Avoid using the index of an array as key property in an element.
  
     98 │         <HoC>
     99 │             {({things}) => (
  > 100 │                 things.map((_, index) => <Component key={index} />)
        │                                                          ^^^^^
    101 │             )}
    102 │         </HoC>
  
  i This is the source of the key value.
  
     98 │         <HoC>
     99 │             {({things}) => (
  > 100 │                 things.map((_, index) => <Component key={index} />)
        │                                ^^^^^
    101 │             )}
    102 │         </HoC>
  
  i The order of the items may change, and this also affects performances and component state.
  
  i Check the React documentation. 
  

```


