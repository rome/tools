---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: "typescript\\infer-extends\\basic.ts"
---

# Input

```js
type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
type X8<U, T> = T extends infer U extends number ? U : T;
type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,15 +1,8 @@
 type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
-type X4<T> = T extends [infer U extends number, infer U extends number]
-  ? MustBeNumber<U>
-  : never;
-type X5<T> = T extends [infer U extends number, infer U]
-  ? MustBeNumber<U>
-  : never;
-type X6<T> = T extends [infer U, infer U extends number]
-  ? MustBeNumber<U>
-  : never;
-type X7<T> = T extends [infer U extends string, infer U extends number]
-  ? U
-  : never;
-type X8<U, T> = T extends infer U extends number ? U : T;
+type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
+type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
+type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
+type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
+type X8<U, T> = T extends infer U extends number
+? U : T
 type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
```

# Output

```js
type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
type X8<U, T> = T extends infer U extends number
? U : T
type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
```


# Errors
```
basic.ts:1:47 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `]`
  
  × unexpected
  
    ┌─ basic.ts:1:47
    │
  1 │ type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
    │                                               ^
  
basic.ts:2:47 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `,`
  
  × unexpected
  
    ┌─ basic.ts:2:47
    │
  2 │ type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
    │                                               ^
  
basic.ts:2:71 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `]`
  
  × unexpected
  
    ┌─ basic.ts:2:71
    │
  2 │ type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
    │                                                                       ^
  
basic.ts:3:47 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `,`
  
  × unexpected
  
    ┌─ basic.ts:3:47
    │
  3 │ type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
    │                                               ^
  
basic.ts:4:56 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `]`
  
  × unexpected
  
    ┌─ basic.ts:4:56
    │
  4 │ type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
    │                                                        ^
  
basic.ts:5:47 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `,`
  
  × unexpected
  
    ┌─ basic.ts:5:47
    │
  5 │ type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
    │                                               ^
  
basic.ts:5:71 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `]`
  
  × unexpected
  
    ┌─ basic.ts:5:71
    │
  5 │ type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
    │                                                                       ^
  
basic.ts:6:35 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `?` but instead found `extends`
  
  × unexpected
  
    ┌─ basic.ts:6:35
    │
  6 │ type X8<U, T> = T extends infer U extends number ? U : T;
    │                                   ^^^^^^^
  
basic.ts:6:43 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `number`
  
  × unexpected
  
    ┌─ basic.ts:6:43
    │
  6 │ type X8<U, T> = T extends infer U extends number ? U : T;
    │                                           ^^^^^^
  
basic.ts:6:50 SyntaxError ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  × An explicit or implicit semicolon is expected here...
  
    ┌─ basic.ts:6:50
    │
  6 │ type X8<U, T> = T extends infer U extends number ? U : T;
    │                                                  ^
  
  i ...Which is required to end this statement
  
    ┌─ basic.ts:6:1
    │
  6 │ type X8<U, T> = T extends infer U extends number ? U : T;
    │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  

```

# Lines exceeding max width of 80 characters
```
    2: type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
    3: type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
    4: type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
    5: type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
```

