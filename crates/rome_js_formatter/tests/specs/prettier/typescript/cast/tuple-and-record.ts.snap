---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: typescript/cast/tuple-and-record.ts
---

# Input

```ts
breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)[receiverType];
breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);

testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,9 +1,11 @@
 breakAfterCast = <PermissionsChecker<any> | undefined>(
   (<any>permissions)[receiverType]
 );
-breakAfterCast = <PermissionsChecker<any> | undefined>(
-  (<any>permissions)(#[receiverType])
-);
+breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);
 
 testObjLiteral = <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
-testObjLiteral = <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
+testObjLiteral =  <PermissionsChecker<any> | undefined>
+#
+{
+  prop1: "myPropVal";
+}
```

# Output

```ts
breakAfterCast = <PermissionsChecker<any> | undefined>(
  (<any>permissions)[receiverType]
);
breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);

testObjLiteral = <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
testObjLiteral =  <PermissionsChecker<any> | undefined>
#
{
  prop1: "myPropVal";
}
```

# Errors
```
tuple-and-record.ts:2:75 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an identifier but instead found '['
  
    1 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)[receiverType];
  > 2 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);
      │                                                                           ^
    3 │ 
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  
  i Expected an identifier here
  
    1 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)[receiverType];
  > 2 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);
      │                                                                           ^
    3 │ 
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  
tuple-and-record.ts:2:74 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Private names are only allowed on the left side of a 'in' expression
  
    1 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)[receiverType];
  > 2 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);
      │                                                                          ^
    3 │ 
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  
tuple-and-record.ts:2:75 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `[`
  
    1 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)[receiverType];
  > 2 │ breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);
      │                                                                           ^
    3 │ 
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  
  i Remove [
  
tuple-and-record.ts:5:56 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '#'
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                        ^
    6 │ 
  
  i Expected an expression here
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                        ^
    6 │ 
  
tuple-and-record.ts:5:57 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an identifier but instead found '{'
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                         ^
    6 │ 
  
  i Expected an identifier here
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                         ^
    6 │ 
  
tuple-and-record.ts:5:56 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Private names are only allowed on the left side of a 'in' expression
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                        ^
    6 │ 
  
tuple-and-record.ts:5:57 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                         ^
    6 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                         ^
    6 │ 
  
  i ...Which is required to end this statement
  
    4 │ testObjLiteral =  <PermissionsChecker<any> | undefined>{ prop1: "myPropVal" };
  > 5 │ testObjLiteral =  <PermissionsChecker<any> | undefined>#{ prop1: "myPropVal" };
      │                                                        ^^
    6 │ 
  

```

# Lines exceeding max width of 80 characters
```
    4: breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);
```


