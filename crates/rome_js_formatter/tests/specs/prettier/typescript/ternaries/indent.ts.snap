---
source: crates/rome_js_formatter/tests/prettier_tests.rs
assertion_line: 125
expression: indent.ts

---
# Input
```js
foo = (callNode.parent?.type === AST_NODE_TYPES.ChainExpression
  ? callNode.parent.parent
  : callNode.parent
).TSESTree!.BinaryExpression;

foo = (callNode.parent?.type === AST_NODE_TYPES.ChainExpression
  ? callNode.parent.parent
  : callNode.parent
).TSESTree!.BinaryExpression;

bifornCringerMoshedPerplexSawder = (glimseGlyphsHazardNoopsTieTie === 0 &&
kochabCooieGameOnOboleUnweave === Math.PI
  ? averredBathersBoxroomBuggyNurl
  : anodyneCondosMalateOverateRetinol
).annularCooeedSplicesWalksWayWay
  .annularCooeedSplicesWalksWayWay(annularCooeedSplicesWalksWayWay)!
  .annularCooeedSplicesWalksWayWay();

foo = (callNode.parent?.type === AST_NODE_TYPES.ChainExpression
  ? callNode.parent.parent
  : callNode.parent
).TSESTree!.BinaryExpression!;

foo = (callNode.parent?.type === AST_NODE_TYPES.ChainExpression
  ? callNode.parent.parent
  : callNode.parent
).TSESTree!.BinaryExpression!;

bifornCringerMoshedPerplexSawder = (glimseGlyphsHazardNoopsTieTie === 0 &&
kochabCooieGameOnOboleUnweave === Math.PI
  ? averredBathersBoxroomBuggyNurl
  : anodyneCondosMalateOverateRetinol
).annularCooeedSplicesWalksWayWay
  .annularCooeedSplicesWalksWayWay(annularCooeedSplicesWalksWayWay)!
  .annularCooeedSplicesWalksWayWay()!;

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans +
  (glimseGlyphsHazardNoopsTieTie === 0
    ? averredBathersBoxroomBuggyNurl
    : anodyneCondosMalateOverateRetinol
  ).Foo!.foo;

foo = (coooooooooooooooooooooooooooooooooooooooooooooooooooond
  ? baaaaaaaaaaaaaaaaaaaaar
  : baaaaaaaaaaaaaaaaaaaaaz)!;

foo = (coooooooooooooooooooooooooooooooooooooooooooooooooooond
  ? baaaaaaaaaaaaaaaaaaaaar
  : baaaaaaaaaaaaaaaaaaaaaz)!!!!!;

```

# Output
```js
foo =
  (
    callNode.parent?.type === AST_NODE_TYPES.ChainExpression ? callNode.parent.parent : callNode.parent
  ).TSESTree!.BinaryExpression;

foo =
  (
    callNode.parent?.type === AST_NODE_TYPES.ChainExpression ? callNode.parent.parent : callNode.parent
  ).TSESTree!.BinaryExpression;

bifornCringerMoshedPerplexSawder =
  (
    glimseGlyphsHazardNoopsTieTie === 0 && kochabCooieGameOnOboleUnweave === Math.PI ? averredBathersBoxroomBuggyNurl : anodyneCondosMalateOverateRetinol
  ).annularCooeedSplicesWalksWayWay.annularCooeedSplicesWalksWayWay(
    annularCooeedSplicesWalksWayWay,
  )!.annularCooeedSplicesWalksWayWay();

foo =
  (
    callNode.parent?.type === AST_NODE_TYPES.ChainExpression ? callNode.parent.parent : callNode.parent
  ).TSESTree!.BinaryExpression!;

foo =
  (
    callNode.parent?.type === AST_NODE_TYPES.ChainExpression ? callNode.parent.parent : callNode.parent
  ).TSESTree!.BinaryExpression!;

bifornCringerMoshedPerplexSawder =
  (
    glimseGlyphsHazardNoopsTieTie === 0 && kochabCooieGameOnOboleUnweave === Math.PI ? averredBathersBoxroomBuggyNurl : anodyneCondosMalateOverateRetinol
  ).annularCooeedSplicesWalksWayWay.annularCooeedSplicesWalksWayWay(
    annularCooeedSplicesWalksWayWay,
  )!.annularCooeedSplicesWalksWayWay()!;

bifornCringerMoshedPerplexSawder =
  askTrovenaBeenaDependsRowans + (
    glimseGlyphsHazardNoopsTieTie === 0 ? averredBathersBoxroomBuggyNurl : anodyneCondosMalateOverateRetinol
  ).Foo!.foo;

foo =
  (
    coooooooooooooooooooooooooooooooooooooooooooooooooooond ? baaaaaaaaaaaaaaaaaaaaar : baaaaaaaaaaaaaaaaaaaaaz
  )!;

foo =
  (
    coooooooooooooooooooooooooooooooooooooooooooooooooooond ? baaaaaaaaaaaaaaaaaaaaar : baaaaaaaaaaaaaaaaaaaaaz
  )!!!!!;

```


