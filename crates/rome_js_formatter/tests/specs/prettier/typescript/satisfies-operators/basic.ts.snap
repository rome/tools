---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: typescript/satisfies-operators/basic.ts
---

# Input

```js
const t1 = { a: 1 } satisfies I1;
const t2 = { a: 1, b: 1 } satisfies I1;
const t3 = { } satisfies I1;
const t4: T1 = { a: "a" } satisfies T1;
const t5 = (m => m.substring(0)) satisfies T2;
const t6 = [1, 2] satisfies [number, number];
let t7 = { a: 'test' } satisfies A;
let t8 = { a: 'test', b: 'test' } satisfies A;

const p = {
  isEven: n => n % 2 === 0,
  isOdd: n => n % 2 === 1
} satisfies Predicates;

let obj: { f(s: string): void } & Record<string, unknown> = {
    f(s) { },
    g(s) { }
} satisfies { g(s: string): void } & Record<string, unknown>;

({ f(x) { } }) satisfies { f(s: string): void };

const car = {
    start() { },
    move(d) {
        // d should be number
    },
    stop() { }
} satisfies Movable & Record<string, unknown>;

var v = undefined satisfies 1;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,23 +1,51 @@
-const t1 = { a: 1 } satisfies I1;
-const t2 = { a: 1, b: 1 } satisfies I1;
-const t3 = {} satisfies I1;
-const t4: T1 = { a: "a" } satisfies T1;
-const t5 = ((m) => m.substring(0)) satisfies T2;
-const t6 = [1, 2] satisfies [number, number];
-let t7 = { a: "test" } satisfies A;
-let t8 = { a: "test", b: "test" } satisfies A;
+const t1 = { a: 1 };
+satisfies;
+I1;
+const t2 = { a: 1, b: 1 };
+satisfies;
+I1;
+const t3 = {};
+satisfies;
+I1;
+const t4: T1 = { a: "a" };
+satisfies;
+T1;
+const t5 = (m) => m.substring(0);
+satisfies;
+T2;
+const t6 = [1, 2];
+satisfies[(number, number)];
+let t7 = { a: "test" };
+satisfies;
+A;
+let t8 = { a: "test", b: "test" };
+satisfies;
+A;
 
 const p = {
   isEven: (n) => n % 2 === 0,
   isOdd: (n) => n % 2 === 1,
-} satisfies Predicates;
+};
+satisfies;
+Predicates;
 
 let obj: { f(s: string): void } & Record<string, unknown> = {
   f(s) {},
   g(s) {},
-} satisfies { g(s: string): void } & Record<string, unknown>;
+};
+satisfies;
+{
+  g(s: string)
+  : void
+}
+& Record<string, unknown>
 
-({ f(x) {} } satisfies { f(s: string): void });
+({ f(x) {} });
+satisfies;
+{
+  f(s: string)
+  : void
+}
 
 const car = {
   start() {},
@@ -25,6 +53,10 @@
     // d should be number
   },
   stop() {},
-} satisfies Movable & Record<string, unknown>;
+};
+satisfies;
+Movable & Record<string, unknown>;
 
-var v = undefined satisfies 1;
+var v = undefined;
+satisfies;
+1;
```

# Output

```js
const t1 = { a: 1 };
satisfies;
I1;
const t2 = { a: 1, b: 1 };
satisfies;
I1;
const t3 = {};
satisfies;
I1;
const t4: T1 = { a: "a" };
satisfies;
T1;
const t5 = (m) => m.substring(0);
satisfies;
T2;
const t6 = [1, 2];
satisfies[(number, number)];
let t7 = { a: "test" };
satisfies;
A;
let t8 = { a: "test", b: "test" };
satisfies;
A;

const p = {
  isEven: (n) => n % 2 === 0,
  isOdd: (n) => n % 2 === 1,
};
satisfies;
Predicates;

let obj: { f(s: string): void } & Record<string, unknown> = {
  f(s) {},
  g(s) {},
};
satisfies;
{
  g(s: string)
  : void
}
& Record<string, unknown>

({ f(x) {} });
satisfies;
{
  f(s: string)
  : void
}

const car = {
  start() {},
  move(d) {
    // d should be number
  },
  stop() {},
};
satisfies;
Movable & Record<string, unknown>;

var v = undefined;
satisfies;
1;
```


# Errors
```
basic.ts:1:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ const t1 = { a: 1 } satisfies I1;
      │                     ^^^^^^^^^
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ const t1 = { a: 1 } satisfies I1;
      │                     ^^^^^^^^^
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  
  i ...Which is required to end this statement
  
  > 1 │ const t1 = { a: 1 } satisfies I1;
      │ ^^^^^^^^^^^^^^^^^^^^
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  
basic.ts:1:31 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ const t1 = { a: 1 } satisfies I1;
      │                               ^^
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ const t1 = { a: 1 } satisfies I1;
      │                               ^^
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  
  i ...Which is required to end this statement
  
  > 1 │ const t1 = { a: 1 } satisfies I1;
      │                     ^^^^^^^^^^^^
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  
basic.ts:2:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const t1 = { a: 1 } satisfies I1;
  > 2 │ const t2 = { a: 1, b: 1 } satisfies I1;
      │                           ^^^^^^^^^
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const t1 = { a: 1 } satisfies I1;
  > 2 │ const t2 = { a: 1, b: 1 } satisfies I1;
      │                           ^^^^^^^^^
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  
  i ...Which is required to end this statement
  
    1 │ const t1 = { a: 1 } satisfies I1;
  > 2 │ const t2 = { a: 1, b: 1 } satisfies I1;
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  
basic.ts:2:37 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const t1 = { a: 1 } satisfies I1;
  > 2 │ const t2 = { a: 1, b: 1 } satisfies I1;
      │                                     ^^
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const t1 = { a: 1 } satisfies I1;
  > 2 │ const t2 = { a: 1, b: 1 } satisfies I1;
      │                                     ^^
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  
  i ...Which is required to end this statement
  
    1 │ const t1 = { a: 1 } satisfies I1;
  > 2 │ const t2 = { a: 1, b: 1 } satisfies I1;
      │                           ^^^^^^^^^^^^
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  
basic.ts:3:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const t1 = { a: 1 } satisfies I1;
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
  > 3 │ const t3 = { } satisfies I1;
      │                ^^^^^^^^^
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const t1 = { a: 1 } satisfies I1;
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
  > 3 │ const t3 = { } satisfies I1;
      │                ^^^^^^^^^
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  
  i ...Which is required to end this statement
  
    1 │ const t1 = { a: 1 } satisfies I1;
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
  > 3 │ const t3 = { } satisfies I1;
      │ ^^^^^^^^^^^^^^^
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  
basic.ts:3:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const t1 = { a: 1 } satisfies I1;
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
  > 3 │ const t3 = { } satisfies I1;
      │                          ^^
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const t1 = { a: 1 } satisfies I1;
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
  > 3 │ const t3 = { } satisfies I1;
      │                          ^^
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  
  i ...Which is required to end this statement
  
    1 │ const t1 = { a: 1 } satisfies I1;
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
  > 3 │ const t3 = { } satisfies I1;
      │                ^^^^^^^^^^^^
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  
basic.ts:4:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  > 4 │ const t4: T1 = { a: "a" } satisfies T1;
      │                           ^^^^^^^^^
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  
  i An explicit or implicit semicolon is expected here...
  
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  > 4 │ const t4: T1 = { a: "a" } satisfies T1;
      │                           ^^^^^^^^^
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  
  i ...Which is required to end this statement
  
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  > 4 │ const t4: T1 = { a: "a" } satisfies T1;
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  
basic.ts:4:37 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  > 4 │ const t4: T1 = { a: "a" } satisfies T1;
      │                                     ^^
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  
  i An explicit or implicit semicolon is expected here...
  
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  > 4 │ const t4: T1 = { a: "a" } satisfies T1;
      │                                     ^^
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  
  i ...Which is required to end this statement
  
    2 │ const t2 = { a: 1, b: 1 } satisfies I1;
    3 │ const t3 = { } satisfies I1;
  > 4 │ const t4: T1 = { a: "a" } satisfies T1;
      │                           ^^^^^^^^^^^^
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  
basic.ts:5:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  > 5 │ const t5 = (m => m.substring(0)) satisfies T2;
      │                                  ^^^^^^^^^
    6 │ const t6 = [1, 2] satisfies [number, number];
    7 │ let t7 = { a: 'test' } satisfies A;
  
  i An explicit or implicit semicolon is expected here...
  
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  > 5 │ const t5 = (m => m.substring(0)) satisfies T2;
      │                                  ^^^^^^^^^
    6 │ const t6 = [1, 2] satisfies [number, number];
    7 │ let t7 = { a: 'test' } satisfies A;
  
  i ...Which is required to end this statement
  
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  > 5 │ const t5 = (m => m.substring(0)) satisfies T2;
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    6 │ const t6 = [1, 2] satisfies [number, number];
    7 │ let t7 = { a: 'test' } satisfies A;
  
basic.ts:5:44 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  > 5 │ const t5 = (m => m.substring(0)) satisfies T2;
      │                                            ^^
    6 │ const t6 = [1, 2] satisfies [number, number];
    7 │ let t7 = { a: 'test' } satisfies A;
  
  i An explicit or implicit semicolon is expected here...
  
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  > 5 │ const t5 = (m => m.substring(0)) satisfies T2;
      │                                            ^^
    6 │ const t6 = [1, 2] satisfies [number, number];
    7 │ let t7 = { a: 'test' } satisfies A;
  
  i ...Which is required to end this statement
  
    3 │ const t3 = { } satisfies I1;
    4 │ const t4: T1 = { a: "a" } satisfies T1;
  > 5 │ const t5 = (m => m.substring(0)) satisfies T2;
      │                                  ^^^^^^^^^^^^
    6 │ const t6 = [1, 2] satisfies [number, number];
    7 │ let t7 = { a: 'test' } satisfies A;
  
basic.ts:6:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  > 6 │ const t6 = [1, 2] satisfies [number, number];
      │                   ^^^^^^^^^
    7 │ let t7 = { a: 'test' } satisfies A;
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
  
  i An explicit or implicit semicolon is expected here...
  
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  > 6 │ const t6 = [1, 2] satisfies [number, number];
      │                   ^^^^^^^^^
    7 │ let t7 = { a: 'test' } satisfies A;
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
  
  i ...Which is required to end this statement
  
    4 │ const t4: T1 = { a: "a" } satisfies T1;
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
  > 6 │ const t6 = [1, 2] satisfies [number, number];
      │ ^^^^^^^^^^^^^^^^^^
    7 │ let t7 = { a: 'test' } satisfies A;
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
  
basic.ts:7:24 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  > 7 │ let t7 = { a: 'test' } satisfies A;
      │                        ^^^^^^^^^
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
    9 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  > 7 │ let t7 = { a: 'test' } satisfies A;
      │                        ^^^^^^^^^
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
    9 │ 
  
  i ...Which is required to end this statement
  
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  > 7 │ let t7 = { a: 'test' } satisfies A;
      │ ^^^^^^^^^^^^^^^^^^^^^^^
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
    9 │ 
  
basic.ts:7:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  > 7 │ let t7 = { a: 'test' } satisfies A;
      │                                  ^
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
    9 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  > 7 │ let t7 = { a: 'test' } satisfies A;
      │                                  ^
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
    9 │ 
  
  i ...Which is required to end this statement
  
    5 │ const t5 = (m => m.substring(0)) satisfies T2;
    6 │ const t6 = [1, 2] satisfies [number, number];
  > 7 │ let t7 = { a: 'test' } satisfies A;
      │                        ^^^^^^^^^^^
    8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
    9 │ 
  
basic.ts:8:35 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     6 │ const t6 = [1, 2] satisfies [number, number];
     7 │ let t7 = { a: 'test' } satisfies A;
   > 8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
       │                                   ^^^^^^^^^
     9 │ 
    10 │ const p = {
  
  i An explicit or implicit semicolon is expected here...
  
     6 │ const t6 = [1, 2] satisfies [number, number];
     7 │ let t7 = { a: 'test' } satisfies A;
   > 8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
       │                                   ^^^^^^^^^
     9 │ 
    10 │ const p = {
  
  i ...Which is required to end this statement
  
     6 │ const t6 = [1, 2] satisfies [number, number];
     7 │ let t7 = { a: 'test' } satisfies A;
   > 8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     9 │ 
    10 │ const p = {
  
basic.ts:8:45 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     6 │ const t6 = [1, 2] satisfies [number, number];
     7 │ let t7 = { a: 'test' } satisfies A;
   > 8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
       │                                             ^
     9 │ 
    10 │ const p = {
  
  i An explicit or implicit semicolon is expected here...
  
     6 │ const t6 = [1, 2] satisfies [number, number];
     7 │ let t7 = { a: 'test' } satisfies A;
   > 8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
       │                                             ^
     9 │ 
    10 │ const p = {
  
  i ...Which is required to end this statement
  
     6 │ const t6 = [1, 2] satisfies [number, number];
     7 │ let t7 = { a: 'test' } satisfies A;
   > 8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
       │                                   ^^^^^^^^^^^
     9 │ 
    10 │ const p = {
  
basic.ts:13:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    11 │   isEven: n => n % 2 === 0,
    12 │   isOdd: n => n % 2 === 1
  > 13 │ } satisfies Predicates;
       │   ^^^^^^^^^
    14 │ 
    15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
  
  i An explicit or implicit semicolon is expected here...
  
    11 │   isEven: n => n % 2 === 0,
    12 │   isOdd: n => n % 2 === 1
  > 13 │ } satisfies Predicates;
       │   ^^^^^^^^^
    14 │ 
    15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
  
  i ...Which is required to end this statement
  
     8 │ let t8 = { a: 'test', b: 'test' } satisfies A;
     9 │ 
  > 10 │ const p = {
       │ ^^^^^^^^^^^
  > 11 │   isEven: n => n % 2 === 0,
  > 12 │   isOdd: n => n % 2 === 1
  > 13 │ } satisfies Predicates;
       │ ^^
    14 │ 
    15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
  
basic.ts:13:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    11 │   isEven: n => n % 2 === 0,
    12 │   isOdd: n => n % 2 === 1
  > 13 │ } satisfies Predicates;
       │             ^^^^^^^^^^
    14 │ 
    15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
  
  i An explicit or implicit semicolon is expected here...
  
    11 │   isEven: n => n % 2 === 0,
    12 │   isOdd: n => n % 2 === 1
  > 13 │ } satisfies Predicates;
       │             ^^^^^^^^^^
    14 │ 
    15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
  
  i ...Which is required to end this statement
  
    11 │   isEven: n => n % 2 === 0,
    12 │   isOdd: n => n % 2 === 1
  > 13 │ } satisfies Predicates;
       │   ^^^^^^^^^^^^^^^^^^^^
    14 │ 
    15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
  
basic.ts:18:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │   ^^^^^^^^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i An explicit or implicit semicolon is expected here...
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │   ^^^^^^^^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i ...Which is required to end this statement
  
    13 │ } satisfies Predicates;
    14 │ 
  > 15 │ let obj: { f(s: string): void } & Record<string, unknown> = {
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 16 │     f(s) { },
  > 17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │ ^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
basic.ts:18:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │             ^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i An explicit or implicit semicolon is expected here...
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │             ^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i ...Which is required to end this statement
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │   ^^^^^^^^^^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
basic.ts:18:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `:`
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │                  ^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i Remove :
  
basic.ts:18:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │                           ^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i An explicit or implicit semicolon is expected here...
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │                           ^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i ...Which is required to end this statement
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │               ^^^^^^^^^^^^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
basic.ts:18:36 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found '& Record<string, unknown>'
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
  i Expected a statement here
  
    16 │     f(s) { },
    17 │     g(s) { }
  > 18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
       │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ 
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
  
basic.ts:20:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                ^^^^^^^^^
    21 │ 
    22 │ const car = {
  
  i An explicit or implicit semicolon is expected here...
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                ^^^^^^^^^
    21 │ 
    22 │ const car = {
  
  i ...Which is required to end this statement
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │ ^^^^^^^^^^^^^^^^^^^^^^^^
    21 │ 
    22 │ const car = {
  
basic.ts:20:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                          ^
    21 │ 
    22 │ const car = {
  
  i An explicit or implicit semicolon is expected here...
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                          ^
    21 │ 
    22 │ const car = {
  
  i ...Which is required to end this statement
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                ^^^^^^^^^^^
    21 │ 
    22 │ const car = {
  
basic.ts:20:31 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `:`
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                               ^
    21 │ 
    22 │ const car = {
  
  i Remove :
  
basic.ts:20:40 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                                        ^
    21 │ 
    22 │ const car = {
  
  i An explicit or implicit semicolon is expected here...
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                                        ^
    21 │ 
    22 │ const car = {
  
  i ...Which is required to end this statement
  
    18 │ } satisfies { g(s: string): void } & Record<string, unknown>;
    19 │ 
  > 20 │ ({ f(x) { } }) satisfies { f(s: string): void };
       │                            ^^^^^^^^^^^^^
    21 │ 
    22 │ const car = {
  
basic.ts:28:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    26 │     },
    27 │     stop() { }
  > 28 │ } satisfies Movable & Record<string, unknown>;
       │   ^^^^^^^^^
    29 │ 
    30 │ var v = undefined satisfies 1;
  
  i An explicit or implicit semicolon is expected here...
  
    26 │     },
    27 │     stop() { }
  > 28 │ } satisfies Movable & Record<string, unknown>;
       │   ^^^^^^^^^
    29 │ 
    30 │ var v = undefined satisfies 1;
  
  i ...Which is required to end this statement
  
    20 │ ({ f(x) { } }) satisfies { f(s: string): void };
    21 │ 
  > 22 │ const car = {
       │ ^^^^^^^^^^^^^
  > 23 │     start() { },
        ...
  > 27 │     stop() { }
  > 28 │ } satisfies Movable & Record<string, unknown>;
       │ ^^
    29 │ 
    30 │ var v = undefined satisfies 1;
  
basic.ts:28:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    26 │     },
    27 │     stop() { }
  > 28 │ } satisfies Movable & Record<string, unknown>;
       │             ^^^^^^^
    29 │ 
    30 │ var v = undefined satisfies 1;
  
  i An explicit or implicit semicolon is expected here...
  
    26 │     },
    27 │     stop() { }
  > 28 │ } satisfies Movable & Record<string, unknown>;
       │             ^^^^^^^
    29 │ 
    30 │ var v = undefined satisfies 1;
  
  i ...Which is required to end this statement
  
    26 │     },
    27 │     stop() { }
  > 28 │ } satisfies Movable & Record<string, unknown>;
       │   ^^^^^^^^^^^^^^^^^
    29 │ 
    30 │ var v = undefined satisfies 1;
  
basic.ts:30:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    28 │ } satisfies Movable & Record<string, unknown>;
    29 │ 
  > 30 │ var v = undefined satisfies 1;
       │                   ^^^^^^^^^
    31 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    28 │ } satisfies Movable & Record<string, unknown>;
    29 │ 
  > 30 │ var v = undefined satisfies 1;
       │                   ^^^^^^^^^
    31 │ 
  
  i ...Which is required to end this statement
  
    28 │ } satisfies Movable & Record<string, unknown>;
    29 │ 
  > 30 │ var v = undefined satisfies 1;
       │ ^^^^^^^^^^^^^^^^^^
    31 │ 
  
basic.ts:30:29 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    28 │ } satisfies Movable & Record<string, unknown>;
    29 │ 
  > 30 │ var v = undefined satisfies 1;
       │                             ^
    31 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    28 │ } satisfies Movable & Record<string, unknown>;
    29 │ 
  > 30 │ var v = undefined satisfies 1;
       │                             ^
    31 │ 
  
  i ...Which is required to end this statement
  
    28 │ } satisfies Movable & Record<string, unknown>;
    29 │ 
  > 30 │ var v = undefined satisfies 1;
       │                   ^^^^^^^^^^^
    31 │ 
  

```


