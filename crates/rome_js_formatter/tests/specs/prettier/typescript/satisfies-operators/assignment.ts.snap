---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: typescript/satisfies-operators/assignment.ts
---

# Input

```js
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes;

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function
) => string[];
  
const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
  propertyToServiceName = originalPrototype._inject;

this.previewPlayerHandle = (setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay) satisfies unknown) satisfies number;

this.intervalID = (setInterval(() => {
  self.step();
}, 30) satisfies unknown) satisfies number;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,22 +1,35 @@
-const extraRendererAttrs = ((attrs.rendererAttrs &&
-  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
-  Object.create(null)) satisfies FieldService.RendererAttributes;
+const extraRendererAttrs =
+  (attrs.rendererAttrs &&
+    this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
+  Object.create(null);
+satisfies;
+FieldService.RendererAttributes;
 
-const annotate = (angular.injector satisfies any).$$annotate satisfies (
+const annotate = (angular.injector
+satisfies;
+any;
+).$$annotate satisfies (
   fn: Function
-) => string[];
+) => string[]
 
-const originalPrototype = originalConstructor.prototype satisfies TComponent &
-    InjectionTarget,
-  propertyToServiceName = originalPrototype._inject;
+const originalPrototype = originalConstructor.prototype;
+satisfies;
+TComponent & InjectionTarget,
+  (propertyToServiceName = originalPrototype._inject);
 
-this.previewPlayerHandle = setInterval(async () => {
+this.previewPlayerHandle = (setInterval(async () => {
   if (this.previewIsPlaying) {
     await this.fetchNextPreviews();
     this.currentPreviewIndex++;
   }
-}, this.refreshDelay) satisfies unknown satisfies number;
+}, this.refreshDelay)
+satisfies;
+unknown;
+) satisfies number
 
-this.intervalID = setInterval(() => {
+this.intervalID = (setInterval(() => {
   self.step();
-}, 30) satisfies unknown satisfies number;
+}, 30)
+satisfies;
+unknown;
+) satisfies number
```

# Output

```js
const extraRendererAttrs =
  (attrs.rendererAttrs &&
    this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null);
satisfies;
FieldService.RendererAttributes;

const annotate = (angular.injector
satisfies;
any;
).$$annotate satisfies (
  fn: Function
) => string[]

const originalPrototype = originalConstructor.prototype;
satisfies;
TComponent & InjectionTarget,
  (propertyToServiceName = originalPrototype._inject);

this.previewPlayerHandle = (setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay)
satisfies;
unknown;
) satisfies number

this.intervalID = (setInterval(() => {
  self.step();
}, 30)
satisfies;
unknown;
) satisfies number
```


# Errors
```
assignment.ts:3:24 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const extraRendererAttrs = ((attrs.rendererAttrs &&
    2 │   this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  > 3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
      │                        ^^^^^^^^^
    4 │ 
    5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const extraRendererAttrs = ((attrs.rendererAttrs &&
    2 │   this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  > 3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
      │                        ^^^^^^^^^
    4 │ 
    5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
  
  i ...Which is required to end this statement
  
  > 1 │ const extraRendererAttrs = ((attrs.rendererAttrs &&
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 2 │   this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  > 3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
      │   ^^^^^^^^^^^^^^^^^^^^^
    4 │ 
    5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
  
assignment.ts:3:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const extraRendererAttrs = ((attrs.rendererAttrs &&
    2 │   this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  > 3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
      │                                  ^^^^^^^^^^^^
    4 │ 
    5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const extraRendererAttrs = ((attrs.rendererAttrs &&
    2 │   this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  > 3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
      │                                  ^^^^^^^^^^^^
    4 │ 
    5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
  
  i ...Which is required to end this statement
  
    1 │ const extraRendererAttrs = ((attrs.rendererAttrs &&
    2 │   this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  > 3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
      │                        ^^^^^^^^^^^^^^^^^^^^^^
    4 │ 
    5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
  
assignment.ts:5:36 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                    ^^^^^^^^^
    6 │   fn: Function
    7 │ ) => string[];
  
  i Remove satisfies
  
assignment.ts:5:46 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                              ^^^
    6 │   fn: Function
    7 │ ) => string[];
  
  i An explicit or implicit semicolon is expected here...
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                              ^^^
    6 │   fn: Function
    7 │ ) => string[];
  
  i ...Which is required to end this statement
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                    ^^^^^^^^^^^^^
    6 │   fn: Function
    7 │ ) => string[];
  
assignment.ts:5:49 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                                 ^
    6 │   fn: Function
    7 │ ) => string[];
  
  i An explicit or implicit semicolon is expected here...
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                                 ^
    6 │   fn: Function
    7 │ ) => string[];
  
  i ...Which is required to end this statement
  
    3 │   Object.create(null)) satisfies FieldService.RendererAttributes;
    4 │ 
  > 5 │ const annotate = (angular.injector satisfies any).$$annotate satisfies (
      │                                              ^^^^
    6 │   fn: Function
    7 │ ) => string[];
  
assignment.ts:9:57 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     7 │ ) => string[];
     8 │   
   > 9 │ const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
       │                                                         ^^^^^^^^^
    10 │   propertyToServiceName = originalPrototype._inject;
    11 │ 
  
  i An explicit or implicit semicolon is expected here...
  
     7 │ ) => string[];
     8 │   
   > 9 │ const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
       │                                                         ^^^^^^^^^
    10 │   propertyToServiceName = originalPrototype._inject;
    11 │ 
  
  i ...Which is required to end this statement
  
     7 │ ) => string[];
     8 │   
   > 9 │ const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    10 │   propertyToServiceName = originalPrototype._inject;
    11 │ 
  
assignment.ts:9:67 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     7 │ ) => string[];
     8 │   
   > 9 │ const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
       │                                                                   ^^^^^^^^^^
    10 │   propertyToServiceName = originalPrototype._inject;
    11 │ 
  
  i An explicit or implicit semicolon is expected here...
  
     7 │ ) => string[];
     8 │   
   > 9 │ const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
       │                                                                   ^^^^^^^^^^
    10 │   propertyToServiceName = originalPrototype._inject;
    11 │ 
  
  i ...Which is required to end this statement
  
     7 │ ) => string[];
     8 │   
   > 9 │ const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
       │                                                         ^^^^^^^^^^^^^^^^^^^^
    10 │   propertyToServiceName = originalPrototype._inject;
    11 │ 
  
assignment.ts:17:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                       ^^^^^^^^^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
  i Remove satisfies
  
assignment.ts:17:33 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                                 ^^^^^^^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
  i An explicit or implicit semicolon is expected here...
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                                 ^^^^^^^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
  i ...Which is required to end this statement
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                       ^^^^^^^^^^^^^^^^^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
assignment.ts:17:40 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                                        ^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
  i An explicit or implicit semicolon is expected here...
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                                        ^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
  i ...Which is required to end this statement
  
    15 │     this.currentPreviewIndex++;
    16 │   }
  > 17 │ }, this.refreshDelay) satisfies unknown) satisfies number;
       │                                 ^^^^^^^^
    18 │ 
    19 │ this.intervalID = (setInterval(() => {
  
assignment.ts:21:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │        ^^^^^^^^^
    22 │ 
  
  i Remove satisfies
  
assignment.ts:21:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │                  ^^^^^^^
    22 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │                  ^^^^^^^
    22 │ 
  
  i ...Which is required to end this statement
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │        ^^^^^^^^^^^^^^^^^
    22 │ 
  
assignment.ts:21:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │                         ^
    22 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │                         ^
    22 │ 
  
  i ...Which is required to end this statement
  
    19 │ this.intervalID = (setInterval(() => {
    20 │   self.step();
  > 21 │ }, 30) satisfies unknown) satisfies number;
       │                  ^^^^^^^^
    22 │ 
  

```


