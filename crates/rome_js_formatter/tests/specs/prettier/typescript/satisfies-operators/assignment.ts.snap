---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info:
  test_file: typescript/satisfies-operators/assignment.ts
---

# Input

```ts
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes;

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function
) => string[];
  
const originalPrototype = originalConstructor.prototype satisfies TComponent & InjectionTarget,
  propertyToServiceName = originalPrototype._inject;

this.previewPlayerHandle = (setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay) satisfies unknown) satisfies number;

this.intervalID = (setInterval(() => {
  self.step();
}, 30) satisfies unknown) satisfies number;

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -3,7 +3,7 @@
   Object.create(null)) satisfies FieldService.RendererAttributes;
 
 const annotate = (angular.injector satisfies any).$$annotate satisfies (
-  fn: Function
+  fn: Function,
 ) => string[];
 
 const originalPrototype = originalConstructor.prototype satisfies TComponent &
```

# Output

```ts
const extraRendererAttrs = ((attrs.rendererAttrs &&
  this.utils.safeParseJsonString(attrs.rendererAttrs)) ||
  Object.create(null)) satisfies FieldService.RendererAttributes;

const annotate = (angular.injector satisfies any).$$annotate satisfies (
  fn: Function,
) => string[];

const originalPrototype = originalConstructor.prototype satisfies TComponent &
    InjectionTarget,
  propertyToServiceName = originalPrototype._inject;

this.previewPlayerHandle = setInterval(async () => {
  if (this.previewIsPlaying) {
    await this.fetchNextPreviews();
    this.currentPreviewIndex++;
  }
}, this.refreshDelay) satisfies unknown satisfies number;

this.intervalID = setInterval(() => {
  self.step();
}, 30) satisfies unknown satisfies number;
```


