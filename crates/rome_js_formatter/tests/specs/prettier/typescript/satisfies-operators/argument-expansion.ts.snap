---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: "typescript\\satisfies-operators\\argument-expansion.ts"
---

# Input

```ts
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] satisfies unknown) satisfies number[]);

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] satisfies unknown) satisfies number[]);

const bar3 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} satisfies unknown) satisfies {[key: number]: boolean});

const bar4 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});

const bar5 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -6,7 +6,7 @@
   (carry, value) => {
     return [...carry, value];
   },
-  [1, 2, 3] satisfies unknown satisfies number[]
+  [1, 2, 3] satisfies unknown satisfies number[],
 );
 
 const bar3 = [1, 2, 3].reduce((carry, value) => {
@@ -17,7 +17,7 @@
   (carry, value) => {
     return { ...carry, [value]: true };
   },
-  { 1: true } satisfies unknown satisfies { [key: number]: boolean }
+  { 1: true } satisfies unknown satisfies { [key: number]: boolean },
 );
 
 const bar5 = [1, 2, 3].reduce((carry, value) => {
```

# Output

```ts
const bar1 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies unknown satisfies number[]);

const bar2 = [1, 2, 3].reduce(
  (carry, value) => {
    return [...carry, value];
  },
  [1, 2, 3] satisfies unknown satisfies number[],
);

const bar3 = [1, 2, 3].reduce((carry, value) => {
  return { ...carry, [value]: true };
}, {} satisfies unknown satisfies { [key: number]: boolean });

const bar4 = [1, 2, 3].reduce(
  (carry, value) => {
    return { ...carry, [value]: true };
  },
  { 1: true } satisfies unknown satisfies { [key: number]: boolean },
);

const bar5 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);
```


