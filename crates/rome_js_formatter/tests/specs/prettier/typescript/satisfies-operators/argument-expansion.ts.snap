---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: typescript/satisfies-operators/argument-expansion.ts
---

# Input

```js
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] satisfies unknown) satisfies number[]);

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] satisfies unknown) satisfies number[]);

const bar3 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} satisfies unknown) satisfies {[key: number]: boolean});

const bar4 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});

const bar5 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -2,23 +2,17 @@
   return [...carry, value];
 }, [] satisfies unknown satisfies number[]);
 
-const bar2 = [1, 2, 3].reduce(
-  (carry, value) => {
-    return [...carry, value];
-  },
-  [1, 2, 3] satisfies unknown satisfies number[]
-);
+const bar2 = [1, 2, 3].reduce((carry, value) => {
+  return [...carry, value];
+}, [1, 2, 3] satisfies unknown satisfies number[]);
 
 const bar3 = [1, 2, 3].reduce((carry, value) => {
   return { ...carry, [value]: true };
 }, {} satisfies unknown satisfies { [key: number]: boolean });
 
-const bar4 = [1, 2, 3].reduce(
-  (carry, value) => {
-    return { ...carry, [value]: true };
-  },
-  { 1: true } satisfies unknown satisfies { [key: number]: boolean }
-);
+const bar4 = [1, 2, 3].reduce((carry, value) => {
+  return { ...carry, [value]: true };
+}, { 1: true } satisfies unknown satisfies { [key: number]: boolean });
 
 const bar5 = [1, 2, 3].reduce((carry, value) => {
   return [...carry, value];
```

# Output

```js
const bar1 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies unknown satisfies number[]);

const bar2 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [1, 2, 3] satisfies unknown satisfies number[]);

const bar3 = [1, 2, 3].reduce((carry, value) => {
  return { ...carry, [value]: true };
}, {} satisfies unknown satisfies { [key: number]: boolean });

const bar4 = [1, 2, 3].reduce((carry, value) => {
  return { ...carry, [value]: true };
}, { 1: true } satisfies unknown satisfies { [key: number]: boolean });

const bar5 = [1, 2, 3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);
```



