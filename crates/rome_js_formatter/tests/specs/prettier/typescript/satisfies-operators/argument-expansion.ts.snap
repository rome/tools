---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: typescript/satisfies-operators/argument-expansion.ts
---

# Input

```js
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] satisfies unknown) satisfies number[]);

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] satisfies unknown) satisfies number[]);

const bar3 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} satisfies unknown) satisfies {[key: number]: boolean});

const bar4 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});

const bar5 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,25 +1,37 @@
-const bar1 = [1, 2, 3].reduce((carry, value) => {
+const bar1 = [1,2,3].reduce((carry, value) => {
   return [...carry, value];
-}, [] satisfies unknown satisfies number[]);
+}, ([] satisfies unknown)
+satisfies;
+number[]
+)
 
-const bar2 = [1, 2, 3].reduce(
-  (carry, value) => {
-    return [...carry, value];
-  },
-  [1, 2, 3] satisfies unknown satisfies number[]
-);
+const bar2 = [1,2,3].reduce((carry, value) => {
+  return [...carry, value];
+}, ([1, 2, 3] satisfies unknown)
+satisfies;
+number[]
+)
 
-const bar3 = [1, 2, 3].reduce((carry, value) => {
-  return { ...carry, [value]: true };
-}, {} satisfies unknown satisfies { [key: number]: boolean });
+const bar3 = [1,2,3].reduce((carry, value) => {
+  return {...carry, [value]: true};
+}, ({} satisfies unknown)
+satisfies;
+{
+  [key: number]
+  : boolean
+}
+)
 
-const bar4 = [1, 2, 3].reduce(
-  (carry, value) => {
-    return { ...carry, [value]: true };
-  },
-  { 1: true } satisfies unknown satisfies { [key: number]: boolean }
-);
+const bar4 = [1,2,3].reduce((carry, value) => {
+  return {...carry, [value]: true};
+}, ({1: true} satisfies unknown)
+satisfies;
+{
+  [key: number]
+  : boolean
+}
+)
 
-const bar5 = [1, 2, 3].reduce((carry, value) => {
+const bar5 = [1,2,3].reduce((carry, value) => {
   return [...carry, value];
 }, [] satisfies foo);
```

# Output

```js
const bar1 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([] satisfies unknown)
satisfies;
number[]
)

const bar2 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, ([1, 2, 3] satisfies unknown)
satisfies;
number[]
)

const bar3 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({} satisfies unknown)
satisfies;
{
  [key: number]
  : boolean
}
)

const bar4 = [1,2,3].reduce((carry, value) => {
  return {...carry, [value]: true};
}, ({1: true} satisfies unknown)
satisfies;
{
  [key: number]
  : boolean
}
)

const bar5 = [1,2,3].reduce((carry, value) => {
  return [...carry, value];
}, [] satisfies foo);
```


# Errors
```
argument-expansion.ts:3:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │        ^^^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i Remove satisfies
  
argument-expansion.ts:3:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `unknown`
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                  ^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i Remove unknown
  
argument-expansion.ts:3:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                           ^^^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                           ^^^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
  > 1 │ const bar1 = [1,2,3].reduce((carry, value) => {
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:3:37 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                     ^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                     ^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                           ^^^^^^^^^^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:3:44 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ']'
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                            ^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i Expected an expression here
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                            ^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:3:45 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                             ^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                             ^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    1 │ const bar1 = [1,2,3].reduce((carry, value) => {
    2 │   return [...carry, value];
  > 3 │ }, ([] satisfies unknown) satisfies number[]);
      │                                     ^^^^^^^^^
    4 │ 
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:7:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │               ^^^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i Remove satisfies
  
argument-expansion.ts:7:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `unknown`
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                         ^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i Remove unknown
  
argument-expansion.ts:7:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                  ^^^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                  ^^^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    3 │ }, ([] satisfies unknown) satisfies number[]);
    4 │ 
  > 5 │ const bar2 = [1,2,3].reduce((carry, value) => {
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:7:44 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                            ^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                            ^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                  ^^^^^^^^^^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:7:51 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ']'
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                                   ^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i Expected an expression here
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                                   ^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:7:52 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                                    ^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                                    ^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    5 │ const bar2 = [1,2,3].reduce((carry, value) => {
    6 │   return [...carry, value];
  > 7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
      │                                            ^^^^^^^^^
    8 │ 
    9 │ const bar3 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:11:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │        ^^^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i Remove satisfies
  
argument-expansion.ts:11:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `unknown`
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                  ^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i Remove unknown
  
argument-expansion.ts:11:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                           ^^^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                           ^^^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
     7 │ }, ([1, 2, 3] satisfies unknown) satisfies number[]);
     8 │ 
   > 9 │ const bar3 = [1,2,3].reduce((carry, value) => {
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:11:37 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                     ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                     ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                           ^^^^^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:11:42 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `:`
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                          ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i Remove :
  
argument-expansion.ts:11:51 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                   ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                   ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                      ^^^^^^^^^^^^^^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:11:61 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found ')'
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                             ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
  i Expected a statement here
  
     9 │ const bar3 = [1,2,3].reduce((carry, value) => {
    10 │   return {...carry, [value]: true};
  > 11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                             ^
    12 │ 
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:15:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `satisfies`
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │               ^^^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i Remove satisfies
  
argument-expansion.ts:15:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `unknown`
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                         ^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i Remove unknown
  
argument-expansion.ts:15:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                  ^^^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                  ^^^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    11 │ }, ({} satisfies unknown) satisfies {[key: number]: boolean});
    12 │ 
  > 13 │ const bar4 = [1,2,3].reduce((carry, value) => {
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:15:44 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                            ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                            ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                  ^^^^^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:15:49 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `:`
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                 ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i Remove :
  
argument-expansion.ts:15:58 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                          ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i An explicit or implicit semicolon is expected here...
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                          ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i ...Which is required to end this statement
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                             ^^^^^^^^^^^^^^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:15:68 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found ')'
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                                    ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
  i Expected a statement here
  
    13 │ const bar4 = [1,2,3].reduce((carry, value) => {
    14 │   return {...carry, [value]: true};
  > 15 │ }, ({1: true} satisfies unknown) satisfies {[key: number]: boolean});
       │                                                                    ^
    16 │ 
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
  
argument-expansion.ts:19:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `satisfies`
  
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
    18 │   return [...carry, value];
  > 19 │ }, [] satisfies foo);
       │       ^^^^^^^^^
    20 │ 
  
  i Remove satisfies
  
argument-expansion.ts:19:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `foo`
  
    17 │ const bar5 = [1,2,3].reduce((carry, value) => {
    18 │   return [...carry, value];
  > 19 │ }, [] satisfies foo);
       │                 ^^^
    20 │ 
  
  i Remove foo
  

```


