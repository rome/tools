---
source: crates/rome_formatter_test/src/snapshot_builder.rs
assertion_line: 212
info: typescript/conditional-types/parentheses.ts
---

# Input

```ts
// #13275
type Foo<T> = T extends ((...a: any[]) => infer R extends string) ? R : never;
type Foo<T> = T extends (new (...a: any[]) => infer R extends string) ? R : never;

// #14275
type Test<T> = T extends ((
  token: TSESTree.Token
) => token is infer U extends TSESTree.Token)
  ? U
  : TSESTree.Token;
type Test<T> = T extends ((
  token: TSESTree.Token
) => asserts token is infer U extends TSESTree.Token)
  ? U
  : TSESTree.Token;
type Test<T> = T extends (new (
  token: TSESTree.Token
) => token is infer U extends TSESTree.Token)
  ? U
  : TSESTree.Token;

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,22 +1,25 @@
 // #13275
 type Foo<T> = T extends ((...a: any[]) => infer R extends string) ? R : never;
-type Foo<T> = T extends (new (...a: any[]) => infer R extends string)
+type Foo<T> = T extends (new (
+  ...a: any[]
+) => infer R extends string)
   ? R
   : never;
 
 // #14275
-type Test<T> = T extends ((
+type Test<T> = T extends (
   token: TSESTree.Token,
-) => token is infer U extends TSESTree.Token)
+) => token is infer U extends TSESTree.Token
   ? U
   : TSESTree.Token;
-type Test<T> = T extends ((
+type Test<T> = T extends (
   token: TSESTree.Token,
-) => asserts token is infer U extends TSESTree.Token)
+) => asserts token is infer U extends TSESTree.Token
   ? U
   : TSESTree.Token;
 type Test<T> = T extends (new (
-  token: TSESTree.Token,
-) => token is infer U extends TSESTree.Token)
+  token: TSESTree.Token
+) => token is infer U extends TSESTree.Token
+)
   ? U
-  : TSESTree.Token;
+  : TSESTree.Token
```

# Output

```ts
// #13275
type Foo<T> = T extends ((...a: any[]) => infer R extends string) ? R : never;
type Foo<T> = T extends (new (
  ...a: any[]
) => infer R extends string)
  ? R
  : never;

// #14275
type Test<T> = T extends (
  token: TSESTree.Token,
) => token is infer U extends TSESTree.Token
  ? U
  : TSESTree.Token;
type Test<T> = T extends (
  token: TSESTree.Token,
) => asserts token is infer U extends TSESTree.Token
  ? U
  : TSESTree.Token;
type Test<T> = T extends (new (
  token: TSESTree.Token
) => token is infer U extends TSESTree.Token
)
  ? U
  : TSESTree.Token
```

# Errors
```
parentheses.ts:18:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `is`
  
    16 │ type Test<T> = T extends (new (
    17 │   token: TSESTree.Token
  > 18 │ ) => token is infer U extends TSESTree.Token)
       │            ^^
    19 │   ? U
    20 │   : TSESTree.Token;
  
  i Remove is
  
parentheses.ts:18:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `infer`
  
    16 │ type Test<T> = T extends (new (
    17 │   token: TSESTree.Token
  > 18 │ ) => token is infer U extends TSESTree.Token)
       │               ^^^^^
    19 │   ? U
    20 │   : TSESTree.Token;
  
  i Remove infer
  
parentheses.ts:18:45 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    16 │ type Test<T> = T extends (new (
    17 │   token: TSESTree.Token
  > 18 │ ) => token is infer U extends TSESTree.Token)
       │                                             ^
    19 │   ? U
    20 │   : TSESTree.Token;
  
  i An explicit or implicit semicolon is expected here...
  
    16 │ type Test<T> = T extends (new (
    17 │   token: TSESTree.Token
  > 18 │ ) => token is infer U extends TSESTree.Token)
       │                                             ^
    19 │   ? U
    20 │   : TSESTree.Token;
  
  i ...Which is required to end this statement
  
    14 │   ? U
    15 │   : TSESTree.Token;
  > 16 │ type Test<T> = T extends (new (
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 17 │   token: TSESTree.Token
  > 18 │ ) => token is infer U extends TSESTree.Token)
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    19 │   ? U
    20 │   : TSESTree.Token;
  

```


