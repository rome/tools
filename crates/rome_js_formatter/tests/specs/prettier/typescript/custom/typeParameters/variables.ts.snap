---
source: crates/rome_js_formatter/tests/prettier_tests.rs
expression: variables.ts
---
# Input
```js
const foo: SomeThing<boolean> = func();
const bar: SomeThing<boolean, boolean> = func();
const fooo: SomeThing<{ [P in "x" | "y"]: number }> = func();
const baar: SomeThing<K extends T ? G : S> = func();
const fooooooooooooooo: SomeThing<boolean> = looooooooooooooooooooooooooooooongNameFunc();
const baaaaaaaaaaaaaaaaaaaaar: SomeThing<boolean, boolean> = looooooooooooooooooooooooooooooongNameFunc();
const baaaaaaaaaaaaaaar: SomeThing<{ [P in "x" | "y"]: number }> = looooooooooooooooooooooooooooooongNameFunc();
const baaaaaaaaaaaaaaaar: SomeThing<K extends T ? G : S> = looooooooooooooooooooooooooooooongNameFunc();
const isAnySuccessfulAttempt$: Observable<boolean> = this._quizService.isAnySuccessfulAttempt$().pipe(
  tap((isAnySuccessfulAttempt: boolean) => {
    this.isAnySuccessfulAttempt = isAnySuccessfulAttempt;
  }),
);
const isAnySuccessfulAttempt2$: Observable<boolean> = this._someMethodWithLongName();
const fooooooooooooooo: SomeThing<boolean | string> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<boolean & string> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<keyof string> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<string[]> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<string["anchor"]> = looooooooooooooooooooooooooooooongNameFunc();

```

# Output
```js
const foo: SomeThing<boolean> = func();
const bar: SomeThing<boolean, boolean> = func();
const fooo: SomeThing<
  {
    [P in "x" | "y"]: number;
  }
> = func();
const baar: SomeThing<K extends T ? G : S> = func();
const fooooooooooooooo: SomeThing<boolean> = looooooooooooooooooooooooooooooongNameFunc();
const baaaaaaaaaaaaaaaaaaaaar: SomeThing<boolean, boolean> = looooooooooooooooooooooooooooooongNameFunc();
const baaaaaaaaaaaaaaar: SomeThing<
  {
    [P in "x" | "y"]: number;
  }
> = looooooooooooooooooooooooooooooongNameFunc();
const baaaaaaaaaaaaaaaar: SomeThing<K extends T ? G : S> = looooooooooooooooooooooooooooooongNameFunc();
const isAnySuccessfulAttempt$: Observable<boolean> = this._quizService.isAnySuccessfulAttempt$().pipe(
  tap(
    (isAnySuccessfulAttempt: boolean) => {
      this.isAnySuccessfulAttempt = isAnySuccessfulAttempt;
    },
  ),
);
const isAnySuccessfulAttempt2$: Observable<boolean> = this._someMethodWithLongName();
const fooooooooooooooo: SomeThing<boolean | string> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<boolean & string> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<keyof string> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<string[]> = looooooooooooooooooooooooooooooongNameFunc();
const fooooooooooooooo: SomeThing<string["anchor"]> = looooooooooooooooooooooooooooooongNameFunc();

```

# Lines exceeding max width of 80 characters
```
    9: const fooooooooooooooo: SomeThing<boolean> = looooooooooooooooooooooooooooooongNameFunc();
   10: const baaaaaaaaaaaaaaaaaaaaar: SomeThing<boolean, boolean> = looooooooooooooooooooooooooooooongNameFunc();
   16: const baaaaaaaaaaaaaaaar: SomeThing<K extends T ? G : S> = looooooooooooooooooooooooooooooongNameFunc();
   17: const isAnySuccessfulAttempt$: Observable<boolean> = this._quizService.isAnySuccessfulAttempt$().pipe(
   24: const isAnySuccessfulAttempt2$: Observable<boolean> = this._someMethodWithLongName();
   25: const fooooooooooooooo: SomeThing<boolean | string> = looooooooooooooooooooooooooooooongNameFunc();
   26: const fooooooooooooooo: SomeThing<boolean & string> = looooooooooooooooooooooooooooooongNameFunc();
   27: const fooooooooooooooo: SomeThing<keyof string> = looooooooooooooooooooooooooooooongNameFunc();
   28: const fooooooooooooooo: SomeThing<string[]> = looooooooooooooooooooooooooooooongNameFunc();
   29: const fooooooooooooooo: SomeThing<string["anchor"]> = looooooooooooooooooooooooooooooongNameFunc();
```

