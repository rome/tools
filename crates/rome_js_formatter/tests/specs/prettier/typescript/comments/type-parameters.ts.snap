---
source: crates/rome_formatter_test/src/snapshot_builder.rs
assertion_line: 212
info: typescript/comments/type-parameters.ts
---

# Input

```ts
functionName<A /* A comment */>();
const a: T</* comment */> = 1;
functionName</* comment */>();
function foo</* comment */>() {}
interface Foo {
 </* comment */>(arg): any;
}
type T = </* comment */>(arg) => any;

functionName<
  A // comment
>();
const a: T<
  // comment
> = 1;
functionName<
  // comment
>();
function foo<
  // comment
>() {}
interface Foo {
 <
  A// comment
 >(arg): any;
}
type T = <
  // comment
>(arg) => any;

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -3,7 +3,7 @@
 functionName</* comment */>();
 function foo</* comment */>() {}
 interface Foo {
-  </* comment */>(arg): any;
+ </* comment */>(arg): any;
 }
 type T = </* comment */>(arg) => any;
 
@@ -26,6 +26,4 @@
 }
 type T = <
   // comment
->(
-  arg,
-) => any;
+>(arg) => any;
```

# Output

```ts
functionName<A /* A comment */>();
const a: T</* comment */> = 1;
functionName</* comment */>();
function foo</* comment */>() {}
interface Foo {
 </* comment */>(arg): any;
}
type T = </* comment */>(arg) => any;

functionName<A>(); // comment
const a: T<
  // comment
> = 1;
functionName<
  // comment
>();
function foo<
  // comment
>() {}
interface Foo {
  <
    A, // comment
  >(
    arg,
  ): any;
}
type T = <
  // comment
>(arg) => any;
```

# Errors
```
type-parameters.ts:2:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    1 │ functionName<A /* A comment */>();
  > 2 │ const a: T</* comment */> = 1;
      │                         ^
    3 │ functionName</* comment */>();
    4 │ function foo</* comment */>() {}
  
  i Expected a type parameter here
  
    1 │ functionName<A /* A comment */>();
  > 2 │ const a: T</* comment */> = 1;
      │                         ^
    3 │ functionName</* comment */>();
    4 │ function foo</* comment */>() {}
  
type-parameters.ts:3:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    1 │ functionName<A /* A comment */>();
    2 │ const a: T</* comment */> = 1;
  > 3 │ functionName</* comment */>();
      │                           ^
    4 │ function foo</* comment */>() {}
    5 │ interface Foo {
  
  i Expected a type parameter here
  
    1 │ functionName<A /* A comment */>();
    2 │ const a: T</* comment */> = 1;
  > 3 │ functionName</* comment */>();
      │                           ^
    4 │ function foo</* comment */>() {}
    5 │ interface Foo {
  
type-parameters.ts:4:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    2 │ const a: T</* comment */> = 1;
    3 │ functionName</* comment */>();
  > 4 │ function foo</* comment */>() {}
      │                           ^
    5 │ interface Foo {
    6 │  </* comment */>(arg): any;
  
  i Expected a type parameter here
  
    2 │ const a: T</* comment */> = 1;
    3 │ functionName</* comment */>();
  > 4 │ function foo</* comment */>() {}
      │                           ^
    5 │ interface Foo {
    6 │  </* comment */>(arg): any;
  
type-parameters.ts:6:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    4 │ function foo</* comment */>() {}
    5 │ interface Foo {
  > 6 │  </* comment */>(arg): any;
      │                ^
    7 │ }
    8 │ type T = </* comment */>(arg) => any;
  
  i Expected a type parameter here
  
    4 │ function foo</* comment */>() {}
    5 │ interface Foo {
  > 6 │  </* comment */>(arg): any;
      │                ^
    7 │ }
    8 │ type T = </* comment */>(arg) => any;
  
type-parameters.ts:8:24 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
     6 │  </* comment */>(arg): any;
     7 │ }
   > 8 │ type T = </* comment */>(arg) => any;
       │                        ^
     9 │ 
    10 │ functionName<
  
  i Expected a type parameter here
  
     6 │  </* comment */>(arg): any;
     7 │ }
   > 8 │ type T = </* comment */>(arg) => any;
       │                        ^
     9 │ 
    10 │ functionName<
  
type-parameters.ts:15:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    13 │ const a: T<
    14 │   // comment
  > 15 │ > = 1;
       │ ^
    16 │ functionName<
    17 │   // comment
  
  i Expected a type parameter here
  
    13 │ const a: T<
    14 │   // comment
  > 15 │ > = 1;
       │ ^
    16 │ functionName<
    17 │   // comment
  
type-parameters.ts:18:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    16 │ functionName<
    17 │   // comment
  > 18 │ >();
       │ ^
    19 │ function foo<
    20 │   // comment
  
  i Expected a type parameter here
  
    16 │ functionName<
    17 │   // comment
  > 18 │ >();
       │ ^
    19 │ function foo<
    20 │   // comment
  
type-parameters.ts:21:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    19 │ function foo<
    20 │   // comment
  > 21 │ >() {}
       │ ^
    22 │ interface Foo {
    23 │  <
  
  i Expected a type parameter here
  
    19 │ function foo<
    20 │   // comment
  > 21 │ >() {}
       │ ^
    22 │ interface Foo {
    23 │  <
  
type-parameters.ts:29:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found '>'
  
    27 │ type T = <
    28 │   // comment
  > 29 │ >(arg) => any;
       │ ^
    30 │ 
  
  i Expected a type parameter here
  
    27 │ type T = <
    28 │   // comment
  > 29 │ >(arg) => any;
       │ ^
    30 │ 
  

```


