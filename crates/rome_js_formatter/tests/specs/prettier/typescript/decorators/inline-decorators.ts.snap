---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: typescript/decorators/inline-decorators.ts
---

# Input

```ts

@d1
@d2(foo)
@d3.bar
@d4.baz()
class Class1 {}

class Class2 {
    @d1
    @d2(foo)
    @d3.bar
    @d4.baz()
    method1() {}

    @d1
    method2() {}

    @d2(foo)
    method3() {}

    @d3.bar
    method4() {}
}

class Class3 {
    @d1 fieldA;
    @d2(foo) fieldB;
    @d3.bar fieldC;
    @d4.baz() fieldD;

    constructor (
        @d1 private x: number,
        @d2(foo) private y: number,
        @d3('foo') private z: number,
        @d4({
            x: string
        }) private a: string,
    ) {}
}

@decorated class Foo {}

class Bar {
    @decorated method() {}
}

class MyContainerComponent {
  @ContentChildren(MyComponent) components: QueryListSomeBigName<MyComponentThat>;
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -5,20 +5,13 @@
 class Class1 {}
 
 class Class2 {
-  @d1
-  @d2(foo)
-  @d3.bar
-  @d4.baz()
-  method1() {}
+  @d1 @d2(foo) @d3.bar @d4.baz() method1() {}
 
-  @d1
-  method2() {}
+  @d1 method2() {}
 
-  @d2(foo)
-  method3() {}
+  @d2(foo) method3() {}
 
-  @d3.bar
-  method4() {}
+  @d3.bar method4() {}
 }
 
 class Class3 {
@@ -30,11 +23,10 @@
   constructor(
     @d1 private x: number,
     @d2(foo) private y: number,
-    @d3("foo") private z: number,
+    @d3('foo') private z: number,
     @d4({
-      x: string,
-    })
-    private a: string,
+            x: string
+        }) private a: string,
   ) {}
 }
 
@@ -46,6 +38,7 @@
 }
 
 class MyContainerComponent {
-  @ContentChildren(MyComponent)
-  components: QueryListSomeBigName<MyComponentThat>;
+  @ContentChildren(
+    MyComponent,
+  ) components: QueryListSomeBigName<MyComponentThat>;
 }
```

# Output

```ts
@d1
@d2(foo)
@d3.bar
@d4.baz()
class Class1 {}

class Class2 {
  @d1 @d2(foo) @d3.bar @d4.baz() method1() {}

  @d1 method2() {}

  @d2(foo) method3() {}

  @d3.bar method4() {}
}

class Class3 {
  @d1 fieldA;
  @d2(foo) fieldB;
  @d3.bar fieldC;
  @d4.baz() fieldD;

  constructor(
    @d1 private x: number,
    @d2(foo) private y: number,
    @d3('foo') private z: number,
    @d4({
            x: string
        }) private a: string,
  ) {}
}

@decorated
class Foo {}

class Bar {
  @decorated method() {}
}

class MyContainerComponent {
  @ContentChildren(
    MyComponent,
  ) components: QueryListSomeBigName<MyComponentThat>;
}
```


