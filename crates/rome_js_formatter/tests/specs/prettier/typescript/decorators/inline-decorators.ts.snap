---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: typescript/decorators/inline-decorators.ts
---

# Input

```ts

@d1
@d2(foo)
@d3.bar
@d4.baz()
class Class1 {}

class Class2 {
    @d1
    @d2(foo)
    @d3.bar
    @d4.baz()
    method1() {}

    @d1
    method2() {}

    @d2(foo)
    method3() {}

    @d3.bar
    method4() {}
}

class Class3 {
    @d1 fieldA;
    @d2(foo) fieldB;
    @d3.bar fieldC;
    @d4.baz() fieldD;

    constructor (
        @d1 private x: number,
        @d2(foo) private y: number,
        @d3('foo') private z: number,
        @d4({
            x: string
        }) private a: string,
    ) {}
}

@decorated class Foo {}

class Bar {
    @decorated method() {}
}

class MyContainerComponent {
  @ContentChildren(MyComponent) components: QueryListSomeBigName<MyComponentThat>;
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -27,15 +27,14 @@
   @d3.bar fieldC;
   @d4.baz() fieldD;
 
-  constructor(
-    @d1 private x: number,
-    @d2(foo) private y: number,
-    @d3("foo") private z: number,
-    @d4({
-      x: string,
-    })
-    private a: string,
-  ) {}
+  constructor (
+        @d1 private x: number,
+        @d2(foo) private y: number,
+        @d3('foo') private z: number,
+        @d4({
+            x: string
+        }) private a: string,
+    ) {}
 }
 
 @decorated
```

# Output

```ts
@d1
@d2(foo)
@d3.bar
@d4.baz()
class Class1 {}

class Class2 {
  @d1
  @d2(foo)
  @d3.bar
  @d4.baz()
  method1() {}

  @d1
  method2() {}

  @d2(foo)
  method3() {}

  @d3.bar
  method4() {}
}

class Class3 {
  @d1 fieldA;
  @d2(foo) fieldB;
  @d3.bar fieldC;
  @d4.baz() fieldD;

  constructor (
        @d1 private x: number,
        @d2(foo) private y: number,
        @d3('foo') private z: number,
        @d4({
            x: string
        }) private a: string,
    ) {}
}

@decorated
class Foo {}

class Bar {
  @decorated method() {}
}

class MyContainerComponent {
  @ContentChildren(MyComponent)
  components: QueryListSomeBigName<MyComponentThat>;
}
```

# Errors
```
inline-decorators.ts:32:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    31 │     constructor (
  > 32 │         @d1 private x: number,
       │         ^^^
    33 │         @d2(foo) private y: number,
    34 │         @d3('foo') private z: number,
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
inline-decorators.ts:33:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    31 │     constructor (
    32 │         @d1 private x: number,
  > 33 │         @d2(foo) private y: number,
       │         ^^^^^^^^
    34 │         @d3('foo') private z: number,
    35 │         @d4({
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
inline-decorators.ts:34:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    32 │         @d1 private x: number,
    33 │         @d2(foo) private y: number,
  > 34 │         @d3('foo') private z: number,
       │         ^^^^^^^^^^
    35 │         @d4({
    36 │             x: string
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
inline-decorators.ts:35:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    33 │         @d2(foo) private y: number,
    34 │         @d3('foo') private z: number,
  > 35 │         @d4({
       │         ^^^^^
  > 36 │             x: string
  > 37 │         }) private a: string,
       │         ^^
    38 │     ) {}
    39 │ }
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  

```


