---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: typescript/decorators/mobx.ts
---

# Input

```ts
import {observable} from "mobx";

@observer class OrderLine {
  @observable price:number = 0;
  @observable amount:number = 1;

  constructor(price) {
    this.price = price;
  }

  @computed get total() {
    return this.price * this.amount;
  }

  @action.bound setPrice(price) {
    this.price = price;
  }

  @computed
  get total2() {
    return this.price * this.amount;
  }

  @action.bound
  setPrice(price) {
    this.price = price;
  }

  @computed @computed @computed @computed @computed @computed @computed get total3() {
    return this.price * this.amount;
  }

  @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;

  @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -17,24 +17,15 @@
     this.price = price;
   }
 
-  @computed
-  get total2() {
+  @computed get total2() {
     return this.price * this.amount;
   }
 
-  @action.bound
-  setPrice(price) {
+  @action.bound setPrice(price) {
     this.price = price;
   }
 
-  @computed
-  @computed
-  @computed
-  @computed
-  @computed
-  @computed
-  @computed
-  get total3() {
+  @computed @computed @computed @computed @computed @computed @computed get total3() {
     return this.price * this.amount;
   }
 
```

# Output

```ts
import { observable } from "mobx";

@observer
class OrderLine {
  @observable price: number = 0;
  @observable amount: number = 1;

  constructor(price) {
    this.price = price;
  }

  @computed get total() {
    return this.price * this.amount;
  }

  @action.bound setPrice(price) {
    this.price = price;
  }

  @computed get total2() {
    return this.price * this.amount;
  }

  @action.bound setPrice(price) {
    this.price = price;
  }

  @computed @computed @computed @computed @computed @computed @computed get total3() {
    return this.price * this.amount;
  }

  @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) =>
    this.count--;

  @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) =>
    doSomething();
}
```

# Lines exceeding max width of 80 characters
```
   28:   @computed @computed @computed @computed @computed @computed @computed get total3() {
```


