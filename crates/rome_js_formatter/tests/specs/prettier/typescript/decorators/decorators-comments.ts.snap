---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: typescript/decorators/decorators-comments.ts
---

# Input

```ts

class Foo1 {
    @foo
    // comment
    async method() {}
}

class Foo2 {
    @foo
    // comment
    private method() {}
}

class Foo3 {
    @foo
    // comment
    *method() {}
}

class Foo4 {
    @foo
    // comment
    async *method() {}
}

class Something {
    @foo()
    // comment
    readonly property: Array<string>
}

class Something2 {
    @foo()
    // comment
    abstract property: Array<string>
}

class Something3 {
    @foo()
    // comment
    abstract method(): Array<string>
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,41 +1,36 @@
 class Foo1 {
-  @foo
-  // comment
-  async method() {}
+  @foo async // comment
+  method() {}
 }
 
 class Foo2 {
-  @foo
-  // comment
+  @foo // comment
   private method() {}
 }
 
 class Foo3 {
-  @foo
-  // comment
-  *method() {}
+  @foo *// comment
+  method() {}
 }
 
 class Foo4 {
-  @foo
-  // comment
-  async *method() {}
+  @foo async *// comment
+  method() {}
 }
 
 class Something {
-  @foo()
-  // comment
+  @foo() // comment
   readonly property: Array<string>;
 }
 
 class Something2 {
   @foo()
-  // comment
-  abstract property: Array<string>;
+    // comment
+    abstract property: Array<string>
 }
 
 class Something3 {
   @foo()
-  // comment
-  abstract method(): Array<string>;
+    // comment
+    abstract method(): Array<string>
 }
```

# Output

```ts
class Foo1 {
  @foo async // comment
  method() {}
}

class Foo2 {
  @foo // comment
  private method() {}
}

class Foo3 {
  @foo *// comment
  method() {}
}

class Foo4 {
  @foo async *// comment
  method() {}
}

class Something {
  @foo() // comment
  readonly property: Array<string>;
}

class Something2 {
  @foo()
    // comment
    abstract property: Array<string>
}

class Something3 {
  @foo()
    // comment
    abstract method(): Array<string>
}
```

# Errors
```
decorators-comments.ts:35:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Only abstract classes can have abstract members
  
    33 │     @foo()
    34 │     // comment
  > 35 │     abstract property: Array<string>
       │     ^^^^^^^^
    36 │ }
    37 │ 
  
decorators-comments.ts:41:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Only abstract classes can have abstract members
  
    39 │     @foo()
    40 │     // comment
  > 41 │     abstract method(): Array<string>
       │     ^^^^^^^^
    42 │ }
    43 │ 
  
decorators-comments.ts:39:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    38 │ class Something3 {
  > 39 │     @foo()
       │     ^^^^^^
    40 │     // comment
    41 │     abstract method(): Array<string>
  
  i Decorators are only valid on class declarations, class expressions, and class methods.
  

```


