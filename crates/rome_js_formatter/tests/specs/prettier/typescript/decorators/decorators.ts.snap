---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: typescript/decorators/decorators.ts
---

# Input

```ts
export class TestTextFileService {
	constructor(
		@ILifecycleService lifecycleService,
	) {
	}
}

@commonEditorContribution
export class TabCompletionController {
}

@Component({
  selector: 'angular-component',
})
class AngularComponent {
  @Input() myInput: string;
}

class Class {
  method(
    @Decorator
    { prop1, prop2 }: Type
  ) {
    doSomething();
  }
}

class Class2 {
  method(
    @Decorator1
    @Decorator2
    { prop1, prop2 }: Type
  ) {
    doSomething();
  }
}

class Class3 {
  method(
    @Decorator
    { prop1_1, prop1_2 }: Type,
    { prop2_1, prop2_2 }: Type
  ) {
    doSomething();
  }
}

class Class4 {
  method(
    param1,
    @Decorator
    { prop1, prop2 }: Type
  ) {}
}

class Class5 {
  method(
    @Decorator { prop1 }: Type
  ) {}
}

class Class6 {
  method(
    @Decorator({}) { prop1 }: Type
  ) {}
  method(
    @Decorator(
      {}) { prop1 }: Type
  ) {}
  method(
    @Decorator([]) { prop1 }: Type
  ) {}
  method(
    @Decorator(
      []) { prop1 }: Type
  ) {}
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,5 +1,8 @@
 export class TestTextFileService {
-  constructor(@ILifecycleService lifecycleService) {}
+  constructor(
+		@ILifecycleService lifecycleService,
+	) {
+	}
 }
 
 @commonEditorContribution
@@ -15,7 +18,7 @@
 class Class {
   method(
     @Decorator
-    { prop1, prop2 }: Type,
+    { prop1, prop2 }: Type
   ) {
     doSomething();
   }
@@ -25,7 +28,7 @@
   method(
     @Decorator1
     @Decorator2
-    { prop1, prop2 }: Type,
+    { prop1, prop2 }: Type
   ) {
     doSomething();
   }
@@ -50,12 +53,24 @@
 }
 
 class Class5 {
-  method(@Decorator { prop1 }: Type) {}
+  method(
+    @Decorator { prop1 }: Type
+  ) {}
 }
 
 class Class6 {
-  method(@Decorator({}) { prop1 }: Type) {}
-  method(@Decorator({}) { prop1 }: Type) {}
-  method(@Decorator([]) { prop1 }: Type) {}
-  method(@Decorator([]) { prop1 }: Type) {}
+  method(
+    @Decorator({}) { prop1 }: Type
+  ) {}
+  method(
+    @Decorator(
+      {}) { prop1 }: Type
+  ) {}
+  method(
+    @Decorator([]) { prop1 }: Type
+  ) {}
+  method(
+    @Decorator(
+      []) { prop1 }: Type
+  ) {}
 }
```

# Output

```ts
export class TestTextFileService {
  constructor(
		@ILifecycleService lifecycleService,
	) {
	}
}

@commonEditorContribution
export class TabCompletionController {}

@Component({
  selector: "angular-component",
})
class AngularComponent {
  @Input() myInput: string;
}

class Class {
  method(
    @Decorator
    { prop1, prop2 }: Type
  ) {
    doSomething();
  }
}

class Class2 {
  method(
    @Decorator1
    @Decorator2
    { prop1, prop2 }: Type
  ) {
    doSomething();
  }
}

class Class3 {
  method(
    @Decorator
    { prop1_1, prop1_2 }: Type,
    { prop2_1, prop2_2 }: Type,
  ) {
    doSomething();
  }
}

class Class4 {
  method(
    param1,
    @Decorator
    { prop1, prop2 }: Type,
  ) {}
}

class Class5 {
  method(
    @Decorator { prop1 }: Type
  ) {}
}

class Class6 {
  method(
    @Decorator({}) { prop1 }: Type
  ) {}
  method(
    @Decorator(
      {}) { prop1 }: Type
  ) {}
  method(
    @Decorator([]) { prop1 }: Type
  ) {}
  method(
    @Decorator(
      []) { prop1 }: Type
  ) {}
}
```

# Errors
```
decorators.ts:3:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    1 │ export class TestTextFileService {
    2 │ 	constructor(
  > 3 │ 		@ILifecycleService lifecycleService,
      │ 		^^^^^^^^^^^^^^^^^^
    4 │ 	) {
    5 │ 	}
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:21:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    19 │ class Class {
    20 │   method(
  > 21 │     @Decorator
       │     ^^^^^^^^^^
    22 │     { prop1, prop2 }: Type
    23 │   ) {
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:30:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    28 │ class Class2 {
    29 │   method(
  > 30 │     @Decorator1
       │     ^^^^^^^^^^^
  > 31 │     @Decorator2
       │     ^^^^^^^^^^^
    32 │     { prop1, prop2 }: Type
    33 │   ) {
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:40:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    38 │ class Class3 {
    39 │   method(
  > 40 │     @Decorator
       │     ^^^^^^^^^^
    41 │     { prop1_1, prop1_2 }: Type,
    42 │     { prop2_1, prop2_2 }: Type
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:51:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    49 │   method(
    50 │     param1,
  > 51 │     @Decorator
       │     ^^^^^^^^^^
    52 │     { prop1, prop2 }: Type
    53 │   ) {}
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:58:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    56 │ class Class5 {
    57 │   method(
  > 58 │     @Decorator { prop1 }: Type
       │     ^^^^^^^^^^
    59 │   ) {}
    60 │ }
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:64:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    62 │ class Class6 {
    63 │   method(
  > 64 │     @Decorator({}) { prop1 }: Type
       │     ^^^^^^^^^^^^^^
    65 │   ) {}
    66 │   method(
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:67:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    65 │   ) {}
    66 │   method(
  > 67 │     @Decorator(
       │     ^^^^^^^^^^^
  > 68 │       {}) { prop1 }: Type
       │       ^^^
    69 │   ) {}
    70 │   method(
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:71:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    69 │   ) {}
    70 │   method(
  > 71 │     @Decorator([]) { prop1 }: Type
       │     ^^^^^^^^^^^^^^
    72 │   ) {}
    73 │   method(
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  
decorators.ts:74:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Decorators are not valid here.
  
    72 │   ) {}
    73 │   method(
  > 74 │     @Decorator(
       │     ^^^^^^^^^^^
  > 75 │       []) { prop1 }: Type
       │       ^^^
    76 │   ) {}
    77 │ }
  
  i You can enable parameter decorators by setting the `unsafeParameterDecoratorsEnabled` option to `true` in your configuration file.
  

```


