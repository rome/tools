---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: typescript/definite/without-annotation.ts
---

# Input

```js
class Foo {
  a!
  #b!
  static c!
  [d]! = 1
  'e'!
}

let a! = x
const b! = x
var c/* */! = x
export const d! = x
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,12 +1,12 @@
 class Foo {
-  a!;
-  #b!;
-  static c!;
-  [d]! = 1;
-  "e"!;
+  a!
+  #b!
+  static c!
+  [d]! = 1
+  'e'!
 }
 
-let a! = x;
-const b! = x;
-var c! /* */ = x;
-export const d! = x;
+let a! = x
+const b! = x
+var c/* */! = x
+export const d! = x
```

# Output

```js
class Foo {
  a!
  #b!
  static c!
  [d]! = 1
  'e'!
}

let a! = x
const b! = x
var c/* */! = x
export const d! = x
```


# Errors
```
without-annotation.ts:3:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Properties with definite assignment assertions must also have type annotations.
  
    1 │ class Foo {
    2 │   a!
  > 3 │   #b!
      │   ^
    4 │   static c!
    5 │   [d]! = 1
  
without-annotation.ts:4:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Properties with definite assignment assertions must also have type annotations.
  
    2 │   a!
    3 │   #b!
  > 4 │   static c!
      │   ^^^^^^
    5 │   [d]! = 1
    6 │   'e'!
  
without-annotation.ts:5:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Properties with definite assignment assertions must also have type annotations.
  
    3 │   #b!
    4 │   static c!
  > 5 │   [d]! = 1
      │   ^
    6 │   'e'!
    7 │ }
  
without-annotation.ts:5:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Properties with definite assignment assertions must also have type annotations.
  
    3 │   #b!
    4 │   static c!
  > 5 │   [d]! = 1
      │        ^
    6 │   'e'!
    7 │ }
  
without-annotation.ts:7:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Properties with definite assignment assertions must also have type annotations.
  
    5 │   [d]! = 1
    6 │   'e'!
  > 7 │ }
      │ ^
    8 │ 
    9 │ let a! = x
  
without-annotation.ts:9:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `=`
  
     7 │ }
     8 │ 
   > 9 │ let a! = x
       │        ^
    10 │ const b! = x
    11 │ var c/* */! = x
  
  i Remove =
  
without-annotation.ts:10:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `=`
  
     9 │ let a! = x
  > 10 │ const b! = x
       │          ^
    11 │ var c/* */! = x
    12 │ export const d! = x
  
  i Remove =
  
without-annotation.ts:11:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `=`
  
     9 │ let a! = x
    10 │ const b! = x
  > 11 │ var c/* */! = x
       │             ^
    12 │ export const d! = x
    13 │ 
  
  i Remove =
  
without-annotation.ts:12:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `=`
  
    10 │ const b! = x
    11 │ var c/* */! = x
  > 12 │ export const d! = x
       │                 ^
    13 │ 
  
  i Remove =
  

```


