---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info:
  test_file: typescript/optional-variance/basic.ts
---

# Input

```ts
type Covariant<out T> = {
    x: T;
}
type Contravariant<in T> = {
    f: (x: T) => void;
}
type Invariant<in out T> = {
    f: (x: T) => T;
}
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
    x: T;
}

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
    f: (x: T) => void;
}

type Invariant1<in T> = {
    f: (x: T) => T;
}

type Invariant2<out T> = {
    f: (x: T) => T;
}
type Foo1<in T> = {
    x: T;
    f: FooFn1<T>;
}

type Foo2<out T> = {
    x: T;
    f: FooFn2<T>;
}

type Foo3<in out T> = {
    x: T;
    f: FooFn3<T>;
}

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
    child: Child<A> | null;
    parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
    _storedEvent: TEvent;
    _action: ActionObject<TEvent>;
    _state: StateNode<TContext, any>;
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,48 +1,48 @@
 type Covariant<out T> = {
-  x: T;
-};
+    x: T;
+}
 type Contravariant<in T> = {
-  f: (x: T) => void;
-};
+    f: (x: T) => void;
+}
 type Invariant<in out T> = {
-  f: (x: T) => T;
-};
+    f: (x: T) => T;
+}
 type T10<out T> = T;
 type T11<in T> = keyof T;
 type T12<out T, out K extends keyof T> = T[K];
 type T13<in out T> = T[keyof T];
 
 type Covariant1<in T> = {
-  x: T;
-};
+    x: T;
+}
 
 type Contravariant1<out T> = keyof T;
 
 type Contravariant2<out T> = {
-  f: (x: T) => void;
-};
+    f: (x: T) => void;
+}
 
 type Invariant1<in T> = {
-  f: (x: T) => T;
-};
+    f: (x: T) => T;
+}
 
 type Invariant2<out T> = {
-  f: (x: T) => T;
-};
+    f: (x: T) => T;
+}
 type Foo1<in T> = {
-  x: T;
-  f: FooFn1<T>;
-};
+    x: T;
+    f: FooFn1<T>;
+}
 
 type Foo2<out T> = {
-  x: T;
-  f: FooFn2<T>;
-};
+    x: T;
+    f: FooFn2<T>;
+}
 
 type Foo3<in out T> = {
-  x: T;
-  f: FooFn3<T>;
-};
+    x: T;
+    f: FooFn3<T>;
+}
 
 type T21<in out T> = T;
 
@@ -50,12 +50,12 @@
 interface Baz<in T> {}
 
 interface Parent<out A> {
-  child: Child<A> | null;
-  parent: Parent<A> | null;
+    child: Child<A> | null;
+    parent: Parent<A> | null;
 }
 
 declare class StateNode<TContext, in out TEvent extends { type: string }> {
-  _storedEvent: TEvent;
-  _action: ActionObject<TEvent>;
-  _state: StateNode<TContext, any>;
+    _storedEvent: TEvent;
+    _action: ActionObject<TEvent>;
+    _state: StateNode<TContext, any>;
 }
```

# Output

```ts
type Covariant<out T> = {
    x: T;
}
type Contravariant<in T> = {
    f: (x: T) => void;
}
type Invariant<in out T> = {
    f: (x: T) => T;
}
type T10<out T> = T;
type T11<in T> = keyof T;
type T12<out T, out K extends keyof T> = T[K];
type T13<in out T> = T[keyof T];

type Covariant1<in T> = {
    x: T;
}

type Contravariant1<out T> = keyof T;

type Contravariant2<out T> = {
    f: (x: T) => void;
}

type Invariant1<in T> = {
    f: (x: T) => T;
}

type Invariant2<out T> = {
    f: (x: T) => T;
}
type Foo1<in T> = {
    x: T;
    f: FooFn1<T>;
}

type Foo2<out T> = {
    x: T;
    f: FooFn2<T>;
}

type Foo3<in out T> = {
    x: T;
    f: FooFn3<T>;
}

type T21<in out T> = T;

interface Baz<out T> {}
interface Baz<in T> {}

interface Parent<out A> {
    child: Child<A> | null;
    parent: Parent<A> | null;
}

declare class StateNode<TContext, in out TEvent extends { type: string }> {
    _storedEvent: TEvent;
    _action: ActionObject<TEvent>;
    _state: StateNode<TContext, any>;
}
```

# Errors
```
basic.ts:1:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
  > 1 │ type Covariant<out T> = {
      │                    ^
    2 │     x: T;
    3 │ }
  
  i Remove T
  
basic.ts:4:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    2 │     x: T;
    3 │ }
  > 4 │ type Contravariant<in T> = {
      │                    ^^
    5 │     f: (x: T) => void;
    6 │ }
  
  i Expected a type parameter here
  
    2 │     x: T;
    3 │ }
  > 4 │ type Contravariant<in T> = {
      │                    ^^
    5 │     f: (x: T) => void;
    6 │ }
  
basic.ts:4:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    2 │     x: T;
    3 │ }
  > 4 │ type Contravariant<in T> = {
      │                       ^
    5 │     f: (x: T) => void;
    6 │ }
  
  i Remove T
  
basic.ts:7:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    5 │     f: (x: T) => void;
    6 │ }
  > 7 │ type Invariant<in out T> = {
      │                ^^
    8 │     f: (x: T) => T;
    9 │ }
  
  i Expected a type parameter here
  
    5 │     f: (x: T) => void;
    6 │ }
  > 7 │ type Invariant<in out T> = {
      │                ^^
    8 │     f: (x: T) => T;
    9 │ }
  
basic.ts:7:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `out`
  
    5 │     f: (x: T) => void;
    6 │ }
  > 7 │ type Invariant<in out T> = {
      │                   ^^^
    8 │     f: (x: T) => T;
    9 │ }
  
  i Remove out
  
basic.ts:7:23 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    5 │     f: (x: T) => void;
    6 │ }
  > 7 │ type Invariant<in out T> = {
      │                       ^
    8 │     f: (x: T) => T;
    9 │ }
  
  i Remove T
  
basic.ts:10:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
     8 │     f: (x: T) => T;
     9 │ }
  > 10 │ type T10<out T> = T;
       │              ^
    11 │ type T11<in T> = keyof T;
    12 │ type T12<out T, out K extends keyof T> = T[K];
  
  i Remove T
  
basic.ts:11:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
     9 │ }
    10 │ type T10<out T> = T;
  > 11 │ type T11<in T> = keyof T;
       │          ^^
    12 │ type T12<out T, out K extends keyof T> = T[K];
    13 │ type T13<in out T> = T[keyof T];
  
  i Expected a type parameter here
  
     9 │ }
    10 │ type T10<out T> = T;
  > 11 │ type T11<in T> = keyof T;
       │          ^^
    12 │ type T12<out T, out K extends keyof T> = T[K];
    13 │ type T13<in out T> = T[keyof T];
  
basic.ts:11:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
     9 │ }
    10 │ type T10<out T> = T;
  > 11 │ type T11<in T> = keyof T;
       │             ^
    12 │ type T12<out T, out K extends keyof T> = T[K];
    13 │ type T13<in out T> = T[keyof T];
  
  i Remove T
  
basic.ts:12:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    10 │ type T10<out T> = T;
    11 │ type T11<in T> = keyof T;
  > 12 │ type T12<out T, out K extends keyof T> = T[K];
       │              ^
    13 │ type T13<in out T> = T[keyof T];
    14 │ 
  
  i Remove T
  
basic.ts:12:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `K`
  
    10 │ type T10<out T> = T;
    11 │ type T11<in T> = keyof T;
  > 12 │ type T12<out T, out K extends keyof T> = T[K];
       │                     ^
    13 │ type T13<in out T> = T[keyof T];
    14 │ 
  
  i Remove K
  
basic.ts:13:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    11 │ type T11<in T> = keyof T;
    12 │ type T12<out T, out K extends keyof T> = T[K];
  > 13 │ type T13<in out T> = T[keyof T];
       │          ^^
    14 │ 
    15 │ type Covariant1<in T> = {
  
  i Expected a type parameter here
  
    11 │ type T11<in T> = keyof T;
    12 │ type T12<out T, out K extends keyof T> = T[K];
  > 13 │ type T13<in out T> = T[keyof T];
       │          ^^
    14 │ 
    15 │ type Covariant1<in T> = {
  
basic.ts:13:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `out`
  
    11 │ type T11<in T> = keyof T;
    12 │ type T12<out T, out K extends keyof T> = T[K];
  > 13 │ type T13<in out T> = T[keyof T];
       │             ^^^
    14 │ 
    15 │ type Covariant1<in T> = {
  
  i Remove out
  
basic.ts:13:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    11 │ type T11<in T> = keyof T;
    12 │ type T12<out T, out K extends keyof T> = T[K];
  > 13 │ type T13<in out T> = T[keyof T];
       │                 ^
    14 │ 
    15 │ type Covariant1<in T> = {
  
  i Remove T
  
basic.ts:15:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    13 │ type T13<in out T> = T[keyof T];
    14 │ 
  > 15 │ type Covariant1<in T> = {
       │                 ^^
    16 │     x: T;
    17 │ }
  
  i Expected a type parameter here
  
    13 │ type T13<in out T> = T[keyof T];
    14 │ 
  > 15 │ type Covariant1<in T> = {
       │                 ^^
    16 │     x: T;
    17 │ }
  
basic.ts:15:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    13 │ type T13<in out T> = T[keyof T];
    14 │ 
  > 15 │ type Covariant1<in T> = {
       │                    ^
    16 │     x: T;
    17 │ }
  
  i Remove T
  
basic.ts:19:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    17 │ }
    18 │ 
  > 19 │ type Contravariant1<out T> = keyof T;
       │                         ^
    20 │ 
    21 │ type Contravariant2<out T> = {
  
  i Remove T
  
basic.ts:21:25 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    19 │ type Contravariant1<out T> = keyof T;
    20 │ 
  > 21 │ type Contravariant2<out T> = {
       │                         ^
    22 │     f: (x: T) => void;
    23 │ }
  
  i Remove T
  
basic.ts:25:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    23 │ }
    24 │ 
  > 25 │ type Invariant1<in T> = {
       │                 ^^
    26 │     f: (x: T) => T;
    27 │ }
  
  i Expected a type parameter here
  
    23 │ }
    24 │ 
  > 25 │ type Invariant1<in T> = {
       │                 ^^
    26 │     f: (x: T) => T;
    27 │ }
  
basic.ts:25:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    23 │ }
    24 │ 
  > 25 │ type Invariant1<in T> = {
       │                    ^
    26 │     f: (x: T) => T;
    27 │ }
  
  i Remove T
  
basic.ts:29:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    27 │ }
    28 │ 
  > 29 │ type Invariant2<out T> = {
       │                     ^
    30 │     f: (x: T) => T;
    31 │ }
  
  i Remove T
  
basic.ts:32:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    30 │     f: (x: T) => T;
    31 │ }
  > 32 │ type Foo1<in T> = {
       │           ^^
    33 │     x: T;
    34 │     f: FooFn1<T>;
  
  i Expected a type parameter here
  
    30 │     f: (x: T) => T;
    31 │ }
  > 32 │ type Foo1<in T> = {
       │           ^^
    33 │     x: T;
    34 │     f: FooFn1<T>;
  
basic.ts:32:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    30 │     f: (x: T) => T;
    31 │ }
  > 32 │ type Foo1<in T> = {
       │              ^
    33 │     x: T;
    34 │     f: FooFn1<T>;
  
  i Remove T
  
basic.ts:37:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    35 │ }
    36 │ 
  > 37 │ type Foo2<out T> = {
       │               ^
    38 │     x: T;
    39 │     f: FooFn2<T>;
  
  i Remove T
  
basic.ts:42:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    40 │ }
    41 │ 
  > 42 │ type Foo3<in out T> = {
       │           ^^
    43 │     x: T;
    44 │     f: FooFn3<T>;
  
  i Expected a type parameter here
  
    40 │ }
    41 │ 
  > 42 │ type Foo3<in out T> = {
       │           ^^
    43 │     x: T;
    44 │     f: FooFn3<T>;
  
basic.ts:42:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `out`
  
    40 │ }
    41 │ 
  > 42 │ type Foo3<in out T> = {
       │              ^^^
    43 │     x: T;
    44 │     f: FooFn3<T>;
  
  i Remove out
  
basic.ts:42:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    40 │ }
    41 │ 
  > 42 │ type Foo3<in out T> = {
       │                  ^
    43 │     x: T;
    44 │     f: FooFn3<T>;
  
  i Remove T
  
basic.ts:47:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    45 │ }
    46 │ 
  > 47 │ type T21<in out T> = T;
       │          ^^
    48 │ 
    49 │ interface Baz<out T> {}
  
  i Expected a type parameter here
  
    45 │ }
    46 │ 
  > 47 │ type T21<in out T> = T;
       │          ^^
    48 │ 
    49 │ interface Baz<out T> {}
  
basic.ts:47:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `out`
  
    45 │ }
    46 │ 
  > 47 │ type T21<in out T> = T;
       │             ^^^
    48 │ 
    49 │ interface Baz<out T> {}
  
  i Remove out
  
basic.ts:47:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    45 │ }
    46 │ 
  > 47 │ type T21<in out T> = T;
       │                 ^
    48 │ 
    49 │ interface Baz<out T> {}
  
  i Remove T
  
basic.ts:49:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    47 │ type T21<in out T> = T;
    48 │ 
  > 49 │ interface Baz<out T> {}
       │                   ^
    50 │ interface Baz<in T> {}
    51 │ 
  
  i Remove T
  
basic.ts:50:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    49 │ interface Baz<out T> {}
  > 50 │ interface Baz<in T> {}
       │               ^^
    51 │ 
    52 │ interface Parent<out A> {
  
  i Expected a type parameter here
  
    49 │ interface Baz<out T> {}
  > 50 │ interface Baz<in T> {}
       │               ^^
    51 │ 
    52 │ interface Parent<out A> {
  
basic.ts:50:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `T`
  
    49 │ interface Baz<out T> {}
  > 50 │ interface Baz<in T> {}
       │                  ^
    51 │ 
    52 │ interface Parent<out A> {
  
  i Remove T
  
basic.ts:52:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `A`
  
    50 │ interface Baz<in T> {}
    51 │ 
  > 52 │ interface Parent<out A> {
       │                      ^
    53 │     child: Child<A> | null;
    54 │     parent: Parent<A> | null;
  
  i Remove A
  
basic.ts:57:35 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a type parameter but instead found 'in'
  
    55 │ }
    56 │ 
  > 57 │ declare class StateNode<TContext, in out TEvent extends { type: string }> {
       │                                   ^^
    58 │     _storedEvent: TEvent;
    59 │     _action: ActionObject<TEvent>;
  
  i Expected a type parameter here
  
    55 │ }
    56 │ 
  > 57 │ declare class StateNode<TContext, in out TEvent extends { type: string }> {
       │                                   ^^
    58 │     _storedEvent: TEvent;
    59 │     _action: ActionObject<TEvent>;
  
basic.ts:57:38 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `out`
  
    55 │ }
    56 │ 
  > 57 │ declare class StateNode<TContext, in out TEvent extends { type: string }> {
       │                                      ^^^
    58 │     _storedEvent: TEvent;
    59 │     _action: ActionObject<TEvent>;
  
  i Remove out
  
basic.ts:57:42 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `TEvent`
  
    55 │ }
    56 │ 
  > 57 │ declare class StateNode<TContext, in out TEvent extends { type: string }> {
       │                                          ^^^^^^
    58 │     _storedEvent: TEvent;
    59 │     _action: ActionObject<TEvent>;
  
  i Remove TEvent
  

```


