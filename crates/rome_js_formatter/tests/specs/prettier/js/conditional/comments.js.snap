---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
var inspect = 4 === util.inspect.length
  ? // node <= 0.8.x
    (function(v, colors) {
      return util.inspect(v, void 0, void 0, colors);
    })
  : // node > 0.8.x
    (function(v, colors) {
      return util.inspect(v, { colors: colors });
    });

var inspect = 4 === util.inspect.length
  ? // node <= 0.8.x
    (function(v, colors) {
      return util.inspect(v, void 0, void 0, colors);
    })
  : // node > 0.8.x
    (function(v, colors) {
      return util.inspect(v, { colors: colors });
    });

const extractTextPluginOptions = shouldUseRelativeAssetPaths
  // Making sure that the publicPath goes back to to build folder.
  ? { publicPath: Array(cssFilename.split('/').length).join('../') } :
  {};

const extractTextPluginOptions2 = shouldUseRelativeAssetPaths
  ? // Making sure that the publicPath goes back to to build folder.
    { publicPath: Array(cssFilename.split("/").length).join("../") }
  : {};

const extractTextPluginOptions3 = shouldUseRelativeAssetPaths // Making sure that the publicPath goes back to to build folder.
  ? { publicPath: Array(cssFilename.split("/").length).join("../") }
  : {};

const { configureStore } = process.env.NODE_ENV === "production"
  ? require("./configureProdStore") // a
  : require("./configureDevStore"); // b

test /* comment
  comment
      comment
*/
  ? foo
  : bar;

test
  ? /* comment
          comment
    comment
          comment
  */
    foo
  : bar;

test
  ? /* comment
       comment
       comment
       comment
    */
    foo
  : test
  ? /* comment
  comment
    comment */
    foo
  : bar;

test
  ? /* comment */
    foo
  : bar;

test
  ? foo
  : /* comment
         comment
     comment
           comment
    */
  bar;

test
  ? foo
  : /* comment
         comment
     comment
           comment
    */
  test
  ? foo
  : /* comment
  comment
    comment
   */
    bar;

test
  ? foo
  : /* comment */
  bar;

test ? test /* c
c */? foo : bar : bar;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,84 +1,70 @@
 var inspect =
-  4 === util.inspect.length
-    ? // node <= 0.8.x
-      function (v, colors) {
-        return util.inspect(v, void 0, void 0, colors);
-      }
-    : // node > 0.8.x
-      function (v, colors) {
-        return util.inspect(v, { colors: colors });
-      };
+  4 === util.inspect.length ? (function (v, colors) {
+    // node <= 0.8.x
+    return util.inspect(v, void 0, void 0, colors);
+  }) : (function (v, colors) {
+    // node > 0.8.x
+    return util.inspect(v, { colors: colors });
+  });
 
 var inspect =
-  4 === util.inspect.length
-    ? // node <= 0.8.x
-      function (v, colors) {
-        return util.inspect(v, void 0, void 0, colors);
-      }
-    : // node > 0.8.x
-      function (v, colors) {
-        return util.inspect(v, { colors: colors });
-      };
+  4 === util.inspect.length ? (function (v, colors) {
+    // node <= 0.8.x
+    return util.inspect(v, void 0, void 0, colors);
+  }) : (function (v, colors) {
+    // node > 0.8.x
+    return util.inspect(v, { colors: colors });
+  });
 
 const extractTextPluginOptions = shouldUseRelativeAssetPaths
-  ? // Making sure that the publicPath goes back to to build folder.
-    { publicPath: Array(cssFilename.split("/").length).join("../") }
-  : {};
+// Making sure that the publicPath goes back to to build folder.
+? { publicPath: Array(cssFilename.split("/").length).join("../") } : {};
 
-const extractTextPluginOptions2 = shouldUseRelativeAssetPaths
-  ? // Making sure that the publicPath goes back to to build folder.
-    { publicPath: Array(cssFilename.split("/").length).join("../") }
-  : {};
+const extractTextPluginOptions2 = shouldUseRelativeAssetPaths ? {
+  // Making sure that the publicPath goes back to to build folder.
+  publicPath: Array(cssFilename.split("/").length).join("../"),
+} : {};
 
-const extractTextPluginOptions3 = shouldUseRelativeAssetPaths // Making sure that the publicPath goes back to to build folder.
-  ? { publicPath: Array(cssFilename.split("/").length).join("../") }
-  : {};
+const extractTextPluginOptions3 = shouldUseRelativeAssetPaths ? {
+  // Making sure that the publicPath goes back to to build folder.
+  publicPath: Array(cssFilename.split("/").length).join("../"),
+} : {};
 
 const { configureStore } =
-  process.env.NODE_ENV === "production"
-    ? require("./configureProdStore") // a
-    : require("./configureDevStore"); // b
+  process.env.NODE_ENV === "production" ? require(
+    "./configureProdStore",
+  ) : require("./configureDevStore"); // a // b
 
 test /* comment
   comment
       comment
-*/
-  ? foo
-  : bar;
+*/ ? foo : bar;
 
-test
-  ? /* comment
+test ? /* comment
           comment
     comment
           comment
-  */
-    foo
-  : bar;
+  */ foo : bar;
 
 test
   ? /* comment
        comment
        comment
        comment
-    */
-    foo
+    */ foo
   : test
-  ? /* comment
+    ? /* comment
   comment
-    comment */
-    foo
-  : bar;
+    comment */ foo
+    : bar;
 
 test ? /* comment */ foo : bar;
 
-test
-  ? foo
-  : /* comment
+test ? foo : /* comment
          comment
      comment
            comment
-    */
-    bar;
+    */ bar;
 
 test
   ? foo
@@ -86,14 +72,12 @@
          comment
      comment
            comment
-    */
-  test
-  ? foo
-  : /* comment
+    */ test
+    ? foo
+    : /* comment
   comment
     comment
-   */
-    bar;
+   */ bar;
 
 test ? foo : /* comment */ bar;
 
```

# Output

```js
var inspect =
  4 === util.inspect.length ? (function (v, colors) {
    // node <= 0.8.x
    return util.inspect(v, void 0, void 0, colors);
  }) : (function (v, colors) {
    // node > 0.8.x
    return util.inspect(v, { colors: colors });
  });

var inspect =
  4 === util.inspect.length ? (function (v, colors) {
    // node <= 0.8.x
    return util.inspect(v, void 0, void 0, colors);
  }) : (function (v, colors) {
    // node > 0.8.x
    return util.inspect(v, { colors: colors });
  });

const extractTextPluginOptions = shouldUseRelativeAssetPaths
// Making sure that the publicPath goes back to to build folder.
? { publicPath: Array(cssFilename.split("/").length).join("../") } : {};

const extractTextPluginOptions2 = shouldUseRelativeAssetPaths ? {
  // Making sure that the publicPath goes back to to build folder.
  publicPath: Array(cssFilename.split("/").length).join("../"),
} : {};

const extractTextPluginOptions3 = shouldUseRelativeAssetPaths ? {
  // Making sure that the publicPath goes back to to build folder.
  publicPath: Array(cssFilename.split("/").length).join("../"),
} : {};

const { configureStore } =
  process.env.NODE_ENV === "production" ? require(
    "./configureProdStore",
  ) : require("./configureDevStore"); // a // b

test /* comment
  comment
      comment
*/ ? foo : bar;

test ? /* comment
          comment
    comment
          comment
  */ foo : bar;

test
  ? /* comment
       comment
       comment
       comment
    */ foo
  : test
    ? /* comment
  comment
    comment */ foo
    : bar;

test ? /* comment */ foo : bar;

test ? foo : /* comment
         comment
     comment
           comment
    */ bar;

test
  ? foo
  : /* comment
         comment
     comment
           comment
    */ test
    ? foo
    : /* comment
  comment
    comment
   */ bar;

test ? foo : /* comment */ bar;

test
  ? test /* c
c */
    ? foo
    : bar
  : bar;
```



