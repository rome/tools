---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
async function f1() {
  if (untrackedChoice === 0) /* Cancel */ {
    return null;
  } else if (untrackedChoice === 1) /* Add */ {
    await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) /* Allow Untracked */ {
    allowUntracked = true;
  }
}

async function f2() {
  if (untrackedChoice === 0) /* Cancel */
    null;
  else if (untrackedChoice === 1) /* Add */
    shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */
    allowUntracked = true;
}

async function f3() {
  if (untrackedChoice === 0) /* Cancel */ // Cancel
    null;
  else if (untrackedChoice === 1) /* Add */ // Add
    shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */ // Allow Untracked
    allowUntracked = true;
}

async function f4() {
  if (untrackedChoice === 0)
    /* Cancel */ {
      return null;
    }
  else if (untrackedChoice === 1)
    /* Add */ {
      await repository.addAll(Array.from(untrackedChanges.keys()));
      shouldAmend = true;
    }
  else if (untrackedChoice === 2)
    /* Allow Untracked */ {
      allowUntracked = true;
    }
}

async function f5() {
  if (untrackedChoice === 0) {
    /* Cancel */ return null;
  } else if (untrackedChoice === 1) {
    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) {
    /* Allow Untracked */ allowUntracked = true;
  }
}
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,11 +1,11 @@
 async function f1() {
-  if (untrackedChoice === 0) {
-    /* Cancel */ return null;
-  } else if (untrackedChoice === 1) {
-    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
+  if (untrackedChoice === 0) /* Cancel */ {
+    return null;
+  } else if (untrackedChoice === 1) /* Add */ {
+    await repository.addAll(Array.from(untrackedChanges.keys()));
     shouldAmend = true;
-  } else if (untrackedChoice === 2) {
-    /* Allow Untracked */ allowUntracked = true;
+  } else if (untrackedChoice === 2) /* Allow Untracked */ {
+    allowUntracked = true;
   }
 }
 
@@ -16,25 +16,28 @@
 }
 
 async function f3() {
-  if (untrackedChoice === 0)
-    /* Cancel */ // Cancel
+  if (untrackedChoice === 0) /* Cancel */
+    // Cancel
     null;
-  else if (untrackedChoice === 1)
-    /* Add */ // Add
+  else if (untrackedChoice === 1) /* Add */
+    // Add
     shouldAmend = true;
-  else if (untrackedChoice === 2)
-    /* Allow Untracked */ // Allow Untracked
+  else if (untrackedChoice === 2) /* Allow Untracked */
+    // Allow Untracked
     allowUntracked = true;
 }
 
 async function f4() {
-  if (untrackedChoice === 0) {
-    /* Cancel */ return null;
-  } else if (untrackedChoice === 1) {
-    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
+  if (untrackedChoice === 0)
+  /* Cancel */ {
+    return null;
+  } else if (untrackedChoice === 1)
+  /* Add */ {
+    await repository.addAll(Array.from(untrackedChanges.keys()));
     shouldAmend = true;
-  } else if (untrackedChoice === 2) {
-    /* Allow Untracked */ allowUntracked = true;
+  } else if (untrackedChoice === 2)
+  /* Allow Untracked */ {
+    allowUntracked = true;
   }
 }
 
```

# Output

```js
async function f1() {
  if (untrackedChoice === 0) /* Cancel */ {
    return null;
  } else if (untrackedChoice === 1) /* Add */ {
    await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) /* Allow Untracked */ {
    allowUntracked = true;
  }
}

async function f2() {
  if (untrackedChoice === 0) /* Cancel */ null;
  else if (untrackedChoice === 1) /* Add */ shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */ allowUntracked = true;
}

async function f3() {
  if (untrackedChoice === 0) /* Cancel */
    // Cancel
    null;
  else if (untrackedChoice === 1) /* Add */
    // Add
    shouldAmend = true;
  else if (untrackedChoice === 2) /* Allow Untracked */
    // Allow Untracked
    allowUntracked = true;
}

async function f4() {
  if (untrackedChoice === 0)
  /* Cancel */ {
    return null;
  } else if (untrackedChoice === 1)
  /* Add */ {
    await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2)
  /* Allow Untracked */ {
    allowUntracked = true;
  }
}

async function f5() {
  if (untrackedChoice === 0) {
    /* Cancel */ return null;
  } else if (untrackedChoice === 1) {
    /* Add */ await repository.addAll(Array.from(untrackedChanges.keys()));
    shouldAmend = true;
  } else if (untrackedChoice === 2) {
    /* Allow Untracked */ allowUntracked = true;
  }
}
```



