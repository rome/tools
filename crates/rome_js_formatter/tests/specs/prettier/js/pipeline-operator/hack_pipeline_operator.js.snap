---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: "js\\pipeline-operator\\hack_pipeline_operator.js"
---

# Input

```js
a |> await % |> % * 3;

foo
  |> await %
  |> % || throw new Error(`foo ${bar1}`)
  |> bar2(%, ", ")
  |> bar3(%)
  |> % + "!"
  |> new Bar.Foo(%)
  |> await bar.bar(%)
  |> console.log(%);

const result = "hello"
  |> doubleSay(%)
  |> capitalize(%, "foo")
  |> exclaim(%);

function createPerson (attrs) {
  attrs
    |> foo(%)
    |> foo(%)
    |> Person.insertIntoDatabase(%);
}

const result = [1,2,3]
 |> %.map(a => a * 2 )
 |> %.filter(a => a > 5)
 |> %.reduce((sum, a) => a+sum, 0)
 |> increment(%)
 |> add(%, 3)

const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  |> map(%, event => event.target.value)
  |> filter(%, searchText => searchText.length > 2)
  |> debounce(%, 300)
  |> distinctUntilChanged(%)
  |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  |> share(%);

v |> %.method() |> f(%);

async function * f () {
  return x
    |> (yield %)
    |> (await %)
    |> y(%)
    |> a.b(%)
    |> (a.b(%))
    |> a.b(%)
    |> (a.b?.(%))
    |> a.b?.(%);
}

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,50 +1,56 @@
-a |> (await %) |> % * 3;
+a |> await % |> % * 3;
 
 foo
-|> (await %)
-|> % || throw new Error(`foo ${bar1}`)
-|> bar2(%, ", ")
-|> bar3(%)
-|> % + "!"
-|> new Bar.Foo(%)
-|> (await bar.bar(%))
-|> console.log(%);
+  |> await %
+  |> % ||
+throw new Error(`foo ${bar1}`)
+  |> bar2(%, ", ")
+  |> bar3(%)
+  |> % + "!"
+  |> new Bar.Foo(%)
+  |> await bar.bar(%)
+  |> console.log(%);
 
-const result = "hello" |> doubleSay(%) |> capitalize(%, "foo") |> exclaim(%);
+const result = "hello"
+  |> doubleSay(%)
+  |> capitalize(%, "foo")
+  |> exclaim(%);
 
 function createPerson(attrs) {
-  attrs |> foo(%) |> foo(%) |> Person.insertIntoDatabase(%);
+  attrs
+    |> foo(%)
+    |> foo(%)
+    |> Person.insertIntoDatabase(%);
 }
 
-const result =
-  [1, 2, 3]
-  |> %.map((a) => a * 2)
-  |> %.filter((a) => a > 5)
-  |> %.reduce((sum, a) => a + sum, 0)
-  |> increment(%)
-  |> add(%, 3);
+const result = [1,2,3]
+ |> %
+.map(a => a * 2 )
+ |> %.filter(a => a > 5)
+ |> %.reduce((sum, a) => a+sum, 0)
+ |> increment(%)
+ |> add(%, 3)
 
-const searchResults$ =
-  fromEvent(document.querySelector("input"), "input")
-  |> map(%, (event) => event.target.value)
-  |> filter(%, (searchText) => searchText.length > 2)
+const searchResults$ = fromEvent(document.querySelector('input'), 'input')
+  |> map(%, event => event.target.value)
+  |> filter(%, searchText => searchText.length > 2)
   |> debounce(%, 300)
   |> distinctUntilChanged(%)
-  |> switchMap(%, (searchText) => queryApi(searchText) |> retry(%, 3))
+  |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
   |> share(%);
 
-v |> %.method() |> f(%);
+v |> %
+.method() |> f(%)
 
 async function* f() {
-  return (
-    x
-    |> (yield %)
+  return x
+    |> (yield %
+  )
     |> (await %)
     |> y(%)
     |> a.b(%)
+    |> (a.b(%))
     |> a.b(%)
-    |> a.b(%)
+    |> (a.b?.(%))
     |> a.b?.(%)
-    |> a.b?.(%)
-  );
 }
```

# Output

```js
a |> await % |> % * 3;

foo
  |> await %
  |> % ||
throw new Error(`foo ${bar1}`)
  |> bar2(%, ", ")
  |> bar3(%)
  |> % + "!"
  |> new Bar.Foo(%)
  |> await bar.bar(%)
  |> console.log(%);

const result = "hello"
  |> doubleSay(%)
  |> capitalize(%, "foo")
  |> exclaim(%);

function createPerson(attrs) {
  attrs
    |> foo(%)
    |> foo(%)
    |> Person.insertIntoDatabase(%);
}

const result = [1,2,3]
 |> %
.map(a => a * 2 )
 |> %.filter(a => a > 5)
 |> %.reduce((sum, a) => a+sum, 0)
 |> increment(%)
 |> add(%, 3)

const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  |> map(%, event => event.target.value)
  |> filter(%, searchText => searchText.length > 2)
  |> debounce(%, 300)
  |> distinctUntilChanged(%)
  |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  |> share(%);

v |> %
.method() |> f(%)

async function* f() {
  return x
    |> (yield %
  )
    |> (await %)
    |> y(%)
    |> a.b(%)
    |> (a.b(%))
    |> a.b(%)
    |> (a.b?.(%))
    |> a.b?.(%)
}
```

# Errors
```
hack_pipeline_operator.js:1:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
  > 1 │ a |> await % |> % * 3;
      │    ^
    2 │ 
    3 │ foo
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:1:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an unary expression but instead found '%'
  
  > 1 │ a |> await % |> % * 3;
      │            ^
    2 │ 
    3 │ foo
  
  i Expected an unary expression here
  
  > 1 │ a |> await % |> % * 3;
      │            ^
    2 │ 
    3 │ foo
  
hack_pipeline_operator.js:1:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '|'
  
  > 1 │ a |> await % |> % * 3;
      │              ^
    2 │ 
    3 │ foo
  
  i Expected an expression here
  
  > 1 │ a |> await % |> % * 3;
      │              ^
    2 │ 
    3 │ foo
  
hack_pipeline_operator.js:1:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
  > 1 │ a |> await % |> % * 3;
      │               ^
    2 │ 
    3 │ foo
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:1:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
  > 1 │ a |> await % |> % * 3;
      │                 ^
    2 │ 
    3 │ foo
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:1:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '*'
  
  > 1 │ a |> await % |> % * 3;
      │                   ^
    2 │ 
    3 │ foo
  
  i Expected an expression here
  
  > 1 │ a |> await % |> % * 3;
      │                   ^
    2 │ 
    3 │ foo
  
hack_pipeline_operator.js:4:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    3 │ foo
  > 4 │   |> await %
      │    ^
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:4:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an unary expression but instead found '%'
  
    3 │ foo
  > 4 │   |> await %
      │            ^
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  
  i Expected an unary expression here
  
    3 │ foo
  > 4 │   |> await %
      │            ^
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  
hack_pipeline_operator.js:5:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '|'
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │   ^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
  i Expected an expression here
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │   ^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
hack_pipeline_operator.js:5:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │    ^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:5:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │      ^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:5:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '||'
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │        ^^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
  i Expected an expression here
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │        ^^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
hack_pipeline_operator.js:5:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found 'throw'
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │           ^^^^^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
  i Expected an expression here
  
    3 │ foo
    4 │   |> await %
  > 5 │   |> % || throw new Error(`foo ${bar1}`)
      │           ^^^^^
    6 │   |> bar2(%, ", ")
    7 │   |> bar3(%)
  
hack_pipeline_operator.js:6:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    4 │   |> await %
    5 │   |> % || throw new Error(`foo ${bar1}`)
  > 6 │   |> bar2(%, ", ")
      │    ^
    7 │   |> bar3(%)
    8 │   |> % + "!"
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:6:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    4 │   |> await %
    5 │   |> % || throw new Error(`foo ${bar1}`)
  > 6 │   |> bar2(%, ", ")
      │           ^
    7 │   |> bar3(%)
    8 │   |> % + "!"
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:6:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    4 │   |> await %
    5 │   |> % || throw new Error(`foo ${bar1}`)
  > 6 │   |> bar2(%, ", ")
      │            ^
    7 │   |> bar3(%)
    8 │   |> % + "!"
  
  i Expected an expression here
  
    4 │   |> await %
    5 │   |> % || throw new Error(`foo ${bar1}`)
  > 6 │   |> bar2(%, ", ")
      │            ^
    7 │   |> bar3(%)
    8 │   |> % + "!"
  
hack_pipeline_operator.js:7:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  > 7 │   |> bar3(%)
      │    ^
    8 │   |> % + "!"
    9 │   |> new Bar.Foo(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:7:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  > 7 │   |> bar3(%)
      │           ^
    8 │   |> % + "!"
    9 │   |> new Bar.Foo(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:7:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  > 7 │   |> bar3(%)
      │            ^
    8 │   |> % + "!"
    9 │   |> new Bar.Foo(%)
  
  i Expected an expression here
  
    5 │   |> % || throw new Error(`foo ${bar1}`)
    6 │   |> bar2(%, ", ")
  > 7 │   |> bar3(%)
      │            ^
    8 │   |> % + "!"
    9 │   |> new Bar.Foo(%)
  
hack_pipeline_operator.js:8:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     6 │   |> bar2(%, ", ")
     7 │   |> bar3(%)
   > 8 │   |> % + "!"
       │    ^
     9 │   |> new Bar.Foo(%)
    10 │   |> await bar.bar(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:8:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
     6 │   |> bar2(%, ", ")
     7 │   |> bar3(%)
   > 8 │   |> % + "!"
       │      ^
     9 │   |> new Bar.Foo(%)
    10 │   |> await bar.bar(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:9:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     7 │   |> bar3(%)
     8 │   |> % + "!"
   > 9 │   |> new Bar.Foo(%)
       │    ^
    10 │   |> await bar.bar(%)
    11 │   |> console.log(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:9:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
     7 │   |> bar3(%)
     8 │   |> % + "!"
   > 9 │   |> new Bar.Foo(%)
       │                  ^
    10 │   |> await bar.bar(%)
    11 │   |> console.log(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:9:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
     7 │   |> bar3(%)
     8 │   |> % + "!"
   > 9 │   |> new Bar.Foo(%)
       │                   ^
    10 │   |> await bar.bar(%)
    11 │   |> console.log(%);
  
  i Expected an expression here
  
     7 │   |> bar3(%)
     8 │   |> % + "!"
   > 9 │   |> new Bar.Foo(%)
       │                   ^
    10 │   |> await bar.bar(%)
    11 │   |> console.log(%);
  
hack_pipeline_operator.js:10:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     8 │   |> % + "!"
     9 │   |> new Bar.Foo(%)
  > 10 │   |> await bar.bar(%)
       │    ^
    11 │   |> console.log(%);
    12 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:10:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
     8 │   |> % + "!"
     9 │   |> new Bar.Foo(%)
  > 10 │   |> await bar.bar(%)
       │                    ^
    11 │   |> console.log(%);
    12 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:10:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
     8 │   |> % + "!"
     9 │   |> new Bar.Foo(%)
  > 10 │   |> await bar.bar(%)
       │                     ^
    11 │   |> console.log(%);
    12 │ 
  
  i Expected an expression here
  
     8 │   |> % + "!"
     9 │   |> new Bar.Foo(%)
  > 10 │   |> await bar.bar(%)
       │                     ^
    11 │   |> console.log(%);
    12 │ 
  
hack_pipeline_operator.js:11:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     9 │   |> new Bar.Foo(%)
    10 │   |> await bar.bar(%)
  > 11 │   |> console.log(%);
       │    ^
    12 │ 
    13 │ const result = "hello"
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:11:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
     9 │   |> new Bar.Foo(%)
    10 │   |> await bar.bar(%)
  > 11 │   |> console.log(%);
       │                  ^
    12 │ 
    13 │ const result = "hello"
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:11:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
     9 │   |> new Bar.Foo(%)
    10 │   |> await bar.bar(%)
  > 11 │   |> console.log(%);
       │                   ^
    12 │ 
    13 │ const result = "hello"
  
  i Expected an expression here
  
     9 │   |> new Bar.Foo(%)
    10 │   |> await bar.bar(%)
  > 11 │   |> console.log(%);
       │                   ^
    12 │ 
    13 │ const result = "hello"
  
hack_pipeline_operator.js:14:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    13 │ const result = "hello"
  > 14 │   |> doubleSay(%)
       │    ^
    15 │   |> capitalize(%, "foo")
    16 │   |> exclaim(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:14:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    13 │ const result = "hello"
  > 14 │   |> doubleSay(%)
       │                ^
    15 │   |> capitalize(%, "foo")
    16 │   |> exclaim(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:14:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    13 │ const result = "hello"
  > 14 │   |> doubleSay(%)
       │                 ^
    15 │   |> capitalize(%, "foo")
    16 │   |> exclaim(%);
  
  i Expected an expression here
  
    13 │ const result = "hello"
  > 14 │   |> doubleSay(%)
       │                 ^
    15 │   |> capitalize(%, "foo")
    16 │   |> exclaim(%);
  
hack_pipeline_operator.js:15:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    13 │ const result = "hello"
    14 │   |> doubleSay(%)
  > 15 │   |> capitalize(%, "foo")
       │    ^
    16 │   |> exclaim(%);
    17 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:15:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    13 │ const result = "hello"
    14 │   |> doubleSay(%)
  > 15 │   |> capitalize(%, "foo")
       │                 ^
    16 │   |> exclaim(%);
    17 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:15:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    13 │ const result = "hello"
    14 │   |> doubleSay(%)
  > 15 │   |> capitalize(%, "foo")
       │                  ^
    16 │   |> exclaim(%);
    17 │ 
  
  i Expected an expression here
  
    13 │ const result = "hello"
    14 │   |> doubleSay(%)
  > 15 │   |> capitalize(%, "foo")
       │                  ^
    16 │   |> exclaim(%);
    17 │ 
  
hack_pipeline_operator.js:16:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    14 │   |> doubleSay(%)
    15 │   |> capitalize(%, "foo")
  > 16 │   |> exclaim(%);
       │    ^
    17 │ 
    18 │ function createPerson (attrs) {
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:16:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    14 │   |> doubleSay(%)
    15 │   |> capitalize(%, "foo")
  > 16 │   |> exclaim(%);
       │              ^
    17 │ 
    18 │ function createPerson (attrs) {
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:16:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    14 │   |> doubleSay(%)
    15 │   |> capitalize(%, "foo")
  > 16 │   |> exclaim(%);
       │               ^
    17 │ 
    18 │ function createPerson (attrs) {
  
  i Expected an expression here
  
    14 │   |> doubleSay(%)
    15 │   |> capitalize(%, "foo")
  > 16 │   |> exclaim(%);
       │               ^
    17 │ 
    18 │ function createPerson (attrs) {
  
hack_pipeline_operator.js:20:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    18 │ function createPerson (attrs) {
    19 │   attrs
  > 20 │     |> foo(%)
       │      ^
    21 │     |> foo(%)
    22 │     |> Person.insertIntoDatabase(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:20:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    18 │ function createPerson (attrs) {
    19 │   attrs
  > 20 │     |> foo(%)
       │            ^
    21 │     |> foo(%)
    22 │     |> Person.insertIntoDatabase(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:20:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    18 │ function createPerson (attrs) {
    19 │   attrs
  > 20 │     |> foo(%)
       │             ^
    21 │     |> foo(%)
    22 │     |> Person.insertIntoDatabase(%);
  
  i Expected an expression here
  
    18 │ function createPerson (attrs) {
    19 │   attrs
  > 20 │     |> foo(%)
       │             ^
    21 │     |> foo(%)
    22 │     |> Person.insertIntoDatabase(%);
  
hack_pipeline_operator.js:21:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    19 │   attrs
    20 │     |> foo(%)
  > 21 │     |> foo(%)
       │      ^
    22 │     |> Person.insertIntoDatabase(%);
    23 │ }
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:21:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    19 │   attrs
    20 │     |> foo(%)
  > 21 │     |> foo(%)
       │            ^
    22 │     |> Person.insertIntoDatabase(%);
    23 │ }
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:21:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    19 │   attrs
    20 │     |> foo(%)
  > 21 │     |> foo(%)
       │             ^
    22 │     |> Person.insertIntoDatabase(%);
    23 │ }
  
  i Expected an expression here
  
    19 │   attrs
    20 │     |> foo(%)
  > 21 │     |> foo(%)
       │             ^
    22 │     |> Person.insertIntoDatabase(%);
    23 │ }
  
hack_pipeline_operator.js:22:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    20 │     |> foo(%)
    21 │     |> foo(%)
  > 22 │     |> Person.insertIntoDatabase(%);
       │      ^
    23 │ }
    24 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:22:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    20 │     |> foo(%)
    21 │     |> foo(%)
  > 22 │     |> Person.insertIntoDatabase(%);
       │                                  ^
    23 │ }
    24 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:22:35 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    20 │     |> foo(%)
    21 │     |> foo(%)
  > 22 │     |> Person.insertIntoDatabase(%);
       │                                   ^
    23 │ }
    24 │ 
  
  i Expected an expression here
  
    20 │     |> foo(%)
    21 │     |> foo(%)
  > 22 │     |> Person.insertIntoDatabase(%);
       │                                   ^
    23 │ }
    24 │ 
  
hack_pipeline_operator.js:26:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    25 │ const result = [1,2,3]
  > 26 │  |> %.map(a => a * 2 )
       │   ^
    27 │  |> %.filter(a => a > 5)
    28 │  |> %.reduce((sum, a) => a+sum, 0)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:26:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    25 │ const result = [1,2,3]
  > 26 │  |> %.map(a => a * 2 )
       │     ^
    27 │  |> %.filter(a => a > 5)
    28 │  |> %.reduce((sum, a) => a+sum, 0)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:26:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '.'
  
    25 │ const result = [1,2,3]
  > 26 │  |> %.map(a => a * 2 )
       │      ^
    27 │  |> %.filter(a => a > 5)
    28 │  |> %.reduce((sum, a) => a+sum, 0)
  
  i Expected an expression here
  
    25 │ const result = [1,2,3]
  > 26 │  |> %.map(a => a * 2 )
       │      ^
    27 │  |> %.filter(a => a > 5)
    28 │  |> %.reduce((sum, a) => a+sum, 0)
  
hack_pipeline_operator.js:33:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  > 33 │   |> map(%, event => event.target.value)
       │    ^
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:33:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  > 33 │   |> map(%, event => event.target.value)
       │          ^
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:33:11 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  > 33 │   |> map(%, event => event.target.value)
       │           ^
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  
  i Expected an expression here
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  > 33 │   |> map(%, event => event.target.value)
       │           ^
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  
hack_pipeline_operator.js:34:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
    33 │   |> map(%, event => event.target.value)
  > 34 │   |> filter(%, searchText => searchText.length > 2)
       │    ^
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:34:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
    33 │   |> map(%, event => event.target.value)
  > 34 │   |> filter(%, searchText => searchText.length > 2)
       │             ^
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:34:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
    33 │   |> map(%, event => event.target.value)
  > 34 │   |> filter(%, searchText => searchText.length > 2)
       │              ^
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  
  i Expected an expression here
  
    32 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
    33 │   |> map(%, event => event.target.value)
  > 34 │   |> filter(%, searchText => searchText.length > 2)
       │              ^
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  
hack_pipeline_operator.js:35:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    33 │   |> map(%, event => event.target.value)
    34 │   |> filter(%, searchText => searchText.length > 2)
  > 35 │   |> debounce(%, 300)
       │    ^
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:35:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    33 │   |> map(%, event => event.target.value)
    34 │   |> filter(%, searchText => searchText.length > 2)
  > 35 │   |> debounce(%, 300)
       │               ^
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:35:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    33 │   |> map(%, event => event.target.value)
    34 │   |> filter(%, searchText => searchText.length > 2)
  > 35 │   |> debounce(%, 300)
       │                ^
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  
  i Expected an expression here
  
    33 │   |> map(%, event => event.target.value)
    34 │   |> filter(%, searchText => searchText.length > 2)
  > 35 │   |> debounce(%, 300)
       │                ^
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  
hack_pipeline_operator.js:36:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  > 36 │   |> distinctUntilChanged(%)
       │    ^
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
    38 │   |> share(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:36:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  > 36 │   |> distinctUntilChanged(%)
       │                           ^
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
    38 │   |> share(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:36:28 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  > 36 │   |> distinctUntilChanged(%)
       │                            ^
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
    38 │   |> share(%);
  
  i Expected an expression here
  
    34 │   |> filter(%, searchText => searchText.length > 2)
    35 │   |> debounce(%, 300)
  > 36 │   |> distinctUntilChanged(%)
       │                            ^
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
    38 │   |> share(%);
  
hack_pipeline_operator.js:37:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │    ^
    38 │   |> share(%);
    39 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:37:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                ^
    38 │   |> share(%);
    39 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:37:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                 ^
    38 │   |> share(%);
    39 │ 
  
  i Expected an expression here
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                 ^
    38 │   |> share(%);
    39 │ 
  
hack_pipeline_operator.js:37:55 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                                                       ^
    38 │   |> share(%);
    39 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:37:63 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                                                               ^
    38 │   |> share(%);
    39 │ 
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:37:64 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ','
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                                                                ^
    38 │   |> share(%);
    39 │ 
  
  i Expected an expression here
  
    35 │   |> debounce(%, 300)
    36 │   |> distinctUntilChanged(%)
  > 37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
       │                                                                ^
    38 │   |> share(%);
    39 │ 
  
hack_pipeline_operator.js:38:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  > 38 │   |> share(%);
       │    ^
    39 │ 
    40 │ v |> %.method() |> f(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:38:12 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  > 38 │   |> share(%);
       │            ^
    39 │ 
    40 │ v |> %.method() |> f(%);
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:38:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  > 38 │   |> share(%);
       │             ^
    39 │ 
    40 │ v |> %.method() |> f(%);
  
  i Expected an expression here
  
    36 │   |> distinctUntilChanged(%)
    37 │   |> switchMap(%, searchText => queryApi(searchText) |> retry(%, 3))
  > 38 │   |> share(%);
       │             ^
    39 │ 
    40 │ v |> %.method() |> f(%);
  
hack_pipeline_operator.js:40:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    38 │   |> share(%);
    39 │ 
  > 40 │ v |> %.method() |> f(%);
       │    ^
    41 │ 
    42 │ async function * f () {
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:40:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `%` operator.
  
    38 │   |> share(%);
    39 │ 
  > 40 │ v |> %.method() |> f(%);
       │      ^
    41 │ 
    42 │ async function * f () {
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:40:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '.'
  
    38 │   |> share(%);
    39 │ 
  > 40 │ v |> %.method() |> f(%);
       │       ^
    41 │ 
    42 │ async function * f () {
  
  i Expected an expression here
  
    38 │   |> share(%);
    39 │ 
  > 40 │ v |> %.method() |> f(%);
       │       ^
    41 │ 
    42 │ async function * f () {
  
hack_pipeline_operator.js:44:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    42 │ async function * f () {
    43 │   return x
  > 44 │     |> (yield %)
       │      ^
    45 │     |> (await %)
    46 │     |> y(%)
  
  i This operator requires a left hand side value
  
hack_pipeline_operator.js:44:15 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `%`
  
    42 │ async function * f () {
    43 │   return x
  > 44 │     |> (yield %)
       │               ^
    45 │     |> (await %)
    46 │     |> y(%)
  
  i Remove %
  
hack_pipeline_operator.js:44:16 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found ')'
  
    42 │ async function * f () {
    43 │   return x
  > 44 │     |> (yield %)
       │                ^
    45 │     |> (await %)
    46 │     |> y(%)
  
  i Expected an expression here
  
    42 │ async function * f () {
    43 │   return x
  > 44 │     |> (yield %)
       │                ^
    45 │     |> (await %)
    46 │     |> y(%)
  

```


