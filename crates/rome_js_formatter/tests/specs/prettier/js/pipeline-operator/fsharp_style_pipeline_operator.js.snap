---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

const user = url
  |> api.get
  |> await
  |> r => r.json()
  |> await
  |> j => j.data.user;

const f = (x) => (x |> (y) => y + 1)
  |> (z) => z * y

const _f = (x) => x
  |> (y) => y + 1
  |> (z) => z * y

const g = (x) => x
  |> (y) => (y + 1 |> (z) => z * y)

const _g = (x) => x
  |> (y => (y + 1 |> (z) => z * y))

const __g = (x) => x
  |> (
    y => {
      return (y + 1 |> (z) => z * y);
    }
  )

const f = x + ((f) => (f |> f));
const f = x |> (f) => f |> f;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,34 +1,72 @@
-promise
+se
   |> await
-  |> (x) => doubleSay(x, ", ")
+  |> x => d
+ubleSay(x, ', ')
   |> capitalize
-  |> (x) => x + "!"
-  |> (x) => new User.Message(x)
-  |> (x) => stream.write(x)
+  |> x => x + '!'
+  |> x => new User.Message(x)
+  |> x => stream.write(x)
   |> await
   |> console.log;
 
-const result = "hello" |> doubleSay |> capitalize |> exclaim;
+co
+
+ result = "hello"
+  |> doubleSay
+  |> capitalize
+  |> exclaim;
+
+con
+
+ newScore = person.score
+  |> double
+  |> n => a
+d(7, n)
+  |> n => boundScore(0, 100, n);
+
+co
+
+ user = url
+  |> api.get
+  |> await
+  |> r => r
+json()
+  |> await
+  |> j => j.data.user;
+
+co
+
+ f = (x) => (x |> (y) => y
++ 1)
+  |> (z) => z * y
+
+con
 
-const newScore =
-  person.score |> double |> (n) => add(7, n) |> (n) => boundScore(0, 100, n);
+ _f = (x) => x
+  |> (y) => y
++ 1
+  |> (z) => z * y
 
-const user =
-  url |> api.get |> await |> (r) => r.json() |> await |> (j) => j.data.user;
+con
 
-const f = (x) => x |> (y) => y + 1 |> (z) => z * y;
+ g = (x) => x
+  |> (y) => (
+ + 1 |> (z) => z * y)
 
-const _f = (x) => x |> (y) => y + 1 |> (z) => z * y;
+con
 
-const g = (x) => x |> (y) => (y + 1 |> (z) => z * y);
+ _g = (x) => x
+  |> (y => (y + 1 |> (z) => z
+* y))
 
-const _g = (x) => x |> ((y) => (y + 1 |> (z) => z * y));
+con
 
-const __g = (x) =>
-  x
-  |> ((y) => {
-    return y + 1 |> (z) => z * y;
-  });
+ __g = (x) => x
+  |> (
+    y => {
+      return (y + 1 |> (z) => z * y);
+    }
 
-const f = x + ((f) => f |> f);
-const f = x |> (f) => f |> f;
+const f = x + ((f) => (f |> f));
+const f = x |> (f
+=> f |> f
```

# Output

```js
se
  |> await
  |> x => d
ubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

co

 result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

con

 newScore = person.score
  |> double
  |> n => a
d(7, n)
  |> n => boundScore(0, 100, n);

co

 user = url
  |> api.get
  |> await
  |> r => r
json()
  |> await
  |> j => j.data.user;

co

 f = (x) => (x |> (y) => y
+ 1)
  |> (z) => z * y

con

 _f = (x) => x
  |> (y) => y
+ 1
  |> (z) => z * y

con

 g = (x) => x
  |> (y) => (
 + 1 |> (z) => z * y)

con

 _g = (x) => x
  |> (y => (y + 1 |> (z) => z
* y))

con

 __g = (x) => x
  |> (
    y => {
      return (y + 1 |> (z) => z * y);
    }

const f = x + ((f) => (f |> f));
const f = x |> (f
=> f |> f
```


# Errors
```
error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
  ┌─ fsharp_style_pipeline_operator.js:2:4
  │
2 │   |> await
  │    ^ This operator requires a left hand side value

error[SyntaxError]: expected an unary expression but instead found '|'
  ┌─ fsharp_style_pipeline_operator.js:3:3
  │
3 │   |> x => doubleSay(x, ', ')
  │   ^ Expected an unary expression here

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
  ┌─ fsharp_style_pipeline_operator.js:3:4
  │
3 │   |> x => doubleSay(x, ', ')
  │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ fsharp_style_pipeline_operator.js:3:8
  │  
1 │ ┌ promise
2 │ │   |> await
3 │ │   |> x => doubleSay(x, ', ')
  │ │        ^^ An explicit or implicit semicolon is expected here...
  │ └─────────' ...Which is required to end this statement

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:12:4
   │
12 │   |> doubleSay
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:13:4
   │
13 │   |> capitalize
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:14:4
   │
14 │   |> exclaim;
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:17:4
   │
17 │   |> double
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:18:4
   │
18 │   |> n => add(7, n)
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ fsharp_style_pipeline_operator.js:18:8
   │  
16 │ ┌ const newScore = person.score
17 │ │   |> double
18 │ │   |> n => add(7, n)
   │ │        ^^ An explicit or implicit semicolon is expected here...
   │ └───────' ...Which is required to end this statement

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:22:4
   │
22 │   |> api.get
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:23:4
   │
23 │   |> await
   │    ^ This operator requires a left hand side value

error[SyntaxError]: expected an unary expression but instead found '|'
   ┌─ fsharp_style_pipeline_operator.js:24:3
   │
24 │   |> r => r.json()
   │   ^ Expected an unary expression here

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:24:4
   │
24 │   |> r => r.json()
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ fsharp_style_pipeline_operator.js:24:8
   │  
21 │ ┌ const user = url
22 │ │   |> api.get
23 │ │   |> await
24 │ │   |> r => r.json()
   │ │        ^^ An explicit or implicit semicolon is expected here...
   │ └───────' ...Which is required to end this statement

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:28:22
   │
28 │ const f = (x) => (x |> (y) => y + 1)
   │                      ^ This operator requires a left hand side value

error[SyntaxError]: expected `)` but instead found `=>`
   ┌─ fsharp_style_pipeline_operator.js:28:28
   │
28 │ const f = (x) => (x |> (y) => y + 1)
   │                            ^^ unexpected

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:32:4
   │
32 │   |> (y) => y + 1
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ fsharp_style_pipeline_operator.js:32:10
   │  
31 │ ┌ const _f = (x) => x
32 │ │   |> (y) => y + 1
   │ │          ^^ An explicit or implicit semicolon is expected here...
   │ └─────────' ...Which is required to end this statement

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:36:4
   │
36 │   |> (y) => (y + 1 |> (z) => z * y)
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ fsharp_style_pipeline_operator.js:36:10
   │  
35 │ ┌ const g = (x) => x
36 │ │   |> (y) => (y + 1 |> (z) => z * y)
   │ │          ^^ An explicit or implicit semicolon is expected here...
   │ └─────────' ...Which is required to end this statement

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:39:4
   │
39 │   |> (y => (y + 1 |> (z) => z * y))
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:39:20
   │
39 │   |> (y => (y + 1 |> (z) => z * y))
   │                    ^ This operator requires a left hand side value

error[SyntaxError]: expected `)` but instead found `=>`
   ┌─ fsharp_style_pipeline_operator.js:39:26
   │
39 │   |> (y => (y + 1 |> (z) => z * y))
   │                          ^^ unexpected

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:42:4
   │
42 │   |> (
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:44:22
   │
44 │       return (y + 1 |> (z) => z * y);
   │                      ^ This operator requires a left hand side value

error[SyntaxError]: expected `)` but instead found `=>`
   ┌─ fsharp_style_pipeline_operator.js:44:28
   │
44 │       return (y + 1 |> (z) => z * y);
   │                            ^^ unexpected

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:48:27
   │
48 │ const f = x + ((f) => (f |> f));
   │                           ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ fsharp_style_pipeline_operator.js:49:14
   │
49 │ const f = x |> (f) => f |> f;
   │              ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ fsharp_style_pipeline_operator.js:49:20
   │
49 │ const f = x |> (f) => f |> f;
   │ -------------------^^ An explicit or implicit semicolon is expected here...
   │ │                   
   │ ...Which is required to end this statement


```


