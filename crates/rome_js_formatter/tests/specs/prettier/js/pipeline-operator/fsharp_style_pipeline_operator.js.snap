---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info:
  test_file: js/pipeline-operator/fsharp_style_pipeline_operator.js
---

# Input

```js
promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

const user = url
  |> api.get
  |> await
  |> r => r.json()
  |> await
  |> j => j.data.user;

const f = (x) => (x |> (y) => y + 1)
  |> (z) => z * y

const _f = (x) => x
  |> (y) => y + 1
  |> (z) => z * y

const g = (x) => x
  |> (y) => (y + 1 |> (z) => z * y)

const _g = (x) => x
  |> (y => (y + 1 |> (z) => z * y))

const __g = (x) => x
  |> (
    y => {
      return (y + 1 |> (z) => z * y);
    }
  )

const f = x + ((f) => (f |> f));
const f = x |> (f) => f |> f;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,34 +1,57 @@
 promise
   |> await
-  |> (x) => doubleSay(x, ", ")
+  |> x
+=> doubleSay(x, ', ')
   |> capitalize
-  |> (x) => x + "!"
-  |> (x) => new User.Message(x)
-  |> (x) => stream.write(x)
+  |> x => x + '!'
+  |> x => new User.Message(x)
+  |> x => stream.write(x)
   |> await
-  |> console.log;
+  |> console.log
 
-const result = "hello" |> doubleSay |> capitalize |> exclaim;
+const result = "hello"
+  |> doubleSay
+  |> capitalize
+  |> exclaim;
 
-const newScore =
-  person.score |> double |> (n) => add(7, n) |> (n) => boundScore(0, 100, n);
+const newScore = person.score
+  |> double
+  |> n
+=> add(7, n)
+  |> n => boundScore(0, 100, n)
 
-const user =
-  url |> api.get |> await |> (r) => r.json() |> await |> (j) => j.data.user;
+const user = url
+  |> api.get
+  |> await
+  |> r
+=> r.json()
+  |> await
+  |> j => j.data.user
 
-const f = (x) => x |> (y) => y + 1 |> (z) => z * y;
+const f = (x) => (x |> (y)
+=> y + 1)
+  |> (z) => z * y
 
-const _f = (x) => x |> (y) => y + 1 |> (z) => z * y;
+const _f = (x) => x
+  |> (y)
+=> y + 1
+  |> (z) => z * y
 
-const g = (x) => x |> (y) => (y + 1 |> (z) => z * y);
+const g = (x) => x
+  |> (y)
+=> (y + 1 |> (z) => z * y)
 
-const _g = (x) => x |> ((y) => (y + 1 |> (z) => z * y));
+const _g = (x) => x
+  |> (y => (y + 1 |> (z)
+=> z * y))
 
-const __g = (x) =>
-  x
-  |> ((y) => {
-    return y + 1 |> (z) => z * y;
-  });
+const __g = (x) => x
+  |> (
+    y => {
+      return (y + 1 |> (z) => z * y);
+    }
+  )
 
-const f = x + ((f) => f |> f);
-const f = x |> (f) => f |> f;
+const f = x + ((f) => (f |> f));
+const f = x |> (f)
+=> f |> f
```

# Output

```js
promise
  |> await
  |> x
=> doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

const newScore = person.score
  |> double
  |> n
=> add(7, n)
  |> n => boundScore(0, 100, n)

const user = url
  |> api.get
  |> await
  |> r
=> r.json()
  |> await
  |> j => j.data.user

const f = (x) => (x |> (y)
=> y + 1)
  |> (z) => z * y

const _f = (x) => x
  |> (y)
=> y + 1
  |> (z) => z * y

const g = (x) => x
  |> (y)
=> (y + 1 |> (z) => z * y)

const _g = (x) => x
  |> (y => (y + 1 |> (z)
=> z * y))

const __g = (x) => x
  |> (
    y => {
      return (y + 1 |> (z) => z * y);
    }
  )

const f = x + ((f) => (f |> f));
const f = x |> (f)
=> f |> f
```


# Errors
```
fsharp_style_pipeline_operator.js:2:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    1 │ promise
  > 2 │   |> await
      │    ^
    3 │   |> x => doubleSay(x, ', ')
    4 │   |> capitalize
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:3:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an unary expression but instead found '|'
  
    1 │ promise
    2 │   |> await
  > 3 │   |> x => doubleSay(x, ', ')
      │   ^
    4 │   |> capitalize
    5 │   |> x => x + '!'
  
  i Expected an unary expression here
  
    1 │ promise
    2 │   |> await
  > 3 │   |> x => doubleSay(x, ', ')
      │   ^
    4 │   |> capitalize
    5 │   |> x => x + '!'
  
fsharp_style_pipeline_operator.js:3:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    1 │ promise
    2 │   |> await
  > 3 │   |> x => doubleSay(x, ', ')
      │    ^
    4 │   |> capitalize
    5 │   |> x => x + '!'
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:3:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ promise
    2 │   |> await
  > 3 │   |> x => doubleSay(x, ', ')
      │        ^^
    4 │   |> capitalize
    5 │   |> x => x + '!'
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ promise
    2 │   |> await
  > 3 │   |> x => doubleSay(x, ', ')
      │        ^^
    4 │   |> capitalize
    5 │   |> x => x + '!'
  
  i ...Which is required to end this statement
  
  > 1 │ promise
      │ ^^^^^^^
  > 2 │   |> await
  > 3 │   |> x => doubleSay(x, ', ')
      │   ^^^^^^^
    4 │   |> capitalize
    5 │   |> x => x + '!'
  
fsharp_style_pipeline_operator.js:12:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    11 │ const result = "hello"
  > 12 │   |> doubleSay
       │    ^
    13 │   |> capitalize
    14 │   |> exclaim;
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:13:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    11 │ const result = "hello"
    12 │   |> doubleSay
  > 13 │   |> capitalize
       │    ^
    14 │   |> exclaim;
    15 │ 
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:14:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    12 │   |> doubleSay
    13 │   |> capitalize
  > 14 │   |> exclaim;
       │    ^
    15 │ 
    16 │ const newScore = person.score
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:17:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    16 │ const newScore = person.score
  > 17 │   |> double
       │    ^
    18 │   |> n => add(7, n)
    19 │   |> n => boundScore(0, 100, n);
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:18:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    16 │ const newScore = person.score
    17 │   |> double
  > 18 │   |> n => add(7, n)
       │    ^
    19 │   |> n => boundScore(0, 100, n);
    20 │ 
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:18:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    16 │ const newScore = person.score
    17 │   |> double
  > 18 │   |> n => add(7, n)
       │        ^^
    19 │   |> n => boundScore(0, 100, n);
    20 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    16 │ const newScore = person.score
    17 │   |> double
  > 18 │   |> n => add(7, n)
       │        ^^
    19 │   |> n => boundScore(0, 100, n);
    20 │ 
  
  i ...Which is required to end this statement
  
    14 │   |> exclaim;
    15 │ 
  > 16 │ const newScore = person.score
       │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  > 17 │   |> double
  > 18 │   |> n => add(7, n)
       │   ^^^^^
    19 │   |> n => boundScore(0, 100, n);
    20 │ 
  
fsharp_style_pipeline_operator.js:22:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    21 │ const user = url
  > 22 │   |> api.get
       │    ^
    23 │   |> await
    24 │   |> r => r.json()
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:23:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    21 │ const user = url
    22 │   |> api.get
  > 23 │   |> await
       │    ^
    24 │   |> r => r.json()
    25 │   |> await
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:24:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an unary expression but instead found '|'
  
    22 │   |> api.get
    23 │   |> await
  > 24 │   |> r => r.json()
       │   ^
    25 │   |> await
    26 │   |> j => j.data.user;
  
  i Expected an unary expression here
  
    22 │   |> api.get
    23 │   |> await
  > 24 │   |> r => r.json()
       │   ^
    25 │   |> await
    26 │   |> j => j.data.user;
  
fsharp_style_pipeline_operator.js:24:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    22 │   |> api.get
    23 │   |> await
  > 24 │   |> r => r.json()
       │    ^
    25 │   |> await
    26 │   |> j => j.data.user;
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:24:8 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    22 │   |> api.get
    23 │   |> await
  > 24 │   |> r => r.json()
       │        ^^
    25 │   |> await
    26 │   |> j => j.data.user;
  
  i An explicit or implicit semicolon is expected here...
  
    22 │   |> api.get
    23 │   |> await
  > 24 │   |> r => r.json()
       │        ^^
    25 │   |> await
    26 │   |> j => j.data.user;
  
  i ...Which is required to end this statement
  
    19 │   |> n => boundScore(0, 100, n);
    20 │ 
  > 21 │ const user = url
       │ ^^^^^^^^^^^^^^^^
  > 22 │   |> api.get
  > 23 │   |> await
  > 24 │   |> r => r.json()
       │   ^^^^^
    25 │   |> await
    26 │   |> j => j.data.user;
  
fsharp_style_pipeline_operator.js:28:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    26 │   |> j => j.data.user;
    27 │ 
  > 28 │ const f = (x) => (x |> (y) => y + 1)
       │                      ^
    29 │   |> (z) => z * y
    30 │ 
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:28:28 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `=>`
  
    26 │   |> j => j.data.user;
    27 │ 
  > 28 │ const f = (x) => (x |> (y) => y + 1)
       │                            ^^
    29 │   |> (z) => z * y
    30 │ 
  
  i Remove =>
  
fsharp_style_pipeline_operator.js:32:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    31 │ const _f = (x) => x
  > 32 │   |> (y) => y + 1
       │    ^
    33 │   |> (z) => z * y
    34 │ 
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:32:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    31 │ const _f = (x) => x
  > 32 │   |> (y) => y + 1
       │          ^^
    33 │   |> (z) => z * y
    34 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    31 │ const _f = (x) => x
  > 32 │   |> (y) => y + 1
       │          ^^
    33 │   |> (z) => z * y
    34 │ 
  
  i ...Which is required to end this statement
  
    29 │   |> (z) => z * y
    30 │ 
  > 31 │ const _f = (x) => x
       │ ^^^^^^^^^^^^^^^^^^^
  > 32 │   |> (y) => y + 1
       │   ^^^^^^^
    33 │   |> (z) => z * y
    34 │ 
  
fsharp_style_pipeline_operator.js:36:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    35 │ const g = (x) => x
  > 36 │   |> (y) => (y + 1 |> (z) => z * y)
       │    ^
    37 │ 
    38 │ const _g = (x) => x
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:36:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    35 │ const g = (x) => x
  > 36 │   |> (y) => (y + 1 |> (z) => z * y)
       │          ^^
    37 │ 
    38 │ const _g = (x) => x
  
  i An explicit or implicit semicolon is expected here...
  
    35 │ const g = (x) => x
  > 36 │   |> (y) => (y + 1 |> (z) => z * y)
       │          ^^
    37 │ 
    38 │ const _g = (x) => x
  
  i ...Which is required to end this statement
  
    33 │   |> (z) => z * y
    34 │ 
  > 35 │ const g = (x) => x
       │ ^^^^^^^^^^^^^^^^^^
  > 36 │   |> (y) => (y + 1 |> (z) => z * y)
       │   ^^^^^^^
    37 │ 
    38 │ const _g = (x) => x
  
fsharp_style_pipeline_operator.js:39:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    38 │ const _g = (x) => x
  > 39 │   |> (y => (y + 1 |> (z) => z * y))
       │    ^
    40 │ 
    41 │ const __g = (x) => x
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:39:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    38 │ const _g = (x) => x
  > 39 │   |> (y => (y + 1 |> (z) => z * y))
       │                    ^
    40 │ 
    41 │ const __g = (x) => x
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:39:26 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `=>`
  
    38 │ const _g = (x) => x
  > 39 │   |> (y => (y + 1 |> (z) => z * y))
       │                          ^^
    40 │ 
    41 │ const __g = (x) => x
  
  i Remove =>
  
fsharp_style_pipeline_operator.js:42:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    41 │ const __g = (x) => x
  > 42 │   |> (
       │    ^
    43 │     y => {
    44 │       return (y + 1 |> (z) => z * y);
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:44:22 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    42 │   |> (
    43 │     y => {
  > 44 │       return (y + 1 |> (z) => z * y);
       │                      ^
    45 │     }
    46 │   )
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:44:28 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `=>`
  
    42 │   |> (
    43 │     y => {
  > 44 │       return (y + 1 |> (z) => z * y);
       │                            ^^
    45 │     }
    46 │   )
  
  i Remove =>
  
fsharp_style_pipeline_operator.js:48:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    46 │   )
    47 │ 
  > 48 │ const f = x + ((f) => (f |> f));
       │                           ^
    49 │ const f = x |> (f) => f |> f;
    50 │ 
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:49:14 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    48 │ const f = x + ((f) => (f |> f));
  > 49 │ const f = x |> (f) => f |> f;
       │              ^
    50 │ 
  
  i This operator requires a left hand side value
  
fsharp_style_pipeline_operator.js:49:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    48 │ const f = x + ((f) => (f |> f));
  > 49 │ const f = x |> (f) => f |> f;
       │                    ^^
    50 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    48 │ const f = x + ((f) => (f |> f));
  > 49 │ const f = x |> (f) => f |> f;
       │                    ^^
    50 │ 
  
  i ...Which is required to end this statement
  
    48 │ const f = x + ((f) => (f |> f));
  > 49 │ const f = x |> (f) => f |> f;
       │ ^^^^^^^^^^^^^^^^^^^
    50 │ 
  

```


