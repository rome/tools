---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info:
  test_file: js/pipeline-operator/minimal_pipeline_operator.js
---

# Input

```js
a |> b |> c;

a |> (b |> c);

(a |> b) || c;
a |> (b || c);

let result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

let newScore = person.score
  |> double
  |> (_ => add(7, _))
  |> (_ => subtract(2, _))
  |> (_ => boundScore(0, 100, _));

function createPerson (attrs) {
  attrs
    |> bounded('age', 1, 100)
    |> format('name', /^[a-z]$/i)
    |> Person.insertIntoDatabase;
}

foo |> (bar ?? baz);
(foo |> bar) ?? baz;

const result = [1,2,3]
 |> map(a => a * 2)
 |> filter(a => a > 5)
 |> reduce((sum, a) => a+sum, 0)
 |> increment
 |> add(3)

const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  |> map(event => event.target.value)
  |> filter(searchText => searchText.length > 2)
  |> debounce(300)
  |> distinctUntilChanged()
  |> switchMap(searchText => queryApi(searchText) |> retry(3))
  |> share();

const result = [5,10]
  |> (_ => _.map(x => x * 2))
  |> (_ => _.reduce( (a,b) => a + b ))
  |> (sum => sum + 1)

const result2 = [4, 9].map( x => x |> inc |> double )

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -3,48 +3,47 @@
 a |> (b |> c);
 
 (a |> b) || c;
-a |> b || c;
+a |> (b || c);
 
-let result = "hello" |> doubleSay |> capitalize |> exclaim;
+let result = "hello"
+  |> doubleSay
+  |> capitalize
+  |> exclaim;
 
-let newScore =
-  person.score
+let newScore = person.score
   |> double
-  |> ((_) => add(7, _))
-  |> ((_) => subtract(2, _))
-  |> ((_) => boundScore(0, 100, _));
+  |> (_ => add(7, _))
+  |> (_ => subtract(2, _))
+  |> (_ => boundScore(0, 100, _));
 
 function createPerson(attrs) {
   attrs
-    |> bounded("age", 1, 100)
-    |> format("name", /^[a-z]$/i)
+    |> bounded('age', 1, 100)
+    |> format('name', /^[a-z]$/i)
     |> Person.insertIntoDatabase;
 }
 
-foo |> bar ?? baz;
+foo |> (bar ?? baz);
 (foo |> bar) ?? baz;
 
-const result =
-  [1, 2, 3]
-  |> map((a) => a * 2)
-  |> filter((a) => a > 5)
-  |> reduce((sum, a) => a + sum, 0)
-  |> increment
-  |> add(3);
+const result = [1,2,3]
+ |> map(a => a * 2)
+ |> filter(a => a > 5)
+ |> reduce((sum, a) => a+sum, 0)
+ |> increment
+ |> add(3)
 
-const searchResults$ =
-  fromEvent(document.querySelector("input"), "input")
-  |> map((event) => event.target.value)
-  |> filter((searchText) => searchText.length > 2)
+const searchResults$ = fromEvent(document.querySelector('input'), 'input')
+  |> map(event => event.target.value)
+  |> filter(searchText => searchText.length > 2)
   |> debounce(300)
   |> distinctUntilChanged()
-  |> switchMap((searchText) => queryApi(searchText) |> retry(3))
+  |> switchMap(searchText => queryApi(searchText) |> retry(3))
   |> share();
 
-const result =
-  [5, 10]
-  |> ((_) => _.map((x) => x * 2))
-  |> ((_) => _.reduce((a, b) => a + b))
-  |> ((sum) => sum + 1);
+const result = [5,10]
+  |> (_ => _.map(x => x * 2))
+  |> (_ => _.reduce( (a,b) => a + b ))
+  |> (sum => sum + 1)
 
-const result2 = [4, 9].map((x) => x |> inc |> double);
+const result2 = [4, 9].map( x => x |> inc |> double )
```

# Output

```js
a |> b |> c;

a |> (b |> c);

(a |> b) || c;
a |> (b || c);

let result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

let newScore = person.score
  |> double
  |> (_ => add(7, _))
  |> (_ => subtract(2, _))
  |> (_ => boundScore(0, 100, _));

function createPerson(attrs) {
  attrs
    |> bounded('age', 1, 100)
    |> format('name', /^[a-z]$/i)
    |> Person.insertIntoDatabase;
}

foo |> (bar ?? baz);
(foo |> bar) ?? baz;

const result = [1,2,3]
 |> map(a => a * 2)
 |> filter(a => a > 5)
 |> reduce((sum, a) => a+sum, 0)
 |> increment
 |> add(3)

const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  |> map(event => event.target.value)
  |> filter(searchText => searchText.length > 2)
  |> debounce(300)
  |> distinctUntilChanged()
  |> switchMap(searchText => queryApi(searchText) |> retry(3))
  |> share();

const result = [5,10]
  |> (_ => _.map(x => x * 2))
  |> (_ => _.reduce( (a,b) => a + b ))
  |> (sum => sum + 1)

const result2 = [4, 9].map( x => x |> inc |> double )
```

# Errors
```
minimal_pipeline_operator.js:1:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
  > 1 │ a |> b |> c;
      │    ^
    2 │ 
    3 │ a |> (b |> c);
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:1:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
  > 1 │ a |> b |> c;
      │         ^
    2 │ 
    3 │ a |> (b |> c);
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:3:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    1 │ a |> b |> c;
    2 │ 
  > 3 │ a |> (b |> c);
      │    ^
    4 │ 
    5 │ (a |> b) || c;
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:3:10 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    1 │ a |> b |> c;
    2 │ 
  > 3 │ a |> (b |> c);
      │          ^
    4 │ 
    5 │ (a |> b) || c;
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:5:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    3 │ a |> (b |> c);
    4 │ 
  > 5 │ (a |> b) || c;
      │     ^
    6 │ a |> (b || c);
    7 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:6:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    5 │ (a |> b) || c;
  > 6 │ a |> (b || c);
      │    ^
    7 │ 
    8 │ let result = "hello"
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:9:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     8 │ let result = "hello"
   > 9 │   |> doubleSay
       │    ^
    10 │   |> capitalize
    11 │   |> exclaim;
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:10:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     8 │ let result = "hello"
     9 │   |> doubleSay
  > 10 │   |> capitalize
       │    ^
    11 │   |> exclaim;
    12 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:11:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
     9 │   |> doubleSay
    10 │   |> capitalize
  > 11 │   |> exclaim;
       │    ^
    12 │ 
    13 │ let newScore = person.score
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:14:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    13 │ let newScore = person.score
  > 14 │   |> double
       │    ^
    15 │   |> (_ => add(7, _))
    16 │   |> (_ => subtract(2, _))
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:15:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    13 │ let newScore = person.score
    14 │   |> double
  > 15 │   |> (_ => add(7, _))
       │    ^
    16 │   |> (_ => subtract(2, _))
    17 │   |> (_ => boundScore(0, 100, _));
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:16:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    14 │   |> double
    15 │   |> (_ => add(7, _))
  > 16 │   |> (_ => subtract(2, _))
       │    ^
    17 │   |> (_ => boundScore(0, 100, _));
    18 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:17:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    15 │   |> (_ => add(7, _))
    16 │   |> (_ => subtract(2, _))
  > 17 │   |> (_ => boundScore(0, 100, _));
       │    ^
    18 │ 
    19 │ function createPerson (attrs) {
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:21:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    19 │ function createPerson (attrs) {
    20 │   attrs
  > 21 │     |> bounded('age', 1, 100)
       │      ^
    22 │     |> format('name', /^[a-z]$/i)
    23 │     |> Person.insertIntoDatabase;
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:22:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    20 │   attrs
    21 │     |> bounded('age', 1, 100)
  > 22 │     |> format('name', /^[a-z]$/i)
       │      ^
    23 │     |> Person.insertIntoDatabase;
    24 │ }
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:23:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    21 │     |> bounded('age', 1, 100)
    22 │     |> format('name', /^[a-z]$/i)
  > 23 │     |> Person.insertIntoDatabase;
       │      ^
    24 │ }
    25 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:26:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    24 │ }
    25 │ 
  > 26 │ foo |> (bar ?? baz);
       │      ^
    27 │ (foo |> bar) ?? baz;
    28 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:27:7 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    26 │ foo |> (bar ?? baz);
  > 27 │ (foo |> bar) ?? baz;
       │       ^
    28 │ 
    29 │ const result = [1,2,3]
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:30:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    29 │ const result = [1,2,3]
  > 30 │  |> map(a => a * 2)
       │   ^
    31 │  |> filter(a => a > 5)
    32 │  |> reduce((sum, a) => a+sum, 0)
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:31:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    29 │ const result = [1,2,3]
    30 │  |> map(a => a * 2)
  > 31 │  |> filter(a => a > 5)
       │   ^
    32 │  |> reduce((sum, a) => a+sum, 0)
    33 │  |> increment
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:32:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    30 │  |> map(a => a * 2)
    31 │  |> filter(a => a > 5)
  > 32 │  |> reduce((sum, a) => a+sum, 0)
       │   ^
    33 │  |> increment
    34 │  |> add(3)
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:33:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    31 │  |> filter(a => a > 5)
    32 │  |> reduce((sum, a) => a+sum, 0)
  > 33 │  |> increment
       │   ^
    34 │  |> add(3)
    35 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:34:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    32 │  |> reduce((sum, a) => a+sum, 0)
    33 │  |> increment
  > 34 │  |> add(3)
       │   ^
    35 │ 
    36 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:37:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    36 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
  > 37 │   |> map(event => event.target.value)
       │    ^
    38 │   |> filter(searchText => searchText.length > 2)
    39 │   |> debounce(300)
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:38:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    36 │ const searchResults$ = fromEvent(document.querySelector('input'), 'input')
    37 │   |> map(event => event.target.value)
  > 38 │   |> filter(searchText => searchText.length > 2)
       │    ^
    39 │   |> debounce(300)
    40 │   |> distinctUntilChanged()
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:39:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    37 │   |> map(event => event.target.value)
    38 │   |> filter(searchText => searchText.length > 2)
  > 39 │   |> debounce(300)
       │    ^
    40 │   |> distinctUntilChanged()
    41 │   |> switchMap(searchText => queryApi(searchText) |> retry(3))
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:40:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    38 │   |> filter(searchText => searchText.length > 2)
    39 │   |> debounce(300)
  > 40 │   |> distinctUntilChanged()
       │    ^
    41 │   |> switchMap(searchText => queryApi(searchText) |> retry(3))
    42 │   |> share();
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:41:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    39 │   |> debounce(300)
    40 │   |> distinctUntilChanged()
  > 41 │   |> switchMap(searchText => queryApi(searchText) |> retry(3))
       │    ^
    42 │   |> share();
    43 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:41:52 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    39 │   |> debounce(300)
    40 │   |> distinctUntilChanged()
  > 41 │   |> switchMap(searchText => queryApi(searchText) |> retry(3))
       │                                                    ^
    42 │   |> share();
    43 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:42:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    40 │   |> distinctUntilChanged()
    41 │   |> switchMap(searchText => queryApi(searchText) |> retry(3))
  > 42 │   |> share();
       │    ^
    43 │ 
    44 │ const result = [5,10]
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:45:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    44 │ const result = [5,10]
  > 45 │   |> (_ => _.map(x => x * 2))
       │    ^
    46 │   |> (_ => _.reduce( (a,b) => a + b ))
    47 │   |> (sum => sum + 1)
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:46:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    44 │ const result = [5,10]
    45 │   |> (_ => _.map(x => x * 2))
  > 46 │   |> (_ => _.reduce( (a,b) => a + b ))
       │    ^
    47 │   |> (sum => sum + 1)
    48 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:47:4 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    45 │   |> (_ => _.map(x => x * 2))
    46 │   |> (_ => _.reduce( (a,b) => a + b ))
  > 47 │   |> (sum => sum + 1)
       │    ^
    48 │ 
    49 │ const result2 = [4, 9].map( x => x |> inc |> double )
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:49:37 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    47 │   |> (sum => sum + 1)
    48 │ 
  > 49 │ const result2 = [4, 9].map( x => x |> inc |> double )
       │                                     ^
    50 │ 
  
  i This operator requires a left hand side value
  
minimal_pipeline_operator.js:49:44 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected an expression for the left hand side of the `>` operator.
  
    47 │   |> (sum => sum + 1)
    48 │ 
  > 49 │ const result2 = [4, 9].map( x => x |> inc |> double )
       │                                            ^
    50 │ 
  
  i This operator requires a left hand side value
  

```


