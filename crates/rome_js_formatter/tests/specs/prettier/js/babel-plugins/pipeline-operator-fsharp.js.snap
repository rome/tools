---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/valtech-nyc/proposal-fsharp-pipelines

promise
  |> await
  |> x => doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log;

const result = exclaim(capitalize(doubleSay("hello")));
result //=> "Hello, hello!"

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

result //=> "Hello, hello!"

const person = { score: 25 };

const newScore = person.score
  |> double
  |> n => add(7, n)
  |> n => boundScore(0, 100, n);

newScore //=> 57

// As opposed to:
let newScore = boundScore(0, 100, add(7, double(person.score)));
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -3,25 +3,32 @@
 
 promise
   |> await
-  |> (x) => doubleSay(x, ", ")
+  |> x
+=> doubleSay(x, ', ')
   |> capitalize
-  |> (x) => x + "!"
-  |> (x) => new User.Message(x)
-  |> (x) => stream.write(x)
+  |> x => x + '!'
+  |> x => new User.Message(x)
+  |> x => stream.write(x)
   |> await
-  |> console.log;
+  |> console.log
 
 const result = exclaim(capitalize(doubleSay("hello")));
 result; //=> "Hello, hello!"
 
-const result = "hello" |> doubleSay |> capitalize |> exclaim;
+const result = "hello"
+  |> doubleSay
+  |> capitalize
+  |> exclaim;
 
 result; //=> "Hello, hello!"
 
 const person = { score: 25 };
 
-const newScore =
-  person.score |> double |> (n) => add(7, n) |> (n) => boundScore(0, 100, n);
+const newScore = person.score
+  |> double
+  |> n
+=> add(7, n)
+  |> n => boundScore(0, 100, n)
 
 newScore; //=> 57
 
```

# Output

```js
// https://babeljs.io/docs/en/babel-plugin-proposal-pipeline-operator
// https://github.com/valtech-nyc/proposal-fsharp-pipelines

promise
  |> await
  |> x
=> doubleSay(x, ', ')
  |> capitalize
  |> x => x + '!'
  |> x => new User.Message(x)
  |> x => stream.write(x)
  |> await
  |> console.log

const result = exclaim(capitalize(doubleSay("hello")));
result; //=> "Hello, hello!"

const result = "hello"
  |> doubleSay
  |> capitalize
  |> exclaim;

result; //=> "Hello, hello!"

const person = { score: 25 };

const newScore = person.score
  |> double
  |> n
=> add(7, n)
  |> n => boundScore(0, 100, n)

newScore; //=> 57

// As opposed to:
let newScore = boundScore(0, 100, add(7, double(person.score)));
```


# Errors
```
error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
  ┌─ pipeline-operator-fsharp.js:5:4
  │
5 │   |> await
  │    ^ This operator requires a left hand side value

error[SyntaxError]: expected an unary expression but instead found '|'
  ┌─ pipeline-operator-fsharp.js:6:3
  │
6 │   |> x => doubleSay(x, ', ')
  │   ^ Expected an unary expression here

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
  ┌─ pipeline-operator-fsharp.js:6:4
  │
6 │   |> x => doubleSay(x, ', ')
  │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ pipeline-operator-fsharp.js:6:8
  │  
4 │ ┌ promise
5 │ │   |> await
6 │ │   |> x => doubleSay(x, ', ')
  │ │        ^^ An explicit or implicit semicolon is expected here...
  │ └─────────' ...Which is required to end this statement

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ pipeline-operator-fsharp.js:18:4
   │
18 │   |> doubleSay
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ pipeline-operator-fsharp.js:19:4
   │
19 │   |> capitalize
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ pipeline-operator-fsharp.js:20:4
   │
20 │   |> exclaim;
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ pipeline-operator-fsharp.js:27:4
   │
27 │   |> double
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected an expression for the left hand side of the `>` operator.
   ┌─ pipeline-operator-fsharp.js:28:4
   │
28 │   |> n => add(7, n)
   │    ^ This operator requires a left hand side value

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ pipeline-operator-fsharp.js:28:8
   │  
26 │ ┌ const newScore = person.score
27 │ │   |> double
28 │ │   |> n => add(7, n)
   │ │        ^^ An explicit or implicit semicolon is expected here...
   │ └───────' ...Which is required to end this statement


```


