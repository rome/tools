---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
h(f(g(() => {
  a
})))

deepCopyAndAsyncMapLeavesA(
  { source: sourceValue, destination: destination[sourceKey] },
  { valueMapper, overwriteExistingKeys }
)

deepCopyAndAsyncMapLeavesB(
  1337,
  { source: sourceValue, destination: destination[sourceKey] },
  { valueMapper, overwriteExistingKeys }
)

// rome-ignore format: shut down regression
deepCopyAndAsyncMapLeavesC(
  { source: sourceValue, destination: destination[sourceKey] },
  1337,
  { valueMapper, overwriteExistingKeys }
)

function someFunction(url) {
  return get(url)
    .then(
      json => dispatch(success(json)),
      error => dispatch(failed(error))
    );
}

const mapChargeItems = fp.flow(
  l => l < 10 ? l: 1,
  l => Immutable.Range(l).toMap()
);

expect(new LongLongLongLongLongRange([0, 0], [0, 0])).toEqualAtomLongLongLongLongRange(new LongLongLongRange([0, 0], [0, 0]));

["red", "white", "blue", "black", "hotpink", "rebeccapurple"].reduce(
  (allColors, color) => {
    return allColors.concat(color);
  },
  []
);

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -17,11 +17,12 @@
   { valueMapper, overwriteExistingKeys },
 );
 
+// rome-ignore format: shut down regression
 deepCopyAndAsyncMapLeavesC(
   { source: sourceValue, destination: destination[sourceKey] },
   1337,
-  { valueMapper, overwriteExistingKeys },
-);
+  { valueMapper, overwriteExistingKeys }
+)
 
 function someFunction(url) {
   return get(url).then(
@@ -31,7 +32,7 @@
 }
 
 const mapChargeItems = fp.flow(
-  (l) => (l < 10 ? l : 1),
+  (l) => l < 10 ? l : 1,
   (l) => Immutable.Range(l).toMap(),
 );
 
@@ -39,9 +40,9 @@
   new LongLongLongLongLongRange([0, 0], [0, 0]),
 ).toEqualAtomLongLongLongLongRange(new LongLongLongRange([0, 0], [0, 0]));
 
-["red", "white", "blue", "black", "hotpink", "rebeccapurple"].reduce(
-  (allColors, color) => {
-    return allColors.concat(color);
-  },
-  [],
-);
+["red", "white", "blue", "black", "hotpink", "rebeccapurple"].reduce((
+  allColors,
+  color,
+) => {
+  return allColors.concat(color);
+}, []);
```

# Output

```js
h(
  f(
    g(() => {
      a;
    }),
  ),
);

deepCopyAndAsyncMapLeavesA(
  { source: sourceValue, destination: destination[sourceKey] },
  { valueMapper, overwriteExistingKeys },
);

deepCopyAndAsyncMapLeavesB(
  1337,
  { source: sourceValue, destination: destination[sourceKey] },
  { valueMapper, overwriteExistingKeys },
);

// rome-ignore format: shut down regression
deepCopyAndAsyncMapLeavesC(
  { source: sourceValue, destination: destination[sourceKey] },
  1337,
  { valueMapper, overwriteExistingKeys }
)

function someFunction(url) {
  return get(url).then(
    (json) => dispatch(success(json)),
    (error) => dispatch(failed(error)),
  );
}

const mapChargeItems = fp.flow(
  (l) => l < 10 ? l : 1,
  (l) => Immutable.Range(l).toMap(),
);

expect(
  new LongLongLongLongLongRange([0, 0], [0, 0]),
).toEqualAtomLongLongLongLongRange(new LongLongLongRange([0, 0], [0, 0]));

["red", "white", "blue", "black", "hotpink", "rebeccapurple"].reduce((
  allColors,
  color,
) => {
  return allColors.concat(color);
}, []);
```



