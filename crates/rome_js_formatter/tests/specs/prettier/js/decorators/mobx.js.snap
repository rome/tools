---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: "js\\decorators\\mobx.js"
---

# Input

```js
import {observable} from "mobx";

@observer class OrderLine {
  @observable price:number = 0;
  @observable amount:number = 1;

  constructor(price) {
    this.price = price;
  }

  @computed get total() {
    return this.price * this.amount;
  }

  @action.bound setPrice(price) {
    this.price = price;
  }

  @computed
  get total() {
    return this.price * this.amount;
  }

  @action.bound
  setPrice(price) {
    this.price = price;
  }
  
  @computed @computed @computed @computed @computed @computed @computed get total() {
    return this.price * this.amount;
  }

  @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;
  
  @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
}
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,9 +1,8 @@
 import { observable } from "mobx";
 
-@observer
-class OrderLine {
-  @observable price: number = 0;
-  @observable amount: number = 1;
+@observer class OrderLine {
+  @observable price:number = 0;
+  @observable amount:number = 1;
 
   constructor(price) {
     this.price = price;
@@ -27,20 +26,11 @@
     this.price = price;
   }
 
-  @computed
-  @computed
-  @computed
-  @computed
-  @computed
-  @computed
-  @computed
-  get total() {
+  @computed @computed @computed @computed @computed @computed @computed get total() {
     return this.price * this.amount;
   }
 
-  @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) =>
-    this.count--;
+  @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;
 
-  @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) =>
-    doSomething();
+  @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
 }
```

# Output

```js
import { observable } from "mobx";

@observer class OrderLine {
  @observable price:number = 0;
  @observable amount:number = 1;

  constructor(price) {
    this.price = price;
  }

  @computed get total() {
    return this.price * this.amount;
  }

  @action.bound setPrice(price) {
    this.price = price;
  }

  @computed
  get total() {
    return this.price * this.amount;
  }

  @action.bound
  setPrice(price) {
    this.price = price;
  }

  @computed @computed @computed @computed @computed @computed @computed get total() {
    return this.price * this.amount;
  }

  @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;

  @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
}
```


# Errors
```
mobx.js:4:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × return types can only be used in TypeScript files
  
  × remove this type annotation
  
    3 │ @observer class OrderLine {
  > 4 │   @observable price:number = 0;
      │                    ^^^^^^^
    5 │   @observable amount:number = 1;
    6 │ 
  
mobx.js:5:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × return types can only be used in TypeScript files
  
  × remove this type annotation
  
    3 │ @observer class OrderLine {
    4 │   @observable price:number = 0;
  > 5 │   @observable amount:number = 1;
      │                     ^^^^^^^
    6 │ 
    7 │   constructor(price) {
  
mobx.js:33:34 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Type annotations are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax.
  
  × TypeScript only syntax
  
    31 │   }
    32 │ 
  > 33 │   @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;
       │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    34 │   
    35 │   @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
  
mobx.js:35:35 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Type annotations are a TypeScript only feature. Convert your file to a TypeScript file or remove the syntax.
  
  × TypeScript only syntax
  
    33 │   @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;
    34 │   
  > 35 │   @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
       │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    36 │ }
    37 │ 
  

```

# Lines exceeding max width of 80 characters
```
   29:   @computed @computed @computed @computed @computed @computed @computed get total() {
   33:   @action handleDecrease = (event: React.ChangeEvent<HTMLInputElement>) => this.count--;
   35:   @action handleSomething = (event: React.ChangeEvent<HTMLInputElement>) => doSomething();
```

