---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
for(;;) continue
// comment
;

for (;;) break
// comment
;

for (const f of []) continue
// comment
;

for (const f of []) break
// comment
;

for (const f in {}) continue
// comment
;

for (const f in {}) break
// comment
;

for(;;) continue // comment
;

for (;;) break // comment
;

for (const f of []) continue // comment
;

for (const f of []) break // comment
;

for (const f in {}) continue // comment
;

for (const f in {}) break // comment
;

for(;;) continue /* comment */
;

for (;;) break /* comment */
;

for (const f of []) continue /* comment */
;

for (const f of []) break /* comment */
;

for (const f in {}) continue /* comment */
;

for (const f in {}) break /* comment */
;

for(;;) continue
/* comment */
;

for (;;) break
/* comment */
;

for (const f of []) continue
/* comment */
;

for (const f of []) break
/* comment */
;

for (const f in {}) continue
/* comment */
;

for (const f in {}) break
/* comment */
;

label1: for (;;) continue label1 /* comment */
;

label1: for (;;) continue label1
/* comment */
;

label1: for (;;) continue label1 // comment
;

label1: for (;;) continue label1
// comment
;
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,69 +1,104 @@
-for (;;) continue;
-// comment
+for (;;)
+  continue
+  // comment
+  ;
 
-for (;;) break;
-// comment
+for (;;)
+  break
+  // comment
+  ;
 
-for (const f of []) continue;
-// comment
+for (const f of [])
+  continue
+  // comment
+  ;
 
-for (const f of []) break;
-// comment
+for (const f of [])
+  break
+  // comment
+  ;
 
-for (const f in {}) continue;
-// comment
+for (const f in {})
+  continue
+  // comment
+  ;
 
-for (const f in {}) break;
-// comment
+for (const f in {})
+  break
+  // comment
+  ;
 
-for (;;) continue; // comment
+for (;;)
+  continue; // comment
 
-for (;;) break; // comment
+for (;;)
+  break; // comment
 
-for (const f of []) continue; // comment
+for (const f of [])
+  continue; // comment
 
-for (const f of []) break; // comment
+for (const f of [])
+  break; // comment
 
-for (const f in {}) continue; // comment
+for (const f in {})
+  continue; // comment
 
-for (const f in {}) break; // comment
+for (const f in {})
+  break; // comment
 
-for (;;) continue; /* comment */
+for (;;) continue /* comment */;
 
-for (;;) break; /* comment */
+for (;;) break /* comment */;
 
-for (const f of []) continue; /* comment */
+for (const f of []) continue /* comment */;
 
-for (const f of []) break; /* comment */
+for (const f of []) break /* comment */;
 
-for (const f in {}) continue; /* comment */
+for (const f in {}) continue /* comment */;
 
-for (const f in {}) break; /* comment */
+for (const f in {}) break /* comment */;
 
-for (;;) continue;
-/* comment */
+for (;;)
+  continue
+  /* comment */
+  ;
 
-for (;;) break;
-/* comment */
+for (;;)
+  break
+  /* comment */
+  ;
 
-for (const f of []) continue;
-/* comment */
+for (const f of [])
+  continue
+  /* comment */
+  ;
 
-for (const f of []) break;
-/* comment */
+for (const f of [])
+  break
+  /* comment */
+  ;
 
-for (const f in {}) continue;
-/* comment */
+for (const f in {})
+  continue
+  /* comment */
+  ;
 
-for (const f in {}) break;
-/* comment */
+for (const f in {})
+  break
+  /* comment */
+  ;
 
 label1: for (;;) continue label1 /* comment */;
 
-label1: for (;;) continue label1;
-/* comment */
+label1: for (;;)
+  continue label1
+  /* comment */
+  ;
 
-label1: for (;;) continue label1; // comment
+label1: for (;;)
+  continue label1; // comment
 
-label1: for (;;) continue label1;
-// comment
+label1: for (;;)
+  continue label1
+  // comment
+  ;
```

# Output

```js
for (;;)
  continue
  // comment
  ;

for (;;)
  break
  // comment
  ;

for (const f of [])
  continue
  // comment
  ;

for (const f of [])
  break
  // comment
  ;

for (const f in {})
  continue
  // comment
  ;

for (const f in {})
  break
  // comment
  ;

for (;;)
  continue; // comment

for (;;)
  break; // comment

for (const f of [])
  continue; // comment

for (const f of [])
  break; // comment

for (const f in {})
  continue; // comment

for (const f in {})
  break; // comment

for (;;) continue /* comment */;

for (;;) break /* comment */;

for (const f of []) continue /* comment */;

for (const f of []) break /* comment */;

for (const f in {}) continue /* comment */;

for (const f in {}) break /* comment */;

for (;;)
  continue
  /* comment */
  ;

for (;;)
  break
  /* comment */
  ;

for (const f of [])
  continue
  /* comment */
  ;

for (const f of [])
  break
  /* comment */
  ;

for (const f in {})
  continue
  /* comment */
  ;

for (const f in {})
  break
  /* comment */
  ;

label1: for (;;) continue label1 /* comment */;

label1: for (;;)
  continue label1
  /* comment */
  ;

label1: for (;;)
  continue label1; // comment

label1: for (;;)
  continue label1
  // comment
  ;
```



