---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: "js\\module-blocks\\worker.js"
---

# Input

```js
let worker = new Worker(module {
  onmessage = function({data}) {
    let mod = import(data);
    postMessage(mod.fn());
  }
}, {type: "module"});

let worker = new Worker(module {
  onmessage = function({data}) {
    let mod = import(data);
    postMessage(mod.fn());
  }
}, {type: "module", foo: "bar" });

worker.postMessage(module { export function fn() { return "hello!" } });
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,22 +1,15 @@
 let worker = new Worker(module {
-  onmessage = function ({ data }) {
+  onmessage = function({data}) {
     let mod = import(data);
     postMessage(mod.fn());
-  };
-}, { type: "module" });
-
-let worker = new Worker(
-  module {
-    onmessage = function ({ data }) {
-      let mod = import(data);
-      postMessage(mod.fn());
-    };
-  },
-  { type: "module", foo: "bar" },
-);
+  }
+}, {type: "module"});
 
-worker.postMessage(module {
-  export function fn() {
-    return "hello!";
+let worker = new Worker(module {
+  onmessage = function({data}) {
+    let mod = import(data);
+    postMessage(mod.fn());
   }
-});
+}, {type: "module", foo: "bar" });
+
+worker.postMessage(module { export function fn() { return "hello!" } });
```

# Output

```js
let worker = new Worker(module {
  onmessage = function({data}) {
    let mod = import(data);
    postMessage(mod.fn());
  }
}, {type: "module"});

let worker = new Worker(module {
  onmessage = function({data}) {
    let mod = import(data);
    postMessage(mod.fn());
  }
}, {type: "module", foo: "bar" });

worker.postMessage(module { export function fn() { return "hello!" } });
```


# Errors
```
worker.js:1:32 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `{`
  
  × unexpected
  
    ┌─ worker.js:1:32
    │
  1 │ let worker = new Worker(module {
    │                                ^
  
worker.js:2:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Did you mean to use a `:`? An `=` can only follow a property name when the containing object literal is part of a destructuring pattern.
  
    ┌─ worker.js:2:13
    │
  2 │   onmessage = function({data}) {
    │             ^
  
worker.js:8:32 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `{`
  
  × unexpected
  
    ┌─ worker.js:8:32
    │
  8 │ let worker = new Worker(module {
    │                                ^
  
worker.js:9:13 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Did you mean to use a `:`? An `=` can only follow a property name when the containing object literal is part of a destructuring pattern.
  
    ┌─ worker.js:9:13
    │
  9 │   onmessage = function({data}) {
    │             ^
  
worker.js:15:27 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `{`
  
  × unexpected
  
     ┌─ worker.js:15:27
     │
  15 │ worker.postMessage(module { export function fn() { return "hello!" } });
     │                           ^
  
worker.js:15:36 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `:` but instead found `function`
  
  × unexpected
  
     ┌─ worker.js:15:36
     │
  15 │ worker.postMessage(module { export function fn() { return "hello!" } });
     │                                    ^^^^^^^^
  

```


