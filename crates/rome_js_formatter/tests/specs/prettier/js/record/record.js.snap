---
source: crates/rome_formatter_test/src/snapshot_builder.rs
assertion_line: 212
info: js/record/record.js
---

# Input

```js
const record1 = #{
    a: 1,
    b: 2,
    c: 3,
};

const record2 = #{...record1, b: 5};

assert(record1.a === 1);
assert(record1["a"] === 1);
assert(record1 !== record2);
assert(record2 === #{ a: 1, c: 3, b: 5 });
assert(record1?.a === 1);
assert(record1?.d === undefined);
assert(record1?.d ?? 5 === 5);
assert(record1.d?.a === undefined);

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,10 +1,14 @@
-const record1 = #{
-  a: 1,
-  b: 2,
-  c: 3,
-};
+const record1 = #;
+{
+  a: 1, b;
+  : 2,
+    c: 3,
+}
 
-const record2 = #{ ...record1, b: 5 };
+const record2 = #;
+{
+  ...record1, b: 5
+}
 
 assert(record1.a === 1);
 assert(record1["a"] === 1);
```

# Output

```js
const record1 = #;
{
  a: 1, b;
  : 2,
    c: 3,
}

const record2 = #;
{
  ...record1, b: 5
}

assert(record1.a === 1);
assert(record1["a"] === 1);
assert(record1 !== record2);
assert(record2 === #{ a: 1, c: 3, b: 5 });
assert(record1?.a === 1);
assert(record1?.d === undefined);
assert(record1?.d ?? 5 === 5);
assert(record1.d?.a === undefined);
```

# Errors
```
record.js:1:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an identifier but instead found '{'
  
  > 1 │ const record1 = #{
      │                  ^
    2 │     a: 1,
    3 │     b: 2,
  
  i Expected an identifier here
  
  > 1 │ const record1 = #{
      │                  ^
    2 │     a: 1,
    3 │     b: 2,
  
record.js:1:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Private names are only allowed on the left side of a 'in' expression
  
  > 1 │ const record1 = #{
      │                 ^
    2 │     a: 1,
    3 │     b: 2,
  
record.js:1:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
  > 1 │ const record1 = #{
      │                  ^
    2 │     a: 1,
    3 │     b: 2,
  
  i An explicit or implicit semicolon is expected here...
  
  > 1 │ const record1 = #{
      │                  ^
    2 │     a: 1,
    3 │     b: 2,
  
  i ...Which is required to end this statement
  
  > 1 │ const record1 = #{
      │ ^^^^^^^^^^^^^^^^^
    2 │     a: 1,
    3 │     b: 2,
  
record.js:3:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    1 │ const record1 = #{
    2 │     a: 1,
  > 3 │     b: 2,
      │      ^
    4 │     c: 3,
    5 │ };
  
  i An explicit or implicit semicolon is expected here...
  
    1 │ const record1 = #{
    2 │     a: 1,
  > 3 │     b: 2,
      │      ^
    4 │     c: 3,
    5 │ };
  
  i ...Which is required to end this statement
  
    1 │ const record1 = #{
  > 2 │     a: 1,
      │        ^^
  > 3 │     b: 2,
      │     ^^
    4 │     c: 3,
    5 │ };
  
record.js:7:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an identifier but instead found '{'
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                  ^
    8 │ 
    9 │ assert(record1.a === 1);
  
  i Expected an identifier here
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                  ^
    8 │ 
    9 │ assert(record1.a === 1);
  
record.js:7:17 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Private names are only allowed on the left side of a 'in' expression
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                 ^
    8 │ 
    9 │ assert(record1.a === 1);
  
record.js:7:18 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                  ^
    8 │ 
    9 │ assert(record1.a === 1);
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                  ^
    8 │ 
    9 │ assert(record1.a === 1);
  
  i ...Which is required to end this statement
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │ ^^^^^^^^^^^^^^^^^
    8 │ 
    9 │ assert(record1.a === 1);
  
record.js:7:19 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found '...record1, b: 5'
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                   ^^^^^^^^^^^^^^^^
    8 │ 
    9 │ assert(record1.a === 1);
  
  i Expected an expression here
  
    5 │ };
    6 │ 
  > 7 │ const record2 = #{...record1, b: 5};
      │                   ^^^^^^^^^^^^^^^^
    8 │ 
    9 │ assert(record1.a === 1);
  
record.js:12:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an identifier but instead found '{'
  
    10 │ assert(record1["a"] === 1);
    11 │ assert(record1 !== record2);
  > 12 │ assert(record2 === #{ a: 1, c: 3, b: 5 });
       │                     ^
    13 │ assert(record1?.a === 1);
    14 │ assert(record1?.d === undefined);
  
  i Expected an identifier here
  
    10 │ assert(record1["a"] === 1);
    11 │ assert(record1 !== record2);
  > 12 │ assert(record2 === #{ a: 1, c: 3, b: 5 });
       │                     ^
    13 │ assert(record1?.a === 1);
    14 │ assert(record1?.d === undefined);
  
record.js:12:20 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Private names are only allowed on the left side of a 'in' expression
  
    10 │ assert(record1["a"] === 1);
    11 │ assert(record1 !== record2);
  > 12 │ assert(record2 === #{ a: 1, c: 3, b: 5 });
       │                    ^
    13 │ assert(record1?.a === 1);
    14 │ assert(record1?.d === undefined);
  
record.js:12:21 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `{`
  
    10 │ assert(record1["a"] === 1);
    11 │ assert(record1 !== record2);
  > 12 │ assert(record2 === #{ a: 1, c: 3, b: 5 });
       │                     ^
    13 │ assert(record1?.a === 1);
    14 │ assert(record1?.d === undefined);
  
  i Remove {
  

```


