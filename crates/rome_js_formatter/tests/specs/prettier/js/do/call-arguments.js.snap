---
source: crates/rome_js_formatter/tests/prettier_tests.rs
info:
  test_file: "js\\do\\call-arguments.js"
---

# Input

```js
// from https://github.com/babel/babel/pull/13122/
expect(
  do {
    var bar = "foo";
    if (!bar) throw new Error(
      "unreachable"
    )
    bar;
  }
).toBe("foo");
expect(bar).toBe("foo");

var x = do {
  var bar = "foo";
  if (!bar) throw new Error(
    "unreachable"
  )
  bar;
};

expect(
  do {
    var bar = "foo";
    bar;
  }
).toBe("foo");
expect(bar).toBe("foo");

var x = do {
  var bar = "foo";
  bar;
};

expect(
  () => do {
    () => {
      var bar = "foo";
    };
    bar;
  }
).toThrow(ReferenceError);
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,24 +1,36 @@
 // from https://github.com/babel/babel/pull/13122/
-expect(do {
-  var bar = "foo";
-  if (!bar) throw new Error("unreachable");
-  bar;
-}).toBe("foo");
+expect(
+do {
+    var bar = "foo";
+    if (!bar) throw new Error(
+      "unreachable"
+    )
+    bar;
+  }
+)
+.toBe("foo")
 expect(bar).toBe("foo");
 
-var x = do {
+var x =
+do {
   var bar = "foo";
-  if (!bar) throw new Error("unreachable");
+  if (!bar) throw new Error(
+    "unreachable"
+  )
   bar;
 };
 
-expect(do {
-  var bar = "foo";
-  bar;
-}).toBe("foo");
+expect(
+do {
+    var bar = "foo";
+    bar;
+  }
+)
+.toBe("foo")
 expect(bar).toBe("foo");
 
-var x = do {
+var x =
+do {
   var bar = "foo";
   bar;
 };
@@ -28,6 +40,6 @@
     () => {
       var bar = "foo";
     };
-    bar;
-  },
-).toThrow(ReferenceError);
+bar;
+}
+).toThrow(ReferenceError)
```

# Output

```js
// from https://github.com/babel/babel/pull/13122/
expect(
do {
    var bar = "foo";
    if (!bar) throw new Error(
      "unreachable"
    )
    bar;
  }
)
.toBe("foo")
expect(bar).toBe("foo");

var x =
do {
  var bar = "foo";
  if (!bar) throw new Error(
    "unreachable"
  )
  bar;
};

expect(
do {
    var bar = "foo";
    bar;
  }
)
.toBe("foo")
expect(bar).toBe("foo");

var x =
do {
  var bar = "foo";
  bar;
};

expect(
  () => do {
    () => {
      var bar = "foo";
    };
bar;
}
).toThrow(ReferenceError)
```


# Errors
```
call-arguments.js:3:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found 'do'
  
  × Expected an expression here
  
    ┌─ call-arguments.js:3:3
    │
  3 │   do {
    │   ^^
  
call-arguments.js:10:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `while` but instead found `)`
  
  × unexpected
  
     ┌─ call-arguments.js:10:1
     │
  10 │ ).toBe("foo");
     │ ^
  
call-arguments.js:10:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found '.toBe("foo")'
  
  × Expected a statement here
  
     ┌─ call-arguments.js:10:2
     │
  10 │ ).toBe("foo");
     │  ^^^^^^^^^^^^
  
call-arguments.js:13:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression, or an assignment but instead found 'do'
  
  × Expected an expression, or an assignment here
  
     ┌─ call-arguments.js:13:9
     │
  13 │ var x = do {
     │         ^^
  
call-arguments.js:19:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `while` but instead found `;`
  
  × unexpected
  
     ┌─ call-arguments.js:19:2
     │
  19 │ };
     │  ^
  
call-arguments.js:22:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression but instead found 'do'
  
  × Expected an expression here
  
     ┌─ call-arguments.js:22:3
     │
  22 │   do {
     │   ^^
  
call-arguments.js:26:1 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `while` but instead found `)`
  
  × unexpected
  
     ┌─ call-arguments.js:26:1
     │
  26 │ ).toBe("foo");
     │ ^
  
call-arguments.js:26:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found '.toBe("foo")'
  
  × Expected a statement here
  
     ┌─ call-arguments.js:26:2
     │
  26 │ ).toBe("foo");
     │  ^^^^^^^^^^^^
  
call-arguments.js:29:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected an expression, or an assignment but instead found 'do'
  
  × Expected an expression, or an assignment here
  
     ┌─ call-arguments.js:29:9
     │
  29 │ var x = do {
     │         ^^
  
call-arguments.js:32:2 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `while` but instead found `;`
  
  × unexpected
  
     ┌─ call-arguments.js:32:2
     │
  32 │ };
     │  ^
  
call-arguments.js:35:9 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a function body, or an expression but instead found 'do'
  
  × Expected a function body, or an expression here
  
     ┌─ call-arguments.js:35:9
     │
  35 │   () => do {
     │         ^^
  
call-arguments.js:36:5 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `(`
  
  × unexpected
  
     ┌─ call-arguments.js:36:5
     │
  36 │     () => {
     │     ^
  
call-arguments.js:38:6 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `,` but instead found `;`
  
  × unexpected
  
     ┌─ call-arguments.js:38:6
     │
  38 │     };
     │      ^
  
call-arguments.js:40:3 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected a statement but instead found '}
    ).toThrow(ReferenceError)'
  
  × Expected a statement here
  
     ┌─ call-arguments.js:40:3
     │  
  40 │ ┌   }
  41 │ │ ).toThrow(ReferenceError);
     │ └─────────────────────────^
  

```


