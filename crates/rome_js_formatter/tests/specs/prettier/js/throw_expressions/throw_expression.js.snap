---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
function save(filename = throw new TypeError("Argument required")) {}

lint(ast, {
  with: () => throw new Error("avoid using 'with' statements.")
});

function getEncoder(encoding) {
  const encoder = encoding === "utf8" ? new UTF8Encoder()
                : encoding === "utf16le" ? new UTF16Encoder(false)
                : encoding === "utf16be" ? new UTF16Encoder(true)
                : throw new Error("Unsupported encoding");
}

class Product {
  get id() { return this._id; }
  set id(value) { this._id = value || throw new Error("Invalid value"); }
}
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,18 +1,18 @@
-function save(filename = throw new TypeError("Argument required")) {}
+function save(filename = throw new TypeError("Argument required")
+)
+{
+}
 
 lint(ast, {
-  with: () => throw new Error("avoid using 'with' statements."),
+  with: () => throw new Error("avoid using 'with' statements.")
 });
 
 function getEncoder(encoding) {
-  const encoder =
-    encoding === "utf8"
-      ? new UTF8Encoder()
-      : encoding === "utf16le"
-      ? new UTF16Encoder(false)
-      : encoding === "utf16be"
-      ? new UTF16Encoder(true)
-      : throw new Error("Unsupported encoding");
+  const encoder = encoding === "utf8" ? new UTF8Encoder()
+                : encoding === "utf16le" ? new UTF16Encoder(false)
+                : encoding === "utf16be" ? new UTF16Encoder(true)
+                :
+  throw new Error("Unsupported encoding");
 }
 
 class Product {
@@ -20,6 +20,7 @@
     return this._id;
   }
   set id(value) {
-    this._id = value || throw new Error("Invalid value");
+    this._id = value ||
+    throw new Error("Invalid value");
   }
 }
```

# Output

```js
function save(filename = throw new TypeError("Argument required")
)
{
}

lint(ast, {
  with: () => throw new Error("avoid using 'with' statements.")
});

function getEncoder(encoding) {
  const encoder = encoding === "utf8" ? new UTF8Encoder()
                : encoding === "utf16le" ? new UTF16Encoder(false)
                : encoding === "utf16be" ? new UTF16Encoder(true)
                :
  throw new Error("Unsupported encoding");
}

class Product {
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value ||
    throw new Error("Invalid value");
  }
}
```


# Errors
```
error[SyntaxError]: expected an expression, or an assignment but instead found 'throw'
  ┌─ throw_expression.js:1:26
  │
1 │ function save(filename = throw new TypeError("Argument required")) {}
  │                          ^^^^^ Expected an expression, or an assignment here

error[SyntaxError]: expected `,` but instead found `TypeError`
  ┌─ throw_expression.js:1:36
  │
1 │ function save(filename = throw new TypeError("Argument required")) {}
  │                                    ^^^^^^^^^ unexpected

error[SyntaxError]: expected `,` but instead found `(`
  ┌─ throw_expression.js:1:45
  │
1 │ function save(filename = throw new TypeError("Argument required")) {}
  │                                             ^ unexpected

error[SyntaxError]: expected a function body but instead found ')'
  ┌─ throw_expression.js:1:66
  │
1 │ function save(filename = throw new TypeError("Argument required")) {}
  │                                                                  ^ Expected a function body here

error[SyntaxError]: expected a function body, or an expression but instead found 'throw'
  ┌─ throw_expression.js:4:15
  │
4 │   with: () => throw new Error("avoid using 'with' statements.")
  │               ^^^^^ Expected a function body, or an expression here

error[SyntaxError]: expected `:` but instead found `new`
  ┌─ throw_expression.js:4:21
  │
4 │   with: () => throw new Error("avoid using 'with' statements.")
  │                     ^^^ unexpected

error[SyntaxError]: expected an expression, or an assignment but instead found 'throw'
   ┌─ throw_expression.js:11:19
   │
11 │                 : throw new Error("Unsupported encoding");
   │                   ^^^^^ Expected an expression, or an assignment here

error[SyntaxError]: expected an expression but instead found 'throw'
   ┌─ throw_expression.js:16:39
   │
16 │   set id(value) { this._id = value || throw new Error("Invalid value"); }
   │                                       ^^^^^ Expected an expression here


```


