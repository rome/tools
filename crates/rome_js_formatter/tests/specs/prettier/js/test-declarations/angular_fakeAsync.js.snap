---
source: crates/rome_js_formatter/tests/prettier_tests.rs
---

# Input

```js
beforeEach(fakeAsync(() => {
  // code
}));

afterAll(fakeAsync(() => {
  console.log('Hello');
}));

it('should create the app', fakeAsync(() => {
  //code
}));

it("does something really long and complicated so I have to write a very long name for the test", fakeAsync(() => {
  // code
}));

it("does something really long and complicated so I have to write a very long name for the test", fakeAsync(() => new SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS));

/*
* isTestCall(parent) should only be called when parent exists
* and parent.type is CallExpression. This test makes sure that
* no errors are thrown when calling isTestCall(parent)
*/
function x() { fakeAsync(() => {}) }
```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -1,27 +1,42 @@
-beforeEach(fakeAsync(() => {
-  // code
-}));
+beforeEach(
+  fakeAsync(() => {
+    // code
+  }),
+);
 
-afterAll(fakeAsync(() => {
-  console.log("Hello");
-}));
+afterAll(
+  fakeAsync(() => {
+    console.log("Hello");
+  }),
+);
 
-it("should create the app", fakeAsync(() => {
-  //code
-}));
+it(
+  "should create the app",
+  fakeAsync(() => {
+    //code
+  }),
+);
 
-it("does something really long and complicated so I have to write a very long name for the test", fakeAsync(() => {
-  // code
-}));
+it(
+  "does something really long and complicated so I have to write a very long name for the test",
+  fakeAsync(() => {
+    // code
+  }),
+);
 
-it("does something really long and complicated so I have to write a very long name for the test", fakeAsync(() =>
-  new SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS()));
+it(
+  "does something really long and complicated so I have to write a very long name for the test",
+  fakeAsync(
+    () =>
+      new SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS(),
+  ),
+);
 
 /*
- * isTestCall(parent) should only be called when parent exists
- * and parent.type is CallExpression. This test makes sure that
- * no errors are thrown when calling isTestCall(parent)
- */
+* isTestCall(parent) should only be called when parent exists
+* and parent.type is CallExpression. This test makes sure that
+* no errors are thrown when calling isTestCall(parent)
+*/
 function x() {
   fakeAsync(() => {});
 }
```

# Output

```js
beforeEach(
  fakeAsync(() => {
    // code
  }),
);

afterAll(
  fakeAsync(() => {
    console.log("Hello");
  }),
);

it(
  "should create the app",
  fakeAsync(() => {
    //code
  }),
);

it(
  "does something really long and complicated so I have to write a very long name for the test",
  fakeAsync(() => {
    // code
  }),
);

it(
  "does something really long and complicated so I have to write a very long name for the test",
  fakeAsync(
    () =>
      new SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS(),
  ),
);

/*
* isTestCall(parent) should only be called when parent exists
* and parent.type is CallExpression. This test makes sure that
* no errors are thrown when calling isTestCall(parent)
*/
function x() {
  fakeAsync(() => {});
}
```


# Lines exceeding max width of 80 characters
```
   21:   "does something really long and complicated so I have to write a very long name for the test",
   28:   "does something really long and complicated so I have to write a very long name for the test",
   31:       new SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS(),
```

