---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: ts/declaration/class.ts
---

# Input

```ts

class Test {
    name: string;

    constructor(
                         a: string
    ) {}

    declare private readonly test?: string;
    readonly test2!: string;

    display2(): void { console.log(this.name); }
    my_name(): string {
        return this.name
    };

    public get my_name2(): any { return this.name; }
    public set my_name2(name) { this.name = name; }



}

class Test2 {

    static readonly [a: string]: string;
}


abstract class A {}
abstract class ConcreteMembers {
    name: string;



    constructor(name: string) { this.name = name; }



    display(): void { console.log(this.name); }
    public get my_name() { return this.name; }
    public set my_name(name) { this.name = name; }
    #private_method() { }
}
abstract class AbstractMembers {
    abstract name: string;
    abstract display();
    abstract get my_name();
    abstract set my_name(val);
}


abstract class Test1 {
                private c?: string;
                private d?: string;
                private readonly e: string;
                private readonly f: string;
                protected abstract readonly g: string;
                protected readonly abstract h: string;
}
```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: Always
Arrow parentheses: Always
-----

```ts
class Test {
	name: string;

	constructor(a: string) {}

	private declare readonly test?: string;
	readonly test2!: string;

	display2(): void {
		console.log(this.name);
	}
	my_name(): string {
		return this.name;
	}

	public get my_name2(): any {
		return this.name;
	}
	public set my_name2(name) {
		this.name = name;
	}
}

class Test2 {
	static readonly [a: string]: string;
}

abstract class A {}
abstract class ConcreteMembers {
	name: string;

	constructor(name: string) {
		this.name = name;
	}

	display(): void {
		console.log(this.name);
	}
	public get my_name() {
		return this.name;
	}
	public set my_name(name) {
		this.name = name;
	}
	#private_method() {}
}
abstract class AbstractMembers {
	abstract name: string;
	abstract display();
	abstract get my_name();
	abstract set my_name(val);
}

abstract class Test1 {
	private c?: string;
	private d?: string;
	private readonly e: string;
	private readonly f: string;
	protected abstract readonly g: string;
	protected abstract readonly h: string;
}
```


