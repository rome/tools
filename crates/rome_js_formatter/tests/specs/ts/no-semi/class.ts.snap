---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: ts/no-semi/class.ts
---

# Input

```ts
class A {
  bar: A;
  [baz]

  // none of the semicolons above this comment can be omitted.
  // none of the semicolons below this comment are necessary.

  bar: A;
  private [baz]
}

const computed = "test";

class A {
	test: string

	private [computed]
	protected [computed]
	public [computed]
	static [computed]

	readonly [computed]

	[key: string]: string;

	async [computed]() {}
}

declare module test {
	class Declaration {
		prop: string;
		[computed];

		constructor()

		[computed]

		get getter()
		[computed]

		set setter(a: string)
		[computed]

		method()

		[computed]

		[key: string]: string
		[computed]
	}
}

```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: Always
Arrow parentheses: Always
-----

```ts
class A {
	bar: A;
	[baz];

	// none of the semicolons above this comment can be omitted.
	// none of the semicolons below this comment are necessary.

	bar: A;
	private [baz];
}

const computed = "test";

class A {
	test: string;

	private [computed];
	protected [computed];
	public [computed];
	static [computed];

	readonly [computed];

	[key: string]: string;

	async [computed]() {}
}

declare module test {
	class Declaration {
		prop: string;
		[computed];

		constructor();

		[computed];

		get getter();
		[computed];

		set setter(a: string);
		[computed];

		method();

		[computed];

		[key: string]: string;
		[computed];
	}
}
```

## Output 2

-----
Indent style: Tab
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: As needed
Arrow parentheses: Always
-----

```ts
class A {
	bar: A;
	[baz]

	// none of the semicolons above this comment can be omitted.
	// none of the semicolons below this comment are necessary.

	bar: A
	private [baz]
}

const computed = "test"

class A {
	test: string

	private [computed]
	protected [computed]
	public [computed]
	static [computed]

	readonly [computed];

	[key: string]: string

	async [computed]() {}
}

declare module test {
	class Declaration {
		prop: string;
		[computed]

		constructor()

		[computed]

		get getter()
		[computed]

		set setter(a: string)
		[computed]

		method()

		[computed];

		[key: string]: string
		[computed]
	}
}
```


