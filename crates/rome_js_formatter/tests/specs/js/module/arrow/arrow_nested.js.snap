---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info: js/module/arrow/arrow_nested.js
---

# Input

```js
Seq(typeDef.interface.groups).forEach(group =>
    Seq(group.members).forEach((member, memberName) =>
      markdownDoc(
        member.doc,
        { typePath: typePath.concat(memberName.slice(1)),
         signatures: member.signatures }
      )
    )
)

const promiseFromCallback = fn =>
    new Promise((resolve, reject) =>
      fn((err, result) => {
        if (err) return reject(err);
        return resolve(result);
      })
    );

runtimeAgent.getProperties(
    objectId,
    false, // ownProperties
    false, // accessorPropertiesOnly
    false, // generatePreview
    (error, properties, internalProperties) => {
      return 1
    },
);

```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: Always
Arrow parentheses: Always
-----

```js
Seq(typeDef.interface.groups).forEach((group) =>
	Seq(group.members).forEach((member, memberName) =>
		markdownDoc(member.doc, {
			typePath: typePath.concat(memberName.slice(1)),
			signatures: member.signatures,
		}),
	),
);

const promiseFromCallback = (fn) =>
	new Promise((resolve, reject) =>
		fn((err, result) => {
			if (err) return reject(err);
			return resolve(result);
		}),
	);

runtimeAgent.getProperties(
	objectId,
	false, // ownProperties
	false, // accessorPropertiesOnly
	false, // generatePreview
	(error, properties, internalProperties) => {
		return 1;
	},
);
```

## Output 2

-----
Indent style: Tab
Line width: 80
Quote style: Double Quotes
JSX quote style: Double Quotes
Quote properties: As needed
Trailing comma: All
Semicolons: Always
Arrow parentheses: As needed
-----

```js
Seq(typeDef.interface.groups).forEach(group =>
	Seq(group.members).forEach((member, memberName) =>
		markdownDoc(member.doc, {
			typePath: typePath.concat(memberName.slice(1)),
			signatures: member.signatures,
		}),
	),
);

const promiseFromCallback = fn =>
	new Promise((resolve, reject) =>
		fn((err, result) => {
			if (err) return reject(err);
			return resolve(result);
		}),
	);

runtimeAgent.getProperties(
	objectId,
	false, // ownProperties
	false, // accessorPropertiesOnly
	false, // generatePreview
	(error, properties, internalProperties) => {
		return 1;
	},
);
```


