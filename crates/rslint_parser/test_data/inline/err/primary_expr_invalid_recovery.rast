JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..6 "a" [] [Whitespace(" ")],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@6..8 "=" [] [Whitespace(" ")],
                            expression: missing (required),
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@9..11 ";" [] [Whitespace(" ")],
        },
        JsExpressionStatement {
            expression: CallExpr {
                type_args: missing (optional),
                callee: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@11..14 "foo" [] [],
                    },
                },
                arguments: ArgList {
                    l_paren_token: L_PAREN@14..15 "(" [] [],
                    args: [],
                    r_paren_token: R_PAREN@15..16 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@16..17 ";" [] [],
        },
    ],
}

0: JS_ROOT@0..18
  0: (empty)
  1: LIST@0..0
  2: LIST@0..17
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..11
      0: JS_VARIABLE_DECLARATION@0..9
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..9
          0: JS_VARIABLE_DECLARATOR@4..9
            0: JS_IDENTIFIER_BINDING@4..6
              0: IDENT@4..6 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..9
              0: EQ@6..8 "=" [] [Whitespace(" ")]
              1: ERROR@8..9
                0: ERROR_TOKEN@8..9 "\\" [] []
      1: SEMICOLON@9..11 ";" [] [Whitespace(" ")]
    1: JS_EXPRESSION_STATEMENT@11..17
      0: CALL_EXPR@11..16
        0: JS_IDENTIFIER_EXPRESSION@11..14
          0: JS_REFERENCE_IDENTIFIER@11..14
            0: IDENT@11..14 "foo" [] []
        1: ARG_LIST@14..16
          0: L_PAREN@14..15 "(" [] []
          1: LIST@15..15
          2: R_PAREN@15..16 ")" [] []
      1: SEMICOLON@16..17 ";" [] []
  3: EOF@17..18 "" [Whitespace("\n")] []
--
error: unexpected token `\`
  ┌─ primary_expr_invalid_recovery.js:1:9
  │
1 │ let a = \; foo();
  │         ^

--
let a = \; foo();
