JsModule {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        ForStmt {
            for_token: FOR_KW@0..4 "for" [] [Whitespace(" ")],
            l_paren_token: missing (required),
            init: missing (optional),
            first_semi_token: SEMICOLON@4..5 ";" [] [],
            test: missing (optional),
            update: ForStmtUpdate {
                expr: JsObjectExpression {
                    l_curly_token: L_CURLY@7..8 "{" [] [],
                    members: [],
                    r_curly_token: R_CURLY@8..9 "}" [] [],
                },
            },
            r_paren_token: missing (required),
            cons: ForStmt {
                for_token: FOR_KW@9..14 "for" [Whitespace("\n")] [Whitespace(" ")],
                l_paren_token: missing (required),
                init: ForStmtInit {
                    inner: JsVariableDeclaration {
                        kind_token: LET_KW@14..18 "let" [] [Whitespace(" ")],
                        declarators: [
                            JsVariableDeclarator {
                                id: JsIdentifierBinding {
                                    name_token: IDENT@18..20 "i" [] [Whitespace(" ")],
                                },
                                init: JsEqualValueClause {
                                    eq_token: EQ@20..22 "=" [] [Whitespace(" ")],
                                    expression: JsNumberLiteralExpression {
                                        value_token: JS_NUMBER_LITERAL@22..23 "5" [] [],
                                    },
                                },
                            },
                        ],
                    },
                },
                first_semi_token: SEMICOLON@23..25 ";" [] [Whitespace(" ")],
                test: ForStmtTest {
                    expr: JsBinaryExpression {
                        left: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@25..27 "i" [] [Whitespace(" ")],
                            },
                        },
                        operator: L_ANGLE@27..29 "<" [] [Whitespace(" ")],
                    },
                },
                update: ForStmtUpdate {
                    expr: JsPostUpdateExpression {
                        operand: JsIdentifierAssignment {
                            name_token: IDENT@33..34 "i" [] [],
                        },
                        operator: PLUS2@34..37 "++" [] [Whitespace(" ")],
                    },
                },
                r_paren_token: missing (required),
                cons: JsBlockStatement {
                    l_curly_token: L_CURLY@37..38 "{" [] [],
                    statements: [],
                    r_curly_token: R_CURLY@38..39 "}" [] [],
                },
            },
        },
        ForStmt {
            for_token: FOR_KW@39..44 "for" [Whitespace("\n")] [Whitespace(" ")],
            l_paren_token: missing (required),
            init: ForStmtInit {
                inner: JsVariableDeclaration {
                    kind_token: LET_KW@44..48 "let" [] [Whitespace(" ")],
                    declarators: [
                        JsVariableDeclarator {
                            id: JsIdentifierBinding {
                                name_token: IDENT@48..50 "i" [] [Whitespace(" ")],
                            },
                            init: JsEqualValueClause {
                                eq_token: EQ@50..52 "=" [] [Whitespace(" ")],
                                expression: JsNumberLiteralExpression {
                                    value_token: JS_NUMBER_LITERAL@52..53 "5" [] [],
                                },
                            },
                        },
                    ],
                },
            },
            first_semi_token: SEMICOLON@53..55 ";" [] [Whitespace(" ")],
            test: ForStmtTest {
                expr: JsBinaryExpression {
                    left: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@55..57 "i" [] [Whitespace(" ")],
                        },
                    },
                    operator: L_ANGLE@57..59 "<" [] [Whitespace(" ")],
                },
            },
            update: ForStmtUpdate {
                expr: JsPreUpdateExpression {
                    operator: PLUS2@63..65 "++" [] [],
                    operand: JsIdentifierAssignment {
                        name_token: IDENT@65..67 "i" [] [Whitespace(" ")],
                    },
                },
            },
            r_paren_token: missing (required),
            cons: JsBlockStatement {
                l_curly_token: L_CURLY@67..68 "{" [] [],
                statements: [],
                r_curly_token: R_CURLY@68..69 "}" [] [],
            },
        },
    ],
}

0: JS_MODULE@0..70
  0: (empty)
  1: LIST@0..0
  2: LIST@0..69
    0: FOR_STMT@0..39
      0: FOR_KW@0..4 "for" [] [Whitespace(" ")]
      1: (empty)
      2: SEMICOLON@4..5 ";" [] []
      3: SEMICOLON@5..7 ";" [] [Whitespace(" ")]
      4: FOR_STMT_UPDATE@7..9
        0: JS_OBJECT_EXPRESSION@7..9
          0: L_CURLY@7..8 "{" [] []
          1: LIST@8..8
          2: R_CURLY@8..9 "}" [] []
      5: (empty)
      6: FOR_STMT@9..39
        0: FOR_KW@9..14 "for" [Whitespace("\n")] [Whitespace(" ")]
        1: (empty)
        2: FOR_STMT_INIT@14..23
          0: JS_VARIABLE_DECLARATION@14..23
            0: LET_KW@14..18 "let" [] [Whitespace(" ")]
            1: LIST@18..23
              0: JS_VARIABLE_DECLARATOR@18..23
                0: JS_IDENTIFIER_BINDING@18..20
                  0: IDENT@18..20 "i" [] [Whitespace(" ")]
                1: JS_EQUAL_VALUE_CLAUSE@20..23
                  0: EQ@20..22 "=" [] [Whitespace(" ")]
                  1: JS_NUMBER_LITERAL_EXPRESSION@22..23
                    0: JS_NUMBER_LITERAL@22..23 "5" [] []
        3: SEMICOLON@23..25 ";" [] [Whitespace(" ")]
        4: FOR_STMT_TEST@25..31
          0: JS_BINARY_EXPRESSION@25..31
            0: JS_IDENTIFIER_EXPRESSION@25..27
              0: JS_REFERENCE_IDENTIFIER@25..27
                0: IDENT@25..27 "i" [] [Whitespace(" ")]
            1: L_ANGLE@27..29 "<" [] [Whitespace(" ")]
            2: JS_NUMBER_LITERAL_EXPRESSION@29..31
              0: JS_NUMBER_LITERAL@29..31 "10" [] []
        5: SEMICOLON@31..33 ";" [] [Whitespace(" ")]
        6: FOR_STMT_UPDATE@33..37
          0: JS_POST_UPDATE_EXPRESSION@33..37
            0: JS_IDENTIFIER_ASSIGNMENT@33..34
              0: IDENT@33..34 "i" [] []
            1: PLUS2@34..37 "++" [] [Whitespace(" ")]
        7: (empty)
        8: JS_BLOCK_STATEMENT@37..39
          0: L_CURLY@37..38 "{" [] []
          1: LIST@38..38
          2: R_CURLY@38..39 "}" [] []
    1: FOR_STMT@39..69
      0: FOR_KW@39..44 "for" [Whitespace("\n")] [Whitespace(" ")]
      1: (empty)
      2: FOR_STMT_INIT@44..53
        0: JS_VARIABLE_DECLARATION@44..53
          0: LET_KW@44..48 "let" [] [Whitespace(" ")]
          1: LIST@48..53
            0: JS_VARIABLE_DECLARATOR@48..53
              0: JS_IDENTIFIER_BINDING@48..50
                0: IDENT@48..50 "i" [] [Whitespace(" ")]
              1: JS_EQUAL_VALUE_CLAUSE@50..53
                0: EQ@50..52 "=" [] [Whitespace(" ")]
                1: JS_NUMBER_LITERAL_EXPRESSION@52..53
                  0: JS_NUMBER_LITERAL@52..53 "5" [] []
      3: SEMICOLON@53..55 ";" [] [Whitespace(" ")]
      4: FOR_STMT_TEST@55..61
        0: JS_BINARY_EXPRESSION@55..61
          0: JS_IDENTIFIER_EXPRESSION@55..57
            0: JS_REFERENCE_IDENTIFIER@55..57
              0: IDENT@55..57 "i" [] [Whitespace(" ")]
          1: L_ANGLE@57..59 "<" [] [Whitespace(" ")]
          2: JS_NUMBER_LITERAL_EXPRESSION@59..61
            0: JS_NUMBER_LITERAL@59..61 "10" [] []
      5: SEMICOLON@61..63 ";" [] [Whitespace(" ")]
      6: FOR_STMT_UPDATE@63..67
        0: JS_PRE_UPDATE_EXPRESSION@63..67
          0: PLUS2@63..65 "++" [] []
          1: JS_IDENTIFIER_ASSIGNMENT@65..67
            0: IDENT@65..67 "i" [] [Whitespace(" ")]
      7: (empty)
      8: JS_BLOCK_STATEMENT@67..69
        0: L_CURLY@67..68 "{" [] []
        1: LIST@68..68
        2: R_CURLY@68..69 "}" [] []
  3: EOF@69..70 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected `'('` but instead found `;`
  ┌─ for_stmt_err.js:1:5
  │
1 │ for ;; {}
  │     ^ unexpected

--
error[SyntaxError]: expected `')'` but instead found `for`
  ┌─ for_stmt_err.js:2:1
  │
2 │ for let i = 5; i < 10; i++ {}
  │ ^^^ unexpected

--
error[SyntaxError]: expected `'('` but instead found `let`
  ┌─ for_stmt_err.js:2:5
  │
2 │ for let i = 5; i < 10; i++ {}
  │     ^^^ unexpected

--
error[SyntaxError]: expected `')'` but instead found `{`
  ┌─ for_stmt_err.js:2:28
  │
2 │ for let i = 5; i < 10; i++ {}
  │                            ^ unexpected

--
error[SyntaxError]: expected `'('` but instead found `let`
  ┌─ for_stmt_err.js:3:5
  │
3 │ for let i = 5; i < 10; ++i {}
  │     ^^^ unexpected

--
error[SyntaxError]: expected `')'` but instead found `{`
  ┌─ for_stmt_err.js:3:28
  │
3 │ for let i = 5; i < 10; ++i {}
  │                            ^ unexpected

--
for ;; {}
for let i = 5; i < 10; i++ {}
for let i = 5; i < 10; ++i {}
