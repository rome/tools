JsModule {
    interpreter_token: missing (optional),
    directives: [],
    items: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..6 "a" [] [Whitespace(" ")],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@6..8 "=" [] [Whitespace(" ")],
                            expression: JsObjectExpression {
                                l_curly_token: L_CURLY@8..9 "{" [] [],
                                members: [],
                                r_curly_token: missing (required),
                            },
                        },
                    },
                    COMMA@9..11 "," [] [Whitespace(" ")],
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@11..14 "foo" [] [],
                        },
                        init: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsUnknownStatement {
            items: [
                Token(
                    R_CURLY@14..15 "}" [] [],
                ),
            ],
        },
        JsUnknownStatement {
            items: [
                Token(
                    IDENT@15..20 "let" [Whitespace("\n")] [Whitespace(" ")],
                ),
                Token(
                    IDENT@20..22 "b" [] [Whitespace(" ")],
                ),
                Token(
                    EQ@22..24 "=" [] [Whitespace(" ")],
                ),
            ],
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@24..26 "{" [] [Whitespace(" ")],
            statements: [
                JsExpressionStatement {
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@26..30 "foo" [] [Whitespace(" ")],
                        },
                    },
                    semicolon_token: missing (optional),
                },
                JsExpressionStatement {
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@30..34 "bar" [] [Whitespace(" ")],
                        },
                    },
                    semicolon_token: missing (optional),
                },
            ],
            r_curly_token: R_CURLY@34..35 "}" [] [],
        },
    ],
}

0: JS_MODULE@0..36
  0: (empty)
  1: LIST@0..0
  2: LIST@0..35
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..14
      0: JS_VARIABLE_DECLARATION@0..14
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..14
          0: JS_VARIABLE_DECLARATOR@4..9
            0: JS_IDENTIFIER_BINDING@4..6
              0: IDENT@4..6 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..9
              0: EQ@6..8 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@8..9
                0: L_CURLY@8..9 "{" [] []
                1: LIST@9..9
                2: (empty)
          1: COMMA@9..11 "," [] [Whitespace(" ")]
          2: JS_VARIABLE_DECLARATOR@11..14
            0: JS_IDENTIFIER_BINDING@11..14
              0: IDENT@11..14 "foo" [] []
            1: (empty)
      1: (empty)
    1: JS_UNKNOWN_STATEMENT@14..15
      0: R_CURLY@14..15 "}" [] []
    2: JS_UNKNOWN_STATEMENT@15..24
      0: IDENT@15..20 "let" [Whitespace("\n")] [Whitespace(" ")]
      1: IDENT@20..22 "b" [] [Whitespace(" ")]
      2: EQ@22..24 "=" [] [Whitespace(" ")]
    3: JS_BLOCK_STATEMENT@24..35
      0: L_CURLY@24..26 "{" [] [Whitespace(" ")]
      1: LIST@26..34
        0: JS_EXPRESSION_STATEMENT@26..30
          0: JS_IDENTIFIER_EXPRESSION@26..30
            0: JS_REFERENCE_IDENTIFIER@26..30
              0: IDENT@26..30 "foo" [] [Whitespace(" ")]
          1: (empty)
        1: JS_EXPRESSION_STATEMENT@30..34
          0: JS_IDENTIFIER_EXPRESSION@30..34
            0: JS_REFERENCE_IDENTIFIER@30..34
              0: IDENT@30..34 "bar" [] [Whitespace(" ")]
          1: (empty)
      2: R_CURLY@34..35 "}" [] []
  3: EOF@35..36 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected a property, a shorthand property, a getter, a setter, or a method but instead found ','
  ┌─ object_expr_err.js:1:10
  │
1 │ let a = {, foo}
  │          ^ Expected a property, a shorthand property, a getter, a setter, or a method here

--
error[SyntaxError]: Expected a statement or declaration, but found none
  ┌─ object_expr_err.js:1:15
  │
1 │ let a = {, foo}
  │               ^ Expected a statement or declaration here

--
error[SyntaxError]: expected a statement but instead found 'let b ='
  ┌─ object_expr_err.js:2:1
  │
2 │ let b = { foo bar }
  │ ^^^^^^^ Expected a statement here

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ object_expr_err.js:2:15
  │
2 │ let b = { foo bar }
  │           ----^^^
  │           │   │
  │           │   An explicit or implicit semicolon is expected here...
  │           ...Which is required to end this statement

--
let a = {, foo}
let b = { foo bar }
