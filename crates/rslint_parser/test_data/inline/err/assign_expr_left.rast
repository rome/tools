JsModule {
    interpreter_token: missing (optional),
    directives: [],
    items: [
        JsExpressionStatement {
            expression: JsParenthesizedExpression {
                l_paren_token: L_PAREN@0..2 "(" [] [Whitespace(" ")],
                expression: JsUnknownExpression {
                    items: [
                        EQ@2..4 "=" [] [Whitespace(" ")],
                    ],
                },
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@4..7 "foo" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
        JsUnknownStatement {
            items: [
                R_PAREN@7..8 ")" [] [],
            ],
        },
        JsEmptyStatement {
            semicolon_token: SEMICOLON@8..9 ";" [] [],
        },
    ],
    eof_token: EOF@9..10 "" [Whitespace("\n")] [],
}

0: JS_MODULE@0..10
  0: (empty)
  1: LIST@0..0
  2: LIST@0..9
    0: JS_EXPRESSION_STATEMENT@0..4
      0: JS_PARENTHESIZED_EXPRESSION@0..4
        0: L_PAREN@0..2 "(" [] [Whitespace(" ")]
        1: JS_UNKNOWN_EXPRESSION@2..4
          0: EQ@2..4 "=" [] [Whitespace(" ")]
        2: (empty)
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@4..7
      0: JS_IDENTIFIER_EXPRESSION@4..7
        0: JS_REFERENCE_IDENTIFIER@4..7
          0: IDENT@4..7 "foo" [] []
      1: (empty)
    2: JS_UNKNOWN_STATEMENT@7..8
      0: R_PAREN@7..8 ")" [] []
    3: JS_EMPTY_STATEMENT@8..9
      0: SEMICOLON@8..9 ";" [] []
  3: EOF@9..10 "" [Whitespace("\n")] []
--
error[SyntaxError]: Expected an expression, but found none
  ┌─ assign_expr_left.js:1:3
  │
1 │ ( = foo);
  │   ^ Expected an expression here

--
error[SyntaxError]: expected `')'` but instead found `foo`
  ┌─ assign_expr_left.js:1:5
  │
1 │ ( = foo);
  │     ^^^ unexpected

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ assign_expr_left.js:1:8
  │
1 │ ( = foo);
  │     ---^
  │     │  │
  │     │  An explicit or implicit semicolon is expected here...
  │     ...Which is required to end this statement

--
( = foo);
