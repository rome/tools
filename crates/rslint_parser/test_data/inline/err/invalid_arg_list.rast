JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: CallExpr {
                callee: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@0..3 "foo" [] [],
                    },
                },
                type_args: missing (optional),
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@3..4 "(" [] [],
                    args: JsCallArgumentList [
                        JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@4..5 "a" [] [],
                            },
                        },
                        COMMA@5..6 "," [] [],
                        JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@6..7 "b" [] [],
                            },
                        },
                    ],
                    r_paren_token: missing (required),
                },
            },
            semicolon_token: SEMICOLON@7..8 ";" [] [],
        },
        JsExpressionStatement {
            expression: CallExpr {
                callee: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@8..12 "foo" [Whitespace("\n")] [],
                    },
                },
                type_args: missing (optional),
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@12..13 "(" [] [],
                    args: JsCallArgumentList [
                        JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@13..14 "a" [] [],
                            },
                        },
                        COMMA@14..15 "," [] [],
                        JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@15..17 "b" [] [Whitespace(" ")],
                            },
                        },
                    ],
                    r_paren_token: missing (required),
                },
            },
            semicolon_token: missing (optional),
        },
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind_token: VAR_KW@17..20 "var" [] [],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@20..25 "foo" [Whitespace("\n")] [Whitespace(" ")],
                        },
                        excl_token: missing (optional),
                        type_annotation: missing (optional),
                        initializer: missing (optional),
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsParenthesizedExpression {
                l_paren_token: L_PAREN@25..26 "(" [] [],
                expression: JsUnknownExpression {
                    items: [
                        COMMA@26..27 "," [] [],
                    ],
                },
                r_paren_token: R_PAREN@29..30 ")" [] [],
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@30..31 "" [Whitespace("\n")] [],
}

0: JS_MODULE@0..31
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..30
    0: JS_EXPRESSION_STATEMENT@0..8
      0: CALL_EXPR@0..7
        0: JS_IDENTIFIER_EXPRESSION@0..3
          0: JS_REFERENCE_IDENTIFIER@0..3
            0: IDENT@0..3 "foo" [] []
        1: (empty)
        2: JS_CALL_ARGUMENTS@3..7
          0: L_PAREN@3..4 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@4..7
            0: JS_IDENTIFIER_EXPRESSION@4..5
              0: JS_REFERENCE_IDENTIFIER@4..5
                0: IDENT@4..5 "a" [] []
            1: COMMA@5..6 "," [] []
            2: JS_IDENTIFIER_EXPRESSION@6..7
              0: JS_REFERENCE_IDENTIFIER@6..7
                0: IDENT@6..7 "b" [] []
          2: (empty)
      1: SEMICOLON@7..8 ";" [] []
    1: JS_EXPRESSION_STATEMENT@8..17
      0: CALL_EXPR@8..17
        0: JS_IDENTIFIER_EXPRESSION@8..12
          0: JS_REFERENCE_IDENTIFIER@8..12
            0: IDENT@8..12 "foo" [Whitespace("\n")] []
        1: (empty)
        2: JS_CALL_ARGUMENTS@12..17
          0: L_PAREN@12..13 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@13..17
            0: JS_IDENTIFIER_EXPRESSION@13..14
              0: JS_REFERENCE_IDENTIFIER@13..14
                0: IDENT@13..14 "a" [] []
            1: COMMA@14..15 "," [] []
            2: JS_IDENTIFIER_EXPRESSION@15..17
              0: JS_REFERENCE_IDENTIFIER@15..17
                0: IDENT@15..17 "b" [] [Whitespace(" ")]
          2: (empty)
      1: (empty)
    2: JS_VARIABLE_STATEMENT@17..25
      0: JS_VARIABLE_DECLARATIONS@17..25
        0: VAR_KW@17..20 "var" [] []
        1: JS_VARIABLE_DECLARATION_LIST@20..25
          0: JS_VARIABLE_DECLARATION@20..25
            0: JS_IDENTIFIER_BINDING@20..25
              0: IDENT@20..25 "foo" [Whitespace("\n")] [Whitespace(" ")]
            1: (empty)
            2: (empty)
            3: (empty)
      1: (empty)
    3: JS_EXPRESSION_STATEMENT@25..30
      0: JS_PARENTHESIZED_EXPRESSION@25..30
        0: L_PAREN@25..26 "(" [] []
        1: JS_UNKNOWN_EXPRESSION@26..27
          0: COMMA@26..27 "," [] []
        2: JS_SEQUENCE_EXPRESSION@27..29
          0: COMMA@27..28 "," [] []
          1: JS_IDENTIFIER_EXPRESSION@28..29
            0: JS_REFERENCE_IDENTIFIER@28..29
              0: IDENT@28..29 "b" [] []
        3: R_PAREN@29..30 ")" [] []
      1: (empty)
  3: EOF@30..31 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected `')'` but instead found `;`
  ┌─ invalid_arg_list.js:1:8
  │
1 │ foo(a,b;
  │        ^ unexpected

--
error[SyntaxError]: expected `')'` but instead found `var`
  ┌─ invalid_arg_list.js:2:9
  │
2 │ foo(a,b var
  │         ^^^ unexpected

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ invalid_arg_list.js:3:5
  │  
2 │   foo(a,b var
  │ ┌─────────'
3 │ │ foo (,,b)
  │ │     ^ An explicit or implicit semicolon is expected here...
  │ └────' ...Which is required to end this statement

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ invalid_arg_list.js:3:6
  │
3 │ foo (,,b)
  │      ^ Expected an expression here

--
foo(a,b;
foo(a,b var
foo (,,b)
