JsModule {
    interpreter_token: missing (optional),
    directives: [],
    items: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: VAR_KW@0..4 "var" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..6 "a" [] [Whitespace(" ")],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@6..7 "=" [] [],
                            expression: JsUnknownExpression {
                                items: [
                                    Token(
                                        SEMICOLON@7..8 ";" [] [],
                                    ),
                                ],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: CONST_KW@8..15 "const" [Whitespace("\n")] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@15..17 "a" [] [Whitespace(" ")],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@17..19 "=" [] [Whitespace(" ")],
                            expression: JsNumberLiteralExpression {
                                value_token: JS_NUMBER_LITERAL@19..21 "5" [] [Whitespace(" ")],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@21..25 "let" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@25..27 "b" [] [Whitespace(" ")],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@27..29 "=" [] [Whitespace(" ")],
                            expression: JsNumberLiteralExpression {
                                value_token: JS_NUMBER_LITERAL@29..30 "5" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@30..31 ";" [] [],
        },
    ],
}

0: JS_MODULE@0..32
  0: (empty)
  1: LIST@0..0
  2: LIST@0..31
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..8
      0: JS_VARIABLE_DECLARATION@0..8
        0: VAR_KW@0..4 "var" [] [Whitespace(" ")]
        1: LIST@4..8
          0: JS_VARIABLE_DECLARATOR@4..8
            0: JS_IDENTIFIER_BINDING@4..6
              0: IDENT@4..6 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..8
              0: EQ@6..7 "=" [] []
              1: JS_UNKNOWN_EXPRESSION@7..8
                0: SEMICOLON@7..8 ";" [] []
      1: (empty)
    1: JS_VARIABLE_DECLARATION_STATEMENT@8..21
      0: JS_VARIABLE_DECLARATION@8..21
        0: CONST_KW@8..15 "const" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@15..21
          0: JS_VARIABLE_DECLARATOR@15..21
            0: JS_IDENTIFIER_BINDING@15..17
              0: IDENT@15..17 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@17..21
              0: EQ@17..19 "=" [] [Whitespace(" ")]
              1: JS_NUMBER_LITERAL_EXPRESSION@19..21
                0: JS_NUMBER_LITERAL@19..21 "5" [] [Whitespace(" ")]
      1: (empty)
    2: JS_VARIABLE_DECLARATION_STATEMENT@21..31
      0: JS_VARIABLE_DECLARATION@21..30
        0: LET_KW@21..25 "let" [] [Whitespace(" ")]
        1: LIST@25..30
          0: JS_VARIABLE_DECLARATOR@25..30
            0: JS_IDENTIFIER_BINDING@25..27
              0: IDENT@25..27 "b" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@27..30
              0: EQ@27..29 "=" [] [Whitespace(" ")]
              1: JS_NUMBER_LITERAL_EXPRESSION@29..30
                0: JS_NUMBER_LITERAL@29..30 "5" [] []
      1: SEMICOLON@30..31 ";" [] []
  3: EOF@31..32 "" [Whitespace("\n")] []
--
error[SyntaxError]: Expected an expression, but found none
  ┌─ var_decl_err.js:1:8
  │
1 │ var a =;
  │        ^ Expected an expression here

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ var_decl_err.js:2:13
  │
2 │ const a = 5 let b = 5;
  │ ------------^^^ An explicit or implicit semicolon is expected here...
  │ │            
  │ ...Which is required to end this statement

--
var a =;
const a = 5 let b = 5;
