JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsExpressionStatement {
            expression: JsArrowFunctionExpression {
                async_token: missing (optional),
                type_parameters: missing (optional),
                parameter_list: JsParameterList {
                    l_paren_token: L_PAREN@0..1 "(" [] [],
                    parameters: [
                        JsUnknownPattern {
                            items: [
                                Token(
                                    JS_NUMBER_LITERAL@1..3 "5" [] [Whitespace(" ")],
                                ),
                                Token(
                                    PLUS@3..5 "+" [] [Whitespace(" ")],
                                ),
                                Token(
                                    JS_NUMBER_LITERAL@5..6 "5" [] [],
                                ),
                            ],
                        },
                    ],
                    r_paren_token: R_PAREN@6..8 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@8..11 "=>" [] [Whitespace(" ")],
                return_type: missing (optional),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsParenthesizedExpression {
                l_paren_token: L_PAREN@13..15 "(" [Whitespace("\n")] [],
                expression: JsSequenceExpression {
                    left: JsReferenceIdentifierExpression {
                        name_token: IDENT@15..16 "a" [] [],
                    },
                    comma_token: COMMA@16..18 "," [] [Whitespace(" ")],
                },
                r_paren_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsReferenceIdentifierExpression {
                name_token: IDENT@19..20 "b" [] [],
            },
            semicolon_token: missing (optional),
        },
        JsUnknownStatement {
            items: [
                Token(
                    R_PAREN@20..22 ")" [] [Whitespace(" ")],
                ),
            ],
        },
        JsUnknownStatement {
            items: [
                Token(
                    FAT_ARROW@22..25 "=>" [] [Whitespace(" ")],
                ),
            ],
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@25..26 "{" [] [],
            statements: [],
            r_curly_token: R_CURLY@26..27 "}" [] [],
        },
        JsExpressionStatement {
            expression: JsArrowFunctionExpression {
                async_token: missing (optional),
                type_parameters: missing (optional),
                parameter_list: JsParameterList {
                    l_paren_token: L_PAREN@27..29 "(" [Whitespace("\n")] [],
                    parameters: [
                        SinglePattern {
                            name: Name {
                                ident_token: IDENT@29..30 "a" [] [],
                            },
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                        COMMA@30..32 "," [] [Whitespace(" ")],
                        SinglePattern {
                            name: Name {
                                ident_token: IDENT@32..33 "b" [] [],
                            },
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                    ],
                    r_paren_token: R_PAREN@33..35 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@35..37 "=>" [] [],
                return_type: missing (optional),
            },
            semicolon_token: missing (optional),
        },
    ],
}

0: JS_ROOT@0..38
  0: (empty)
  1: LIST@0..0
  2: LIST@0..37
    0: JS_EXPRESSION_STATEMENT@0..13
      0: JS_ARROW_FUNCTION_EXPRESSION@0..13
        0: JS_PARAMETER_LIST@0..8
          0: L_PAREN@0..1 "(" [] []
          1: LIST@1..6
            0: JS_UNKNOWN_PATTERN@1..6
              0: JS_NUMBER_LITERAL@1..3 "5" [] [Whitespace(" ")]
              1: PLUS@3..5 "+" [] [Whitespace(" ")]
              2: JS_NUMBER_LITERAL@5..6 "5" [] []
          2: R_PAREN@6..8 ")" [] [Whitespace(" ")]
        1: FAT_ARROW@8..11 "=>" [] [Whitespace(" ")]
        2: JS_FUNCTION_BODY@11..13
          0: L_CURLY@11..12 "{" [] []
          1: LIST@12..12
          2: LIST@12..12
          3: R_CURLY@12..13 "}" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@13..19
      0: JS_PARENTHESIZED_EXPRESSION@13..19
        0: L_PAREN@13..15 "(" [Whitespace("\n")] []
        1: JS_SEQUENCE_EXPRESSION@15..19
          0: JS_REFERENCE_IDENTIFIER_EXPRESSION@15..16
            0: IDENT@15..16 "a" [] []
          1: COMMA@16..18 "," [] [Whitespace(" ")]
          2: JS_UNKNOWN_EXPRESSION@18..19
            0: COMMA@18..19 "," [] []
          3: (empty)
      1: (empty)
    2: JS_EXPRESSION_STATEMENT@19..20
      0: JS_REFERENCE_IDENTIFIER_EXPRESSION@19..20
        0: IDENT@19..20 "b" [] []
      1: (empty)
    3: JS_UNKNOWN_STATEMENT@20..22
      0: R_PAREN@20..22 ")" [] [Whitespace(" ")]
    4: JS_UNKNOWN_STATEMENT@22..25
      0: FAT_ARROW@22..25 "=>" [] [Whitespace(" ")]
    5: JS_BLOCK_STATEMENT@25..27
      0: L_CURLY@25..26 "{" [] []
      1: LIST@26..26
      2: R_CURLY@26..27 "}" [] []
    6: JS_EXPRESSION_STATEMENT@27..37
      0: JS_ARROW_FUNCTION_EXPRESSION@27..37
        0: JS_PARAMETER_LIST@27..35
          0: L_PAREN@27..29 "(" [Whitespace("\n")] []
          1: LIST@29..33
            0: SINGLE_PATTERN@29..30
              0: NAME@29..30
                0: IDENT@29..30 "a" [] []
            1: COMMA@30..32 "," [] [Whitespace(" ")]
            2: SINGLE_PATTERN@32..33
              0: NAME@32..33
                0: IDENT@32..33 "b" [] []
          2: R_PAREN@33..35 ")" [] [Whitespace(" ")]
        1: FAT_ARROW@35..37 "=>" [] []
        2: (empty)
      1: (empty)
  3: EOF@37..38 "" [Whitespace("\n")] []
--
error[SyntaxError]: Expected an identifier or pattern, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:1:2
  │
1 │ (5 + 5) => {}
  │  ^

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:2:5
  │
2 │ (a, ,b) => {}
  │     ^ Expected an expression here

--
error[SyntaxError]: expected `')'` but instead found `b`
  ┌─ paren_or_arrow_expr_invalid_params.js:2:6
  │
2 │ (a, ,b) => {}
  │      ^ unexpected

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:2:6
  │
2 │ (a, ,b) => {}
  │ -----^
  │ │    │
  │ │    An explicit or implicit semicolon is expected here...
  │ ...Which is required to end this statement

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:2:7
  │
2 │ (a, ,b) => {}
  │      -^
  │      ││
  │      │An explicit or implicit semicolon is expected here...
  │      ...Which is required to end this statement

--
error[SyntaxError]: Expected a statement or declaration, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:2:7
  │
2 │ (a, ,b) => {}
  │       ^ Expected a statement or declaration here

--
error[SyntaxError]: Expected a statement or declaration, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:2:9
  │
2 │ (a, ,b) => {}
  │         ^^ Expected a statement or declaration here

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ paren_or_arrow_expr_invalid_params.js:4:1
  │
4 │ 
  │ ^ Expected an expression here

--
error[SyntaxError]: expected a function body, or an expression but instead found ''
  ┌─ paren_or_arrow_expr_invalid_params.js:4:1
  │
4 │ 
  │ ^ Expected a function body, or an expression here

--
(5 + 5) => {}
(a, ,b) => {}
(a, b) =>
