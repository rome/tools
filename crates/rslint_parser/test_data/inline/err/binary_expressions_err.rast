JS_MODULE@0..34
  LIST@0..34
    JS_EXPRESSION_STATEMENT@0..11
      CALL_EXPR@0..10
        NAME_REF@0..3
          None IDENT@0..3 "foo" None
        ARG_LIST@3..10
          None L_PAREN@3..4 "(" None
          LIST@4..9
            BIN_EXPR@4..9
              NAME_REF@4..8
                None IDENT@4..7 "foo" Whitespace(1)
              None PLUS@8..9 "+" None
          None R_PAREN@9..10 ")" None
      None SEMICOLON@10..11 ";" None
    JS_EXPRESSION_STATEMENT@11..22
      BIN_EXPR@11..21
        NAME_REF@11..16
          Whitespace(1) IDENT@12..15 "foo" Whitespace(1)
        None PLUS@16..17 "+" Whitespace(1)
        BIN_EXPR@18..21
          None STAR@18..19 "*" Whitespace(1)
          LITERAL@20..21
            None NUMBER@20..21 "2" None
      None SEMICOLON@21..22 ";" None
    JS_EXPRESSION_STATEMENT@22..34
      BIN_EXPR@22..33
        UNARY_EXPR@22..28
          Whitespace(1) BANG@23..24 "!" None
          NAME_REF@24..28
            None IDENT@24..27 "foo" Whitespace(1)
        None STAR@28..29 "*" Whitespace(1)
        NAME_REF@30..33
          None IDENT@30..33 "bar" None
      None SEMICOLON@33..34 ";" None
--
error[SyntaxError]: Expected an expression, but found none
  ┌─ binary_expressions_err.js:1:10
  │
1 │ foo(foo +);
  │          ^ Expected an expression here

--
error[SyntaxError]: Expected an expression for the right hand side of a `+`, but found an operator instead
  ┌─ binary_expressions_err.js:2:7
  │
2 │ foo + * 2;
  │     - ^ But this operator was encountered instead
  │     │  
  │     This operator requires a right hand side value

--
foo(foo +);
foo + * 2;
!foo * bar;
