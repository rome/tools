JS_ROOT@0..34
  LIST@0..0
  LIST@0..34
    JS_EXPRESSION_STATEMENT@0..11
      CALL_EXPR@0..10
        JS_REFERENCE_IDENTIFIER_EXPRESSION@0..3
          IDENT@0..3 "foo"
        ARG_LIST@3..10
          L_PAREN@3..4 "("
          LIST@4..9
            JS_BINARY_EXPRESSION@4..9
              JS_REFERENCE_IDENTIFIER_EXPRESSION@4..8
                IDENT@4..8 "foo "
              PLUS@8..9 "+"
          R_PAREN@9..10 ")"
      SEMICOLON@10..11 ";"
    JS_EXPRESSION_STATEMENT@11..22
      JS_BINARY_EXPRESSION@11..21
        JS_REFERENCE_IDENTIFIER_EXPRESSION@11..16
          IDENT@11..16 "\nfoo "
        PLUS@16..18 "+ "
        JS_BINARY_EXPRESSION@18..21
          STAR@18..20 "* "
          JS_NUMBER_LITERAL@20..21
            JS_NUMBER_LITERAL_TOKEN@20..21 "2"
      SEMICOLON@21..22 ";"
    JS_EXPRESSION_STATEMENT@22..34
      JS_BINARY_EXPRESSION@22..33
        JS_UNARY_EXPRESSION@22..28
          BANG@22..24 "\n!"
          JS_REFERENCE_IDENTIFIER_EXPRESSION@24..28
            IDENT@24..28 "foo "
        STAR@28..30 "* "
        JS_REFERENCE_IDENTIFIER_EXPRESSION@30..33
          IDENT@30..33 "bar"
      SEMICOLON@33..34 ";"
--
error[SyntaxError]: Expected an expression, but found none
  ┌─ binary_expressions_err.js:1:10
  │
1 │ foo(foo +);
  │          ^ Expected an expression here

--
error[SyntaxError]: Expected an expression for the right hand side of a `+`, but found an operator instead
  ┌─ binary_expressions_err.js:2:7
  │
2 │ foo + * 2;
  │     - ^ But this operator was encountered instead
  │     │  
  │     This operator requires a right hand side value

--
foo(foo +);
foo + * 2;
!foo * bar;
