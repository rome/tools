JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsExpressionStatement {
            expression: JsConditionalExpression {
                test: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@0..4 "foo" [] [Whitespace(" ")],
                    },
                },
                question_mark_token: QUESTION@4..6 "?" [] [Whitespace(" ")],
                colon_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsConditionalExpression {
                test: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@13..18 "foo" [Whitespace("\n")] [Whitespace(" ")],
                    },
                },
                question_mark_token: QUESTION@18..20 "?" [] [Whitespace(" ")],
                colon_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
    ],
}

0: JS_ROOT@0..40
  0: (empty)
  1: LIST@0..0
  2: LIST@0..39
    0: JS_EXPRESSION_STATEMENT@0..13
      0: JS_CONDITIONAL_EXPRESSION@0..13
        0: JS_IDENTIFIER_EXPRESSION@0..4
          0: JS_REFERENCE_IDENTIFIER@0..4
            0: IDENT@0..4 "foo" [] [Whitespace(" ")]
        1: QUESTION@4..6 "?" [] [Whitespace(" ")]
        2: JS_IDENTIFIER_EXPRESSION@6..10
          0: JS_REFERENCE_IDENTIFIER@6..10
            0: IDENT@6..10 "bar" [] [Whitespace(" ")]
        3: (empty)
        4: JS_IDENTIFIER_EXPRESSION@10..13
          0: JS_REFERENCE_IDENTIFIER@10..13
            0: IDENT@10..13 "baz" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@13..39
      0: JS_CONDITIONAL_EXPRESSION@13..39
        0: JS_IDENTIFIER_EXPRESSION@13..18
          0: JS_REFERENCE_IDENTIFIER@13..18
            0: IDENT@13..18 "foo" [Whitespace("\n")] [Whitespace(" ")]
        1: QUESTION@18..20 "?" [] [Whitespace(" ")]
        2: JS_IDENTIFIER_EXPRESSION@20..24
          0: JS_REFERENCE_IDENTIFIER@20..24
            0: IDENT@20..24 "bar" [] [Whitespace(" ")]
        3: (empty)
        4: JS_CONDITIONAL_EXPRESSION@24..39
          0: JS_IDENTIFIER_EXPRESSION@24..28
            0: JS_REFERENCE_IDENTIFIER@24..28
              0: IDENT@24..28 "baz" [] [Whitespace(" ")]
          1: QUESTION@28..30 "?" [] [Whitespace(" ")]
          2: JS_IDENTIFIER_EXPRESSION@30..34
            0: JS_REFERENCE_IDENTIFIER@30..34
              0: IDENT@30..34 "foo" [] [Whitespace(" ")]
          3: COLON@34..36 ":" [] [Whitespace(" ")]
          4: JS_IDENTIFIER_EXPRESSION@36..39
            0: JS_REFERENCE_IDENTIFIER@36..39
              0: IDENT@36..39 "bar" [] []
      1: (empty)
  3: EOF@39..40 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected `:` but instead found `baz`
  ┌─ conditional_expr_err.js:1:11
  │
1 │ foo ? bar baz
  │           ^^^ unexpected

--
error[SyntaxError]: expected `:` but instead found `baz`
  ┌─ conditional_expr_err.js:2:11
  │
2 │ foo ? bar baz ? foo : bar
  │           ^^^ unexpected

--
foo ? bar baz
foo ? bar baz ? foo : bar
