JS_ROOT@0..51
  LIST@0..0
  LIST@0..51
    JS_WHILE_STATEMENT@0..13
      WHILE_KW@0..6 "while "
      JS_BOOLEAN_LITERAL@6..11
        TRUE_KW@6..11 "true "
      JS_BLOCK_STATEMENT@11..13
        L_CURLY@11..12 "{"
        LIST@12..12
        R_CURLY@12..13 "}"
    JS_WHILE_STATEMENT@13..22
      WHILE_KW@13..20 "\nwhile "
      JS_BLOCK_STATEMENT@20..22
        L_CURLY@20..21 "{"
        LIST@21..21
        R_CURLY@21..22 "}"
    JS_WHILE_STATEMENT@22..37
      WHILE_KW@22..29 "\nwhile "
      L_PAREN@29..30 "("
      JS_BOOLEAN_LITERAL@30..35
        TRUE_KW@30..35 "true "
      JS_BLOCK_STATEMENT@35..37
        L_CURLY@35..36 "{"
        LIST@36..36
        R_CURLY@36..37 "}"
    JS_WHILE_STATEMENT@37..51
      WHILE_KW@37..44 "\nwhile "
      JS_BOOLEAN_LITERAL@44..48
        TRUE_KW@44..48 "true"
      R_PAREN@48..50 ") "
      ERROR@50..51
        R_CURLY@50..51 "}"
--
error[SyntaxError]: expected `'('` but instead found `true`
  ┌─ while_stmt_err.js:1:7
  │
1 │ while true {}
  │       ^^^^ unexpected

--
error[SyntaxError]: expected `')'` but instead found `{`
  ┌─ while_stmt_err.js:1:12
  │
1 │ while true {}
  │            ^ unexpected

--
error[SyntaxError]: expected `'('` but instead found `{`
  ┌─ while_stmt_err.js:2:7
  │
2 │ while {}
  │       ^ unexpected

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ while_stmt_err.js:2:7
  │
2 │ while {}
  │       ^ Expected an expression here

--
error[SyntaxError]: expected `')'` but instead found `{`
  ┌─ while_stmt_err.js:2:7
  │
2 │ while {}
  │       ^ unexpected

--
error[SyntaxError]: expected `')'` but instead found `{`
  ┌─ while_stmt_err.js:3:13
  │
3 │ while (true {}
  │             ^ unexpected

--
error[SyntaxError]: expected `'('` but instead found `true`
  ┌─ while_stmt_err.js:4:7
  │
4 │ while true) }
  │       ^^^^ unexpected

--
error[SyntaxError]: Expected a statement or declaration, but found none
  ┌─ while_stmt_err.js:4:13
  │
4 │ while true) }
  │             ^ Expected a statement or declaration here

--
while true {}
while {}
while (true {}
while true) }
