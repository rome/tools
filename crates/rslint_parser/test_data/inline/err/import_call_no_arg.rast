JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..6 "a" [] [Whitespace(" ")],
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@6..8 "=" [] [Whitespace(" ")],
                            expression: JsImportCallExpression {
                                import_token: IMPORT_KW@8..14 "import" [] [],
                                l_paren_token: L_PAREN@14..15 "(" [] [],
                                argument: missing (required),
                                r_paren_token: R_PAREN@15..16 ")" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@16..17 ";" [] [],
        },
        JsExpressionStatement {
            expression: CallExpr {
                type_args: missing (optional),
                callee: JsReferenceIdentifierExpression {
                    name_token: IDENT@17..21 "foo" [Whitespace("\n")] [],
                },
                arguments: ArgList {
                    l_paren_token: L_PAREN@21..22 "(" [] [],
                    args: [],
                    r_paren_token: R_PAREN@22..23 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@23..24 ";" [] [],
        },
    ],
}

0: JS_ROOT@0..25
  0: (empty)
  1: LIST@0..0
  2: LIST@0..24
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..17
      0: JS_VARIABLE_DECLARATION@0..16
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..16
          0: JS_VARIABLE_DECLARATOR@4..16
            0: JS_IDENTIFIER_BINDING@4..6
              0: IDENT@4..6 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..16
              0: EQ@6..8 "=" [] [Whitespace(" ")]
              1: JS_IMPORT_CALL_EXPRESSION@8..16
                0: IMPORT_KW@8..14 "import" [] []
                1: L_PAREN@14..15 "(" [] []
                2: R_PAREN@15..16 ")" [] []
      1: SEMICOLON@16..17 ";" [] []
    1: JS_EXPRESSION_STATEMENT@17..24
      0: CALL_EXPR@17..23
        0: JS_REFERENCE_IDENTIFIER_EXPRESSION@17..21
          0: IDENT@17..21 "foo" [Whitespace("\n")] []
        1: ARG_LIST@21..23
          0: L_PAREN@21..22 "(" [] []
          1: LIST@22..22
          2: R_PAREN@22..23 ")" [] []
      1: SEMICOLON@23..24 ";" [] []
  3: EOF@24..25 "" [Whitespace("\n")] []
--
error[SyntaxError]: Expected an expression, but found none
  ┌─ import_call_no_arg.js:1:16
  │
1 │ let a = import();
  │                ^ Expected an expression here

--
let a = import();
foo();
