JS_ROOT@0..47
  LIST@0..0
  LIST@0..47
    JS_CLASS_DECLARATION@0..46
      CLASS_KW@0..6 "class "
      L_CURLY@6..7 "{"
      LIST@7..44
        JS_PROPERTY_CLASS_MEMBER@7..44
          JS_COMPUTED_MEMBER_NAME@7..18
            L_BRACK@7..11 "\n  ["
            JS_BINARY_EXPRESSION@11..16
              JS_NUMBER_LITERAL@11..13
                JS_NUMBER_LITERAL_TOKEN@11..13 "1 "
              PLUS@13..15 "+ "
              JS_NUMBER_LITERAL@15..16
                JS_NUMBER_LITERAL_TOKEN@15..16 "1"
            R_BRACK@16..18 "] "
          JS_EQUAL_VALUE_CLAUSE@18..43
            EQ@18..20 "= "
            JS_ARROW_FUNCTION_EXPRESSION@20..43
              JS_PARAMETER_LIST@20..23
                L_PAREN@20..21 "("
                LIST@21..21
                R_PAREN@21..23 ") "
              FAT_ARROW@23..26 "=> "
              JS_FUNCTION_BODY@26..43
                L_CURLY@26..27 "{"
                LIST@27..27
                LIST@27..39
                  JS_VARIABLE_DECLARATION_STATEMENT@27..39
                    JS_VARIABLE_DECLARATION@27..39
                      LET_KW@27..36 "\n    let "
                      LIST@36..39
                        JS_VARIABLE_DECLARATOR@36..39
                          SINGLE_PATTERN@36..37
                            NAME@36..37
                              IDENT@36..37 "a"
                          JS_EQUAL_VALUE_CLAUSE@37..39
                            EQ@37..38 "="
                            ERROR@38..39
                              SEMICOLON@38..39 ";"
                R_CURLY@39..43 "\n  }"
          SEMICOLON@43..44 ";"
      R_CURLY@44..46 "\n}"
    JS_EMPTY_STATEMENT@46..47
      SEMICOLON@46..47 ";"
--
error[SyntaxError]: class declarations must have a name
  ┌─ invalid_method_recover.js:1:7
  │
1 │ class {
  │       ^

--
error[SyntaxError]: expected an expression, but found `;` instead
  ┌─ invalid_method_recover.js:3:11
  │
3 │     let a=;
  │           ^

--
class {
  [1 + 1] = () => {
    let a=;
  };
};
