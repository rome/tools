0: JS_ROOT@0..53
  0: (empty)
  1: LIST@0..0
  2: LIST@0..52
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..15
      0: JS_VARIABLE_DECLARATION@0..15
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..15
          0: JS_VARIABLE_DECLARATOR@4..15
            0: JS_OBJECT_BINDING@4..12
              0: L_CURLY@4..6 "{" [] [Whitespace(" ")]
              1: LIST@6..10
                0: JS_SHORTHAND_PROPERTY_BINDING@6..8
                  0: JS_IDENTIFIER_BINDING@6..8
                    0: IDENT@6..8 "a" [] [Whitespace(" ")]
                  1: (empty)
                1: (empty)
                2: JS_SHORTHAND_PROPERTY_BINDING@8..10
                  0: JS_IDENTIFIER_BINDING@8..10
                    0: IDENT@8..10 "b" [] [Whitespace(" ")]
                  1: (empty)
              2: R_CURLY@10..12 "}" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@12..15
              0: EQ@12..14 "=" [] [Whitespace(" ")]
              1: JS_REFERENCE_IDENTIFIER_EXPRESSION@14..15
                0: IDENT@14..15 "c" [] []
      1: (empty)
    1: JS_VARIABLE_DECLARATION_STATEMENT@15..36
      0: JS_VARIABLE_DECLARATION@15..36
        0: LET_KW@15..20 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@20..36
          0: JS_VARIABLE_DECLARATOR@20..36
            0: JS_OBJECT_BINDING@20..33
              0: L_CURLY@20..22 "{" [] [Whitespace(" ")]
              1: LIST@22..31
                0: JS_SHORTHAND_PROPERTY_BINDING@22..31
                  0: (empty)
                  1: JS_EQUAL_VALUE_CLAUSE@22..31
                    0: EQ@22..24 "=" [] [Whitespace(" ")]
                    1: JS_STRING_LITERAL_EXPRESSION@24..31
                      0: JS_STRING_LITERAL@24..31 "\"test\"" [] [Whitespace(" ")]
              2: R_CURLY@31..33 "}" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@33..36
              0: EQ@33..35 "=" [] [Whitespace(" ")]
              1: JS_REFERENCE_IDENTIFIER_EXPRESSION@35..36
                0: IDENT@35..36 "c" [] []
      1: (empty)
    2: JS_VARIABLE_DECLARATION_STATEMENT@36..52
      0: JS_VARIABLE_DECLARATION@36..52
        0: LET_KW@36..41 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@41..52
          0: JS_VARIABLE_DECLARATOR@41..52
            0: JS_OBJECT_BINDING@41..49
              0: L_CURLY@41..43 "{" [] [Whitespace(" ")]
              1: LIST@43..47
                0: (empty)
                1: COMMA@43..45 "," [] [Whitespace(" ")]
                2: JS_SHORTHAND_PROPERTY_BINDING@45..47
                  0: JS_IDENTIFIER_BINDING@45..47
                    0: IDENT@45..47 "a" [] [Whitespace(" ")]
                  1: (empty)
              2: R_CURLY@47..49 "}" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@49..52
              0: EQ@49..51 "=" [] [Whitespace(" ")]
              1: JS_REFERENCE_IDENTIFIER_EXPRESSION@51..52
                0: IDENT@51..52 "c" [] []
      1: (empty)
  3: EOF@52..53 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected `,` but instead found `b`
  ┌─ object_shorthand_property_err.js:1:9
  │
1 │ let { a b } = c
  │         ^ unexpected

--
error[SyntaxError]: expected an identifier but instead found '='
  ┌─ object_shorthand_property_err.js:2:7
  │
2 │ let { = "test" } = c
  │       ^ Expected an identifier here

--
error[SyntaxError]: expected an identifier, an object pattern, an array pattern, or a rest pattern but instead found ','
  ┌─ object_shorthand_property_err.js:3:7
  │
3 │ let { , a } = c
  │       ^ Expected an identifier, an object pattern, an array pattern, or a rest pattern here

--
let { a b } = c
let { = "test" } = c
let { , a } = c
