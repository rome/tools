JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: SinglePattern {
                            name: Name {
                                ident_token: IDENT@4..6 "a" [] [Whitespace(" ")],
                            },
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@6..8 "=" [] [Whitespace(" ")],
                            expression: JsObjectExpression {
                                l_curly_token: L_CURLY@8..10 "{" [] [Whitespace(" ")],
                                members: [
                                    JsPropertyObjectMember {
                                        name: missing (required),
                                        colon_token: COLON@17..19 ":" [] [Whitespace(" ")],
                                    },
                                ],
                                r_curly_token: R_CURLY@25..26 "}" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@26..31 "let" [Whitespace("\n")] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: SinglePattern {
                            name: Name {
                                ident_token: IDENT@31..33 "a" [] [Whitespace(" ")],
                            },
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@33..35 "=" [] [Whitespace(" ")],
                            expression: JsObjectExpression {
                                l_curly_token: L_CURLY@35..36 "{" [] [],
                                members: [
                                    JsUnknownMember {
                                        items: [
                                            Token(
                                                L_CURLY@36..37 "{" [] [],
                                            ),
                                        ],
                                    },
                                ],
                                r_curly_token: R_CURLY@37..38 "}" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsUnknownStatement {
            items: [
                Token(
                    R_CURLY@38..39 "}" [] [],
                ),
            ],
        },
        JsExpressionStatement {
            expression: JsReferenceIdentifierExpression {
                name_token: IDENT@39..49 "test_err" [Whitespace("\n")] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsReferenceIdentifierExpression {
                name_token: IDENT@49..83 "object_expr_non_ident_literal_prop" [] [],
            },
            semicolon_token: missing (optional),
        },
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@83..88 "let" [Whitespace("\n")] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: SinglePattern {
                            name: Name {
                                ident_token: IDENT@88..90 "b" [] [Whitespace(" ")],
                            },
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@90..92 "=" [] [Whitespace(" ")],
                            expression: JsObjectExpression {
                                l_curly_token: L_CURLY@92..93 "{" [] [],
                                members: [
                                    JsPropertyObjectMember {
                                        name: JsLiteralMemberName {
                                            value: JS_NUMBER_LITERAL@93..94 "5" [] [],
                                        },
                                        colon_token: missing (required),
                                    },
                                ],
                                r_curly_token: R_CURLY@94..95 "}" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
    ],
}

0: JS_ROOT@0..96
  0: (empty)
  1: LIST@0..0
  2: LIST@0..95
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..26
      0: JS_VARIABLE_DECLARATION@0..26
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..26
          0: JS_VARIABLE_DECLARATOR@4..26
            0: JS_IDENTIFIER_BINDING@4..6
              0: IDENT@4..6 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..26
              0: EQ@6..8 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@8..26
                0: L_CURLY@8..10 "{" [] [Whitespace(" ")]
                1: LIST@10..25
                  0: JS_PROPERTY_OBJECT_MEMBER@10..25
                    0: (empty)
                    1: ERROR@10..17
                      0: JS_REGEX_LITERAL@10..17 "/: 6, /" [] []
                    2: COLON@17..19 ":" [] [Whitespace(" ")]
                    3: JS_REGEX_LITERAL_EXPRESSION@19..25
                      0: JS_REGEX_LITERAL@19..25 "/foo/" [] [Whitespace(" ")]
                2: R_CURLY@25..26 "}" [] []
      1: (empty)
    1: JS_VARIABLE_DECLARATION_STATEMENT@26..38
      0: JS_VARIABLE_DECLARATION@26..38
        0: LET_KW@26..31 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@31..38
          0: JS_VARIABLE_DECLARATOR@31..38
            0: JS_IDENTIFIER_BINDING@31..33
              0: IDENT@31..33 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@33..38
              0: EQ@33..35 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@35..38
                0: L_CURLY@35..36 "{" [] []
                1: LIST@36..37
                  0: JS_UNKNOWN_MEMBER@36..37
                    0: L_CURLY@36..37 "{" [] []
                2: R_CURLY@37..38 "}" [] []
      1: (empty)
    2: JS_UNKNOWN_STATEMENT@38..39
      0: R_CURLY@38..39 "}" [] []
    3: JS_EXPRESSION_STATEMENT@39..49
      0: JS_REFERENCE_IDENTIFIER_EXPRESSION@39..49
        0: IDENT@39..49 "test_err" [Whitespace("\n")] [Whitespace(" ")]
      1: (empty)
    4: JS_EXPRESSION_STATEMENT@49..83
      0: JS_REFERENCE_IDENTIFIER_EXPRESSION@49..83
        0: IDENT@49..83 "object_expr_non_ident_literal_prop" [] []
      1: (empty)
    5: JS_VARIABLE_DECLARATION_STATEMENT@83..95
      0: JS_VARIABLE_DECLARATION@83..95
        0: LET_KW@83..88 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@88..95
          0: JS_VARIABLE_DECLARATOR@88..95
            0: JS_IDENTIFIER_BINDING@88..90
              0: IDENT@88..90 "b" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@90..95
              0: EQ@90..92 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@92..95
                0: L_CURLY@92..93 "{" [] []
                1: LIST@93..94
                  0: JS_PROPERTY_OBJECT_MEMBER@93..94
                    0: JS_LITERAL_MEMBER_NAME@93..94
                      0: JS_NUMBER_LITERAL@93..94 "5" [] []
                    1: (empty)
                2: R_CURLY@94..95 "}" [] []
      1: (empty)
  3: EOF@95..96 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected a property, a shorthand property, a getter, a setter, or a method but instead found '/: 6, /'
  ┌─ object_expr_error_prop_name.js:1:11
  │
1 │ let a = { /: 6, /: /foo/ }
  │           ^^^^^^^ Expected a property, a shorthand property, a getter, a setter, or a method here

--
error[SyntaxError]: expected a property, a shorthand property, a getter, a setter, or a method but instead found '{'
  ┌─ object_expr_error_prop_name.js:2:10
  │
2 │ let a = {{}}
  │          ^ Expected a property, a shorthand property, a getter, a setter, or a method here

--
error[SyntaxError]: Expected a statement or declaration, but found none
  ┌─ object_expr_error_prop_name.js:2:12
  │
2 │ let a = {{}}
  │            ^ Expected a statement or declaration here

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ object_expr_error_prop_name.js:3:10
  │
3 │ test_err object_expr_non_ident_literal_prop
  │ ---------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  │ │        │
  │ │        An explicit or implicit semicolon is expected here...
  │ ...Which is required to end this statement

--
error[SyntaxError]: expected `:` but instead found `}`
  ┌─ object_expr_error_prop_name.js:4:11
  │
4 │ let b = {5}
  │           ^ unexpected

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ object_expr_error_prop_name.js:4:11
  │
4 │ let b = {5}
  │           ^ Expected an expression here

--
let a = { /: 6, /: /foo/ }
let a = {{}}
test_err object_expr_non_ident_literal_prop
let b = {5}
