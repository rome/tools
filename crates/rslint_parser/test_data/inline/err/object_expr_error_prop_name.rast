0: JS_ROOT@0..96
  0: (empty)
  1: LIST@0..0
  2: LIST@0..95
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..26
      0: JS_VARIABLE_DECLARATION@0..26
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..26
          0: JS_VARIABLE_DECLARATOR@4..26
            0: SINGLE_PATTERN@4..6
              0: NAME@4..6
                0: IDENT@4..6 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..26
              0: EQ@6..8 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@8..26
                0: L_CURLY@8..10 "{" [] [Whitespace(" ")]
                1: LIST@10..25
                  0: JS_PROPERTY_OBJECT_MEMBER@10..25
                    0: ERROR@10..17
                      0: JS_REGEX_LITERAL@10..17 "/: 6, /" [] []
                    1: COLON@17..19 ":" [] [Whitespace(" ")]
                    2: JS_REGEX_LITERAL_EXPRESSION@19..25
                      0: JS_REGEX_LITERAL@19..25 "/foo/" [] [Whitespace(" ")]
                2: R_CURLY@25..26 "}" [] []
      1: (empty)
    1: JS_VARIABLE_DECLARATION_STATEMENT@26..38
      0: JS_VARIABLE_DECLARATION@26..38
        0: LET_KW@26..31 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@31..38
          0: JS_VARIABLE_DECLARATOR@31..38
            0: SINGLE_PATTERN@31..33
              0: NAME@31..33
                0: IDENT@31..33 "a" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@33..38
              0: EQ@33..35 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@35..38
                0: L_CURLY@35..36 "{" [] []
                1: LIST@36..37
                  0: JS_UNKNOWN_MEMBER@36..37
                    0: ERROR@36..37
                      0: L_CURLY@36..37 "{" [] []
                2: R_CURLY@37..38 "}" [] []
      1: (empty)
    2: JS_UNKNOWN_STATEMENT@38..39
      0: R_CURLY@38..39 "}" [] []
    3: JS_EXPRESSION_STATEMENT@39..49
      0: JS_REFERENCE_IDENTIFIER_EXPRESSION@39..49
        0: IDENT@39..49 "test_err" [Whitespace("\n")] [Whitespace(" ")]
      1: (empty)
    4: JS_EXPRESSION_STATEMENT@49..83
      0: JS_REFERENCE_IDENTIFIER_EXPRESSION@49..83
        0: IDENT@49..83 "object_expr_non_ident_literal_prop" [] []
      1: (empty)
    5: JS_VARIABLE_DECLARATION_STATEMENT@83..95
      0: JS_VARIABLE_DECLARATION@83..95
        0: LET_KW@83..88 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@88..95
          0: JS_VARIABLE_DECLARATOR@88..95
            0: SINGLE_PATTERN@88..90
              0: NAME@88..90
                0: IDENT@88..90 "b" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@90..95
              0: EQ@90..92 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@92..95
                0: L_CURLY@92..93 "{" [] []
                1: LIST@93..94
                  0: JS_PROPERTY_OBJECT_MEMBER@93..94
                    0: JS_LITERAL_MEMBER_NAME@93..94
                      0: JS_NUMBER_LITERAL@93..94 "5" [] []
                    1: (empty)
                2: R_CURLY@94..95 "}" [] []
      1: (empty)
  3: EOF@95..96 "" [Whitespace("\n")] []
--
error[SyntaxError]: Expected an identifier, a keyword, or a string or number literal
  ┌─ object_expr_error_prop_name.js:1:11
  │
1 │ let a = { /: 6, /: /foo/ }
  │           ^^^^^^^ Expected an identifier, a keyword, or a string or number literal here

--
error[SyntaxError]: Expected an identifier, a keyword, or a string or number literal
  ┌─ object_expr_error_prop_name.js:2:10
  │
2 │ let a = {{}}
  │          ^ Expected an identifier, a keyword, or a string or number literal here

--
error[SyntaxError]: Expected a statement or declaration, but found none
  ┌─ object_expr_error_prop_name.js:2:12
  │
2 │ let a = {{}}
  │            ^ Expected a statement or declaration here

--
error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
  ┌─ object_expr_error_prop_name.js:3:10
  │
3 │ test_err object_expr_non_ident_literal_prop
  │ ---------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  │ │        │
  │ │        An explicit or implicit semicolon is expected here...
  │ ...Which is required to end this statement

--
error[SyntaxError]: expected `:` but instead found `}`
  ┌─ object_expr_error_prop_name.js:4:11
  │
4 │ let b = {5}
  │           ^ unexpected

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ object_expr_error_prop_name.js:4:11
  │
4 │ let b = {5}
  │           ^ Expected an expression here

--
let a = { /: 6, /: /foo/ }
let a = {{}}
test_err object_expr_non_ident_literal_prop
let b = {5}
