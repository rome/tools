JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: SinglePattern {
                            name: Name {
                                ident_token: IDENT@4..6 "b" [] [Whitespace(" ")],
                            },
                            question_mark_token: missing (optional),
                            excl_token: missing (optional),
                            ty: missing (optional),
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@6..8 "=" [] [Whitespace(" ")],
                            expression: JsObjectExpression {
                                l_curly_token: L_CURLY@8..10 "{" [] [Whitespace(" ")],
                                members: [
                                    JsPropertyObjectMember {
                                        name: JsLiteralMemberName {
                                            value: IDENT@10..13 "foo" [] [],
                                        },
                                        colon_token: missing (required),
                                    }missing separator,
                                    JsUnknownMember {
                                        items: [
                                            Token(
                                                R_PAREN@13..15 ")" [] [Whitespace(" ")],
                                            ),
                                        ],
                                    },
                                ],
                                r_curly_token: R_CURLY@15..16 "}" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
    ],
}

0: JS_ROOT@0..17
  0: (empty)
  1: LIST@0..0
  2: LIST@0..16
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..16
      0: JS_VARIABLE_DECLARATION@0..16
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: LIST@4..16
          0: JS_VARIABLE_DECLARATOR@4..16
            0: SINGLE_PATTERN@4..6
              0: NAME@4..6
                0: IDENT@4..6 "b" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@6..16
              0: EQ@6..8 "=" [] [Whitespace(" ")]
              1: JS_OBJECT_EXPRESSION@8..16
                0: L_CURLY@8..10 "{" [] [Whitespace(" ")]
                1: LIST@10..15
                  0: JS_PROPERTY_OBJECT_MEMBER@10..13
                    0: JS_LITERAL_MEMBER_NAME@10..13
                      0: IDENT@10..13 "foo" [] []
                    1: (empty)
                  1: (empty)
                  2: JS_UNKNOWN_MEMBER@13..15
                    0: R_PAREN@13..15 ")" [] [Whitespace(" ")]
                2: R_CURLY@15..16 "}" [] []
      1: (empty)
  3: EOF@16..17 "" [Whitespace("\n")] []
--
error[SyntaxError]: expected `:` but instead found `)`
  ┌─ object_expr_method.js:1:14
  │
1 │ let b = { foo) }
  │              ^ unexpected

--
error[SyntaxError]: Expected an expression, but found none
  ┌─ object_expr_method.js:1:14
  │
1 │ let b = { foo) }
  │              ^ Expected an expression here

--
error[SyntaxError]: expected `,` but instead found `)`
  ┌─ object_expr_method.js:1:14
  │
1 │ let b = { foo) }
  │              ^ unexpected

--
error[SyntaxError]: expected a property, a shorthand property, a getter, a setter, or a method but instead found ')'
  ┌─ object_expr_method.js:1:14
  │
1 │ let b = { foo) }
  │              ^ Expected a property, a shorthand property, a getter, a setter, or a method here

--
let b = { foo) }
