JsScript {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: LET_KW@0..14 "let" [Comments("// SCRIPT"), Whitespace("\n")] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsUnknownBinding {
                            items: [
                                Token(
                                    IDENT@14..18 "let" [] [Whitespace(" ")],
                                ),
                            ],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@18..20 "=" [] [Whitespace(" ")],
                            expression: JsNumberLiteralExpression {
                                value_token: JS_NUMBER_LITERAL@20..21 "5" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@21..22 ";" [] [],
        },
        JsVariableDeclarationStatement {
            declaration: JsVariableDeclaration {
                kind_token: CONST_KW@22..29 "const" [Whitespace("\n")] [Whitespace(" ")],
                declarators: [
                    JsVariableDeclarator {
                        id: JsUnknownBinding {
                            items: [
                                Token(
                                    IDENT@29..33 "let" [] [Whitespace(" ")],
                                ),
                            ],
                        },
                        init: JsEqualValueClause {
                            eq_token: EQ@33..35 "=" [] [Whitespace(" ")],
                            expression: JsNumberLiteralExpression {
                                value_token: JS_NUMBER_LITERAL@35..36 "5" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@36..37 ";" [] [],
        },
    ],
}

0: JS_SCRIPT@0..38
  0: (empty)
  1: LIST@0..0
  2: LIST@0..37
    0: JS_VARIABLE_DECLARATION_STATEMENT@0..22
      0: JS_VARIABLE_DECLARATION@0..21
        0: LET_KW@0..14 "let" [Comments("// SCRIPT"), Whitespace("\n")] [Whitespace(" ")]
        1: LIST@14..21
          0: JS_VARIABLE_DECLARATOR@14..21
            0: JS_UNKNOWN_BINDING@14..18
              0: IDENT@14..18 "let" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@18..21
              0: EQ@18..20 "=" [] [Whitespace(" ")]
              1: JS_NUMBER_LITERAL_EXPRESSION@20..21
                0: JS_NUMBER_LITERAL@20..21 "5" [] []
      1: SEMICOLON@21..22 ";" [] []
    1: JS_VARIABLE_DECLARATION_STATEMENT@22..37
      0: JS_VARIABLE_DECLARATION@22..36
        0: CONST_KW@22..29 "const" [Whitespace("\n")] [Whitespace(" ")]
        1: LIST@29..36
          0: JS_VARIABLE_DECLARATOR@29..36
            0: JS_UNKNOWN_BINDING@29..33
              0: IDENT@29..33 "let" [] [Whitespace(" ")]
            1: JS_EQUAL_VALUE_CLAUSE@33..36
              0: EQ@33..35 "=" [] [Whitespace(" ")]
              1: JS_NUMBER_LITERAL_EXPRESSION@35..36
                0: JS_NUMBER_LITERAL@35..36 "5" [] []
      1: SEMICOLON@36..37 ";" [] []
  3: EOF@37..38 "" [Whitespace("\n")] []
--
error[SyntaxError]: `let` cannot be declared as a variable name inside of a `let` declaration
  ┌─ binding_identifier_invalid_script.js:2:5
  │
2 │ let let = 5;
  │     ^^^ Rename the let identifier here

--
error[SyntaxError]: `let` cannot be declared as a variable name inside of a `const` declaration
  ┌─ binding_identifier_invalid_script.js:3:7
  │
3 │ const let = 5;
  │       ^^^ Rename the let identifier here

--
// SCRIPT
let let = 5;
const let = 5;
