JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsConditionalExpression {
                test: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@0..4 "foo" [] [Whitespace(" ")],
                    },
                },
                question_mark_token: QUESTION@4..6 "?" [] [Whitespace(" ")],
                consequent: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@6..10 "bar" [] [Whitespace(" ")],
                    },
                },
                colon_token: COLON@10..12 ":" [] [Whitespace(" ")],
                alternate: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@12..15 "baz" [] [],
                    },
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsConditionalExpression {
                test: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@15..20 "foo" [Newline("\n")] [Whitespace(" ")],
                    },
                },
                question_mark_token: QUESTION@20..22 "?" [] [Whitespace(" ")],
                consequent: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@22..26 "bar" [] [Whitespace(" ")],
                    },
                },
                colon_token: COLON@26..28 ":" [] [Whitespace(" ")],
                alternate: JsConditionalExpression {
                    test: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@28..32 "baz" [] [Whitespace(" ")],
                        },
                    },
                    question_mark_token: QUESTION@32..34 "?" [] [Whitespace(" ")],
                    consequent: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@34..38 "bar" [] [Whitespace(" ")],
                        },
                    },
                    colon_token: COLON@38..40 ":" [] [Whitespace(" ")],
                    alternate: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@40..43 "baz" [] [],
                        },
                    },
                },
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@43..44 "" [Newline("\n")] [],
}

0: JS_MODULE@0..44
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..43
    0: JS_EXPRESSION_STATEMENT@0..15
      0: JS_CONDITIONAL_EXPRESSION@0..15
        0: JS_IDENTIFIER_EXPRESSION@0..4
          0: JS_REFERENCE_IDENTIFIER@0..4
            0: IDENT@0..4 "foo" [] [Whitespace(" ")]
        1: QUESTION@4..6 "?" [] [Whitespace(" ")]
        2: JS_IDENTIFIER_EXPRESSION@6..10
          0: JS_REFERENCE_IDENTIFIER@6..10
            0: IDENT@6..10 "bar" [] [Whitespace(" ")]
        3: COLON@10..12 ":" [] [Whitespace(" ")]
        4: JS_IDENTIFIER_EXPRESSION@12..15
          0: JS_REFERENCE_IDENTIFIER@12..15
            0: IDENT@12..15 "baz" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@15..43
      0: JS_CONDITIONAL_EXPRESSION@15..43
        0: JS_IDENTIFIER_EXPRESSION@15..20
          0: JS_REFERENCE_IDENTIFIER@15..20
            0: IDENT@15..20 "foo" [Newline("\n")] [Whitespace(" ")]
        1: QUESTION@20..22 "?" [] [Whitespace(" ")]
        2: JS_IDENTIFIER_EXPRESSION@22..26
          0: JS_REFERENCE_IDENTIFIER@22..26
            0: IDENT@22..26 "bar" [] [Whitespace(" ")]
        3: COLON@26..28 ":" [] [Whitespace(" ")]
        4: JS_CONDITIONAL_EXPRESSION@28..43
          0: JS_IDENTIFIER_EXPRESSION@28..32
            0: JS_REFERENCE_IDENTIFIER@28..32
              0: IDENT@28..32 "baz" [] [Whitespace(" ")]
          1: QUESTION@32..34 "?" [] [Whitespace(" ")]
          2: JS_IDENTIFIER_EXPRESSION@34..38
            0: JS_REFERENCE_IDENTIFIER@34..38
              0: IDENT@34..38 "bar" [] [Whitespace(" ")]
          3: COLON@38..40 ":" [] [Whitespace(" ")]
          4: JS_IDENTIFIER_EXPRESSION@40..43
            0: JS_REFERENCE_IDENTIFIER@40..43
              0: IDENT@40..43 "baz" [] []
      1: (empty)
  3: EOF@43..44 "" [Newline("\n")] []
