JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@0..2 "5" [] [Whitespace(" ")],
                },
                operator: STAR@2..4 "*" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@5..8 "6" [Whitespace("\n")] [Whitespace(" ")],
                },
                operator: STAR2@8..11 "**" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@17..20 "1" [Whitespace("\n")] [Whitespace(" ")],
                },
                operator: PLUS@20..22 "+" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@39..42 "1" [Whitespace("\n")] [Whitespace(" ")],
                },
                operator: SLASH@42..44 "/" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@45..49 "74" [Whitespace("\n")] [Whitespace(" ")],
                },
                operator: IN_KW@49..52 "in" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsReferenceIdentifierExpression {
                    name_token: IDENT@55..60 "foo" [Whitespace("\n")] [Whitespace(" ")],
                },
                operator: INSTANCEOF_KW@60..71 "instanceof" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsLogicalExpression {
                left: JsReferenceIdentifierExpression {
                    name_token: IDENT@76..81 "foo" [Whitespace("\n")] [Whitespace(" ")],
                },
                operator: QUESTION2@81..84 "??" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsBinaryExpression {
                    left: JsBinaryExpression {
                        left: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@87..90 "1" [Whitespace("\n")] [Whitespace(" ")],
                        },
                        operator: PLUS@90..92 "+" [] [Whitespace(" ")],
                    },
                    operator: PLUS@94..96 "+" [] [Whitespace(" ")],
                },
                operator: PLUS@98..100 "+" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBinaryExpression {
                left: JsBinaryExpression {
                    left: JsNumberLiteralExpression {
                        value_token: JS_NUMBER_LITERAL@101..104 "5" [Whitespace("\n")] [Whitespace(" ")],
                    },
                    operator: PLUS@104..106 "+" [] [Whitespace(" ")],
                },
                operator: MINUS@108..110 "-" [] [Whitespace(" ")],
            },
            semicolon_token: missing (optional),
        },
    ],
}

0: JS_ROOT@0..125
  0: (empty)
  1: LIST@0..0
  2: LIST@0..124
    0: JS_EXPRESSION_STATEMENT@0..5
      0: JS_BINARY_EXPRESSION@0..5
        0: JS_NUMBER_LITERAL_EXPRESSION@0..2
          0: JS_NUMBER_LITERAL@0..2 "5" [] [Whitespace(" ")]
        1: STAR@2..4 "*" [] [Whitespace(" ")]
        2: JS_NUMBER_LITERAL_EXPRESSION@4..5
          0: JS_NUMBER_LITERAL@4..5 "5" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@5..17
      0: JS_BINARY_EXPRESSION@5..17
        0: JS_NUMBER_LITERAL_EXPRESSION@5..8
          0: JS_NUMBER_LITERAL@5..8 "6" [Whitespace("\n")] [Whitespace(" ")]
        1: STAR2@8..11 "**" [] [Whitespace(" ")]
        2: JS_BINARY_EXPRESSION@11..17
          0: JS_NUMBER_LITERAL_EXPRESSION@11..13
            0: JS_NUMBER_LITERAL@11..13 "6" [] [Whitespace(" ")]
          1: STAR2@13..16 "**" [] [Whitespace(" ")]
          2: JS_NUMBER_LITERAL_EXPRESSION@16..17
            0: JS_NUMBER_LITERAL@16..17 "7" [] []
      1: (empty)
    2: JS_EXPRESSION_STATEMENT@17..39
      0: JS_BINARY_EXPRESSION@17..39
        0: JS_NUMBER_LITERAL_EXPRESSION@17..20
          0: JS_NUMBER_LITERAL@17..20 "1" [Whitespace("\n")] [Whitespace(" ")]
        1: PLUS@20..22 "+" [] [Whitespace(" ")]
        2: JS_BINARY_EXPRESSION@22..39
          0: JS_BINARY_EXPRESSION@22..36
            0: JS_NUMBER_LITERAL_EXPRESSION@22..24
              0: JS_NUMBER_LITERAL@22..24 "2" [] [Whitespace(" ")]
            1: STAR@24..26 "*" [] [Whitespace(" ")]
            2: CALL_EXPR@26..36
              0: JS_NUMBER_LITERAL_EXPRESSION@26..27
                0: JS_NUMBER_LITERAL@26..27 "3" [] []
              1: ARG_LIST@27..36
                0: L_PAREN@27..29 "(" [Whitespace("\n")] []
                1: LIST@29..34
                  0: JS_BINARY_EXPRESSION@29..34
                    0: JS_NUMBER_LITERAL_EXPRESSION@29..31
                      0: JS_NUMBER_LITERAL@29..31 "1" [] [Whitespace(" ")]
                    1: PLUS@31..33 "+" [] [Whitespace(" ")]
                    2: JS_NUMBER_LITERAL_EXPRESSION@33..34
                      0: JS_NUMBER_LITERAL@33..34 "2" [] []
                2: R_PAREN@34..36 ")" [] [Whitespace(" ")]
          1: STAR@36..38 "*" [] [Whitespace(" ")]
          2: JS_NUMBER_LITERAL_EXPRESSION@38..39
            0: JS_NUMBER_LITERAL@38..39 "3" [] []
      1: (empty)
    3: JS_EXPRESSION_STATEMENT@39..45
      0: JS_BINARY_EXPRESSION@39..45
        0: JS_NUMBER_LITERAL_EXPRESSION@39..42
          0: JS_NUMBER_LITERAL@39..42 "1" [Whitespace("\n")] [Whitespace(" ")]
        1: SLASH@42..44 "/" [] [Whitespace(" ")]
        2: JS_NUMBER_LITERAL_EXPRESSION@44..45
          0: JS_NUMBER_LITERAL@44..45 "2" [] []
      1: (empty)
    4: JS_EXPRESSION_STATEMENT@45..55
      0: JS_BINARY_EXPRESSION@45..55
        0: JS_NUMBER_LITERAL_EXPRESSION@45..49
          0: JS_NUMBER_LITERAL@45..49 "74" [Whitespace("\n")] [Whitespace(" ")]
        1: IN_KW@49..52 "in" [] [Whitespace(" ")]
        2: JS_REFERENCE_IDENTIFIER_EXPRESSION@52..55
          0: IDENT@52..55 "foo" [] []
      1: (empty)
    5: JS_EXPRESSION_STATEMENT@55..76
      0: JS_BINARY_EXPRESSION@55..76
        0: JS_REFERENCE_IDENTIFIER_EXPRESSION@55..60
          0: IDENT@55..60 "foo" [Whitespace("\n")] [Whitespace(" ")]
        1: INSTANCEOF_KW@60..71 "instanceof" [] [Whitespace(" ")]
        2: JS_REFERENCE_IDENTIFIER_EXPRESSION@71..76
          0: IDENT@71..76 "Array" [] []
      1: (empty)
    6: JS_EXPRESSION_STATEMENT@76..87
      0: JS_LOGICAL_EXPRESSION@76..87
        0: JS_REFERENCE_IDENTIFIER_EXPRESSION@76..81
          0: IDENT@76..81 "foo" [Whitespace("\n")] [Whitespace(" ")]
        1: QUESTION2@81..84 "??" [] [Whitespace(" ")]
        2: JS_REFERENCE_IDENTIFIER_EXPRESSION@84..87
          0: IDENT@84..87 "bar" [] []
      1: (empty)
    7: JS_EXPRESSION_STATEMENT@87..101
      0: JS_BINARY_EXPRESSION@87..101
        0: JS_BINARY_EXPRESSION@87..98
          0: JS_BINARY_EXPRESSION@87..94
            0: JS_NUMBER_LITERAL_EXPRESSION@87..90
              0: JS_NUMBER_LITERAL@87..90 "1" [Whitespace("\n")] [Whitespace(" ")]
            1: PLUS@90..92 "+" [] [Whitespace(" ")]
            2: JS_NUMBER_LITERAL_EXPRESSION@92..94
              0: JS_NUMBER_LITERAL@92..94 "1" [] [Whitespace(" ")]
          1: PLUS@94..96 "+" [] [Whitespace(" ")]
          2: JS_NUMBER_LITERAL_EXPRESSION@96..98
            0: JS_NUMBER_LITERAL@96..98 "1" [] [Whitespace(" ")]
        1: PLUS@98..100 "+" [] [Whitespace(" ")]
        2: JS_NUMBER_LITERAL_EXPRESSION@100..101
          0: JS_NUMBER_LITERAL@100..101 "1" [] []
      1: (empty)
    8: JS_EXPRESSION_STATEMENT@101..124
      0: JS_BINARY_EXPRESSION@101..124
        0: JS_BINARY_EXPRESSION@101..108
          0: JS_NUMBER_LITERAL_EXPRESSION@101..104
            0: JS_NUMBER_LITERAL@101..104 "5" [Whitespace("\n")] [Whitespace(" ")]
          1: PLUS@104..106 "+" [] [Whitespace(" ")]
          2: JS_NUMBER_LITERAL_EXPRESSION@106..108
            0: JS_NUMBER_LITERAL@106..108 "6" [] [Whitespace(" ")]
        1: MINUS@108..110 "-" [] [Whitespace(" ")]
        2: JS_BINARY_EXPRESSION@110..124
          0: JS_BINARY_EXPRESSION@110..116
            0: JS_NUMBER_LITERAL_EXPRESSION@110..112
              0: JS_NUMBER_LITERAL@110..112 "1" [] [Whitespace(" ")]
            1: STAR@112..114 "*" [] [Whitespace(" ")]
            2: JS_NUMBER_LITERAL_EXPRESSION@114..116
              0: JS_NUMBER_LITERAL@114..116 "2" [] [Whitespace(" ")]
          1: SLASH@116..118 "/" [] [Whitespace(" ")]
          2: JS_BINARY_EXPRESSION@118..124
            0: JS_NUMBER_LITERAL_EXPRESSION@118..120
              0: JS_NUMBER_LITERAL@118..120 "1" [] [Whitespace(" ")]
            1: STAR2@120..123 "**" [] [Whitespace(" ")]
            2: JS_NUMBER_LITERAL_EXPRESSION@123..124
              0: JS_NUMBER_LITERAL@123..124 "6" [] []
      1: (empty)
  3: EOF@124..125 "" [Whitespace("\n")] []
