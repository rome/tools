JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsDoWhileStatement {
            do_token: DO_KW@0..3 "do" [] [Whitespace(" ")],
            body: JsExpressionStatement {
                expression: CallExpr {
                    callee: JsStaticMemberExpression {
                        object: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@3..10 "console" [] [],
                            },
                        },
                        operator: DOT@10..11 "." [] [],
                        member: JsName {
                            value_token: IDENT@11..14 "log" [] [],
                        },
                    },
                    optional_chain_token_token: missing (optional),
                    type_args: missing (optional),
                    arguments: JsCallArguments {
                        l_paren_token: L_PAREN@14..15 "(" [] [],
                        args: JsCallArgumentList [
                            JsStringLiteralExpression {
                                value_token: JS_STRING_LITERAL@15..21 "\"test\"" [] [],
                            },
                        ],
                        r_paren_token: R_PAREN@21..22 ")" [] [],
                    },
                },
                semicolon_token: SEMICOLON@22..24 ";" [] [Whitespace(" ")],
            },
            while_token: WHILE_KW@24..29 "while" [] [],
            l_paren_token: L_PAREN@29..30 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@30..34 "true" [] [],
            },
            r_paren_token: R_PAREN@34..35 ")" [] [],
            semicolon_token: missing (optional),
        },
        JsDoWhileStatement {
            do_token: DO_KW@35..39 "do" [Whitespace("\n")] [Whitespace(" ")],
            body: JsBlockStatement {
                l_curly_token: L_CURLY@39..40 "{" [] [],
                statements: JsStatementList [
                    JsExpressionStatement {
                        expression: CallExpr {
                            callee: JsStaticMemberExpression {
                                object: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@40..49 "console" [Whitespace("\n\t")] [],
                                    },
                                },
                                operator: DOT@49..50 "." [] [],
                                member: JsName {
                                    value_token: IDENT@50..53 "log" [] [],
                                },
                            },
                            optional_chain_token_token: missing (optional),
                            type_args: missing (optional),
                            arguments: JsCallArguments {
                                l_paren_token: L_PAREN@53..54 "(" [] [],
                                args: JsCallArgumentList [
                                    JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@54..60 "\"test\"" [] [],
                                    },
                                ],
                                r_paren_token: R_PAREN@60..61 ")" [] [],
                            },
                        },
                        semicolon_token: missing (optional),
                    },
                ],
                r_curly_token: R_CURLY@61..64 "}" [Whitespace("\n")] [Whitespace(" ")],
            },
            while_token: WHILE_KW@64..70 "while" [] [Whitespace(" ")],
            l_paren_token: L_PAREN@70..71 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@71..75 "true" [] [],
            },
            r_paren_token: R_PAREN@75..76 ")" [] [],
            semicolon_token: SEMICOLON@76..77 ";" [] [],
        },
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind: LET_KW@77..82 "let" [Whitespace("\n")] [Whitespace(" ")],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@82..84 "a" [] [Whitespace(" ")],
                        },
                        excl_token: missing (optional),
                        type_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@84..86 "=" [] [Whitespace(" ")],
                            expression: JsNumberLiteralExpression {
                                value_token: JS_NUMBER_LITERAL@86..87 "1" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@87..88 ";" [] [],
        },
        JsDoWhileStatement {
            do_token: DO_KW@88..91 "do" [Whitespace("\n")] [],
            body: JsDoWhileStatement {
                do_token: DO_KW@91..95 "do" [Whitespace("\n")] [Whitespace(" ")],
                body: JsBlockStatement {
                    l_curly_token: L_CURLY@95..96 "{" [] [],
                    statements: JsStatementList [
                        JsExpressionStatement {
                            expression: JsAssignmentExpression {
                                left: JsIdentifierAssignment {
                                    name_token: IDENT@96..100 "a" [Whitespace("\n\t")] [Whitespace(" ")],
                                },
                                operator_token: EQ@100..102 "=" [] [Whitespace(" ")],
                                right: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@102..104 "a" [] [Whitespace(" ")],
                                        },
                                    },
                                    operator: PLUS@104..106 "+" [] [Whitespace(" ")],
                                    right: JsNumberLiteralExpression {
                                        value_token: JS_NUMBER_LITERAL@106..107 "1" [] [],
                                    },
                                },
                            },
                            semicolon_token: missing (optional),
                        },
                    ],
                    r_curly_token: R_CURLY@107..110 "}" [Whitespace("\n")] [Whitespace(" ")],
                },
                while_token: WHILE_KW@110..115 "while" [] [],
                l_paren_token: L_PAREN@115..116 "(" [] [],
                test: JsBinaryExpression {
                    left: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@116..118 "a" [] [Whitespace(" ")],
                        },
                    },
                    operator: L_ANGLE@118..120 "<" [] [Whitespace(" ")],
                    right: JsNumberLiteralExpression {
                        value_token: JS_NUMBER_LITERAL@120..121 "5" [] [],
                    },
                },
                r_paren_token: R_PAREN@121..122 ")" [] [],
                semicolon_token: missing (optional),
            },
            while_token: WHILE_KW@122..129 "while" [Whitespace("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@129..130 "(" [] [],
            test: JsBinaryExpression {
                left: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@130..132 "a" [] [Whitespace(" ")],
                    },
                },
                operator: L_ANGLE@132..134 "<" [] [Whitespace(" ")],
                right: JsNumberLiteralExpression {
                    value_token: JS_NUMBER_LITERAL@134..137 "100" [] [],
                },
            },
            r_paren_token: R_PAREN@137..138 ")" [] [],
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@138..139 "" [Whitespace("\n")] [],
}

0: JS_MODULE@0..139
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..138
    0: JS_DO_WHILE_STATEMENT@0..35
      0: DO_KW@0..3 "do" [] [Whitespace(" ")]
      1: JS_EXPRESSION_STATEMENT@3..24
        0: CALL_EXPR@3..22
          0: JS_STATIC_MEMBER_EXPRESSION@3..14
            0: JS_IDENTIFIER_EXPRESSION@3..10
              0: JS_REFERENCE_IDENTIFIER@3..10
                0: IDENT@3..10 "console" [] []
            1: DOT@10..11 "." [] []
            2: JS_NAME@11..14
              0: IDENT@11..14 "log" [] []
          1: (empty)
          2: (empty)
          3: JS_CALL_ARGUMENTS@14..22
            0: L_PAREN@14..15 "(" [] []
            1: JS_CALL_ARGUMENT_LIST@15..21
              0: JS_STRING_LITERAL_EXPRESSION@15..21
                0: JS_STRING_LITERAL@15..21 "\"test\"" [] []
            2: R_PAREN@21..22 ")" [] []
        1: SEMICOLON@22..24 ";" [] [Whitespace(" ")]
      2: WHILE_KW@24..29 "while" [] []
      3: L_PAREN@29..30 "(" [] []
      4: JS_BOOLEAN_LITERAL_EXPRESSION@30..34
        0: TRUE_KW@30..34 "true" [] []
      5: R_PAREN@34..35 ")" [] []
      6: (empty)
    1: JS_DO_WHILE_STATEMENT@35..77
      0: DO_KW@35..39 "do" [Whitespace("\n")] [Whitespace(" ")]
      1: JS_BLOCK_STATEMENT@39..64
        0: L_CURLY@39..40 "{" [] []
        1: JS_STATEMENT_LIST@40..61
          0: JS_EXPRESSION_STATEMENT@40..61
            0: CALL_EXPR@40..61
              0: JS_STATIC_MEMBER_EXPRESSION@40..53
                0: JS_IDENTIFIER_EXPRESSION@40..49
                  0: JS_REFERENCE_IDENTIFIER@40..49
                    0: IDENT@40..49 "console" [Whitespace("\n\t")] []
                1: DOT@49..50 "." [] []
                2: JS_NAME@50..53
                  0: IDENT@50..53 "log" [] []
              1: (empty)
              2: (empty)
              3: JS_CALL_ARGUMENTS@53..61
                0: L_PAREN@53..54 "(" [] []
                1: JS_CALL_ARGUMENT_LIST@54..60
                  0: JS_STRING_LITERAL_EXPRESSION@54..60
                    0: JS_STRING_LITERAL@54..60 "\"test\"" [] []
                2: R_PAREN@60..61 ")" [] []
            1: (empty)
        2: R_CURLY@61..64 "}" [Whitespace("\n")] [Whitespace(" ")]
      2: WHILE_KW@64..70 "while" [] [Whitespace(" ")]
      3: L_PAREN@70..71 "(" [] []
      4: JS_BOOLEAN_LITERAL_EXPRESSION@71..75
        0: TRUE_KW@71..75 "true" [] []
      5: R_PAREN@75..76 ")" [] []
      6: SEMICOLON@76..77 ";" [] []
    2: JS_VARIABLE_STATEMENT@77..88
      0: JS_VARIABLE_DECLARATIONS@77..87
        0: LET_KW@77..82 "let" [Whitespace("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATION_LIST@82..87
          0: JS_VARIABLE_DECLARATION@82..87
            0: JS_IDENTIFIER_BINDING@82..84
              0: IDENT@82..84 "a" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
            3: JS_INITIALIZER_CLAUSE@84..87
              0: EQ@84..86 "=" [] [Whitespace(" ")]
              1: JS_NUMBER_LITERAL_EXPRESSION@86..87
                0: JS_NUMBER_LITERAL@86..87 "1" [] []
      1: SEMICOLON@87..88 ";" [] []
    3: JS_DO_WHILE_STATEMENT@88..138
      0: DO_KW@88..91 "do" [Whitespace("\n")] []
      1: JS_DO_WHILE_STATEMENT@91..122
        0: DO_KW@91..95 "do" [Whitespace("\n")] [Whitespace(" ")]
        1: JS_BLOCK_STATEMENT@95..110
          0: L_CURLY@95..96 "{" [] []
          1: JS_STATEMENT_LIST@96..107
            0: JS_EXPRESSION_STATEMENT@96..107
              0: JS_ASSIGNMENT_EXPRESSION@96..107
                0: JS_IDENTIFIER_ASSIGNMENT@96..100
                  0: IDENT@96..100 "a" [Whitespace("\n\t")] [Whitespace(" ")]
                1: EQ@100..102 "=" [] [Whitespace(" ")]
                2: JS_BINARY_EXPRESSION@102..107
                  0: JS_IDENTIFIER_EXPRESSION@102..104
                    0: JS_REFERENCE_IDENTIFIER@102..104
                      0: IDENT@102..104 "a" [] [Whitespace(" ")]
                  1: PLUS@104..106 "+" [] [Whitespace(" ")]
                  2: JS_NUMBER_LITERAL_EXPRESSION@106..107
                    0: JS_NUMBER_LITERAL@106..107 "1" [] []
              1: (empty)
          2: R_CURLY@107..110 "}" [Whitespace("\n")] [Whitespace(" ")]
        2: WHILE_KW@110..115 "while" [] []
        3: L_PAREN@115..116 "(" [] []
        4: JS_BINARY_EXPRESSION@116..121
          0: JS_IDENTIFIER_EXPRESSION@116..118
            0: JS_REFERENCE_IDENTIFIER@116..118
              0: IDENT@116..118 "a" [] [Whitespace(" ")]
          1: L_ANGLE@118..120 "<" [] [Whitespace(" ")]
          2: JS_NUMBER_LITERAL_EXPRESSION@120..121
            0: JS_NUMBER_LITERAL@120..121 "5" [] []
        5: R_PAREN@121..122 ")" [] []
        6: (empty)
      2: WHILE_KW@122..129 "while" [Whitespace("\n")] [Whitespace(" ")]
      3: L_PAREN@129..130 "(" [] []
      4: JS_BINARY_EXPRESSION@130..137
        0: JS_IDENTIFIER_EXPRESSION@130..132
          0: JS_REFERENCE_IDENTIFIER@130..132
            0: IDENT@130..132 "a" [] [Whitespace(" ")]
        1: L_ANGLE@132..134 "<" [] [Whitespace(" ")]
        2: JS_NUMBER_LITERAL_EXPRESSION@134..137
          0: JS_NUMBER_LITERAL@134..137 "100" [] []
      5: R_PAREN@137..138 ")" [] []
      6: (empty)
  3: EOF@138..139 "" [Whitespace("\n")] []
