JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasDeclaration {
            declare_token: missing (optional),
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsNumberType {
                number_token: NUMBER_KW@9..15 "number" [] [],
            },
            semicolon_token: SEMICOLON@15..16 ";" [] [],
        },
        TsTypeAliasDeclaration {
            declare_token: missing (optional),
            type_token: TYPE_KW@16..22 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@22..24 "B" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@24..26 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsStringType {
                    string_token: STRING_KW@26..33 "string" [] [Whitespace(" ")],
                },
                extends_token: EXTENDS_KW@33..41 "extends" [] [Whitespace(" ")],
                extends_type: TsNumberType {
                    number_token: NUMBER_KW@41..48 "number" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@48..50 "?" [] [Whitespace(" ")],
                true_type: TsStringType {
                    string_token: STRING_KW@50..57 "string" [] [Whitespace(" ")],
                },
                colon_token: COLON@57..59 ":" [] [Whitespace(" ")],
                false_type: TsNumberType {
                    number_token: NUMBER_KW@59..65 "number" [] [],
                },
            },
            semicolon_token: SEMICOLON@65..66 ";" [] [],
        },
        TsTypeAliasDeclaration {
            declare_token: missing (optional),
            type_token: TYPE_KW@66..72 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@72..74 "C" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@74..76 "=" [] [Whitespace(" ")],
            ty: TsConditionalType {
                check_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@76..78 "A" [] [Whitespace(" ")],
                    },
                    type_arguments: missing (optional),
                },
                extends_token: EXTENDS_KW@78..86 "extends" [] [Whitespace(" ")],
                extends_type: TsParenthesizedType {
                    l_paren_token: L_PAREN@86..87 "(" [] [],
                    ty: TsConditionalType {
                        check_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@87..89 "B" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        extends_token: EXTENDS_KW@89..97 "extends" [] [Whitespace(" ")],
                        extends_type: TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@97..99 "A" [] [Whitespace(" ")],
                            },
                            type_arguments: missing (optional),
                        },
                        question_mark_token: QUESTION@99..101 "?" [] [Whitespace(" ")],
                        true_type: TsNumberType {
                            number_token: NUMBER_KW@101..108 "number" [] [Whitespace(" ")],
                        },
                        colon_token: COLON@108..110 ":" [] [Whitespace(" ")],
                        false_type: TsStringType {
                            string_token: STRING_KW@110..116 "string" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@116..118 ")" [] [Whitespace(" ")],
                },
                question_mark_token: QUESTION@118..120 "?" [] [Whitespace(" ")],
                true_type: TsVoidType {
                    void_token: VOID_KW@120..125 "void" [] [Whitespace(" ")],
                },
                colon_token: COLON@125..127 ":" [] [Whitespace(" ")],
                false_type: TsNumberType {
                    number_token: NUMBER_KW@127..133 "number" [] [],
                },
            },
            semicolon_token: SEMICOLON@133..134 ";" [] [],
        },
    ],
    eof_token: EOF@134..135 "" [Newline("\n")] [],
}

0: JS_MODULE@0..135
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..134
    0: TS_TYPE_ALIAS_DECLARATION@0..16
      0: (empty)
      1: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      2: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "A" [] [Whitespace(" ")]
      3: (empty)
      4: EQ@7..9 "=" [] [Whitespace(" ")]
      5: TS_NUMBER_TYPE@9..15
        0: NUMBER_KW@9..15 "number" [] []
      6: SEMICOLON@15..16 ";" [] []
    1: TS_TYPE_ALIAS_DECLARATION@16..66
      0: (empty)
      1: TYPE_KW@16..22 "type" [Newline("\n")] [Whitespace(" ")]
      2: TS_IDENTIFIER_BINDING@22..24
        0: IDENT@22..24 "B" [] [Whitespace(" ")]
      3: (empty)
      4: EQ@24..26 "=" [] [Whitespace(" ")]
      5: TS_CONDITIONAL_TYPE@26..65
        0: TS_STRING_TYPE@26..33
          0: STRING_KW@26..33 "string" [] [Whitespace(" ")]
        1: EXTENDS_KW@33..41 "extends" [] [Whitespace(" ")]
        2: TS_NUMBER_TYPE@41..48
          0: NUMBER_KW@41..48 "number" [] [Whitespace(" ")]
        3: QUESTION@48..50 "?" [] [Whitespace(" ")]
        4: TS_STRING_TYPE@50..57
          0: STRING_KW@50..57 "string" [] [Whitespace(" ")]
        5: COLON@57..59 ":" [] [Whitespace(" ")]
        6: TS_NUMBER_TYPE@59..65
          0: NUMBER_KW@59..65 "number" [] []
      6: SEMICOLON@65..66 ";" [] []
    2: TS_TYPE_ALIAS_DECLARATION@66..134
      0: (empty)
      1: TYPE_KW@66..72 "type" [Newline("\n")] [Whitespace(" ")]
      2: TS_IDENTIFIER_BINDING@72..74
        0: IDENT@72..74 "C" [] [Whitespace(" ")]
      3: (empty)
      4: EQ@74..76 "=" [] [Whitespace(" ")]
      5: TS_CONDITIONAL_TYPE@76..133
        0: TS_REFERENCE_TYPE@76..78
          0: JS_REFERENCE_IDENTIFIER@76..78
            0: IDENT@76..78 "A" [] [Whitespace(" ")]
          1: (empty)
        1: EXTENDS_KW@78..86 "extends" [] [Whitespace(" ")]
        2: TS_PARENTHESIZED_TYPE@86..118
          0: L_PAREN@86..87 "(" [] []
          1: TS_CONDITIONAL_TYPE@87..116
            0: TS_REFERENCE_TYPE@87..89
              0: JS_REFERENCE_IDENTIFIER@87..89
                0: IDENT@87..89 "B" [] [Whitespace(" ")]
              1: (empty)
            1: EXTENDS_KW@89..97 "extends" [] [Whitespace(" ")]
            2: TS_REFERENCE_TYPE@97..99
              0: JS_REFERENCE_IDENTIFIER@97..99
                0: IDENT@97..99 "A" [] [Whitespace(" ")]
              1: (empty)
            3: QUESTION@99..101 "?" [] [Whitespace(" ")]
            4: TS_NUMBER_TYPE@101..108
              0: NUMBER_KW@101..108 "number" [] [Whitespace(" ")]
            5: COLON@108..110 ":" [] [Whitespace(" ")]
            6: TS_STRING_TYPE@110..116
              0: STRING_KW@110..116 "string" [] []
          2: R_PAREN@116..118 ")" [] [Whitespace(" ")]
        3: QUESTION@118..120 "?" [] [Whitespace(" ")]
        4: TS_VOID_TYPE@120..125
          0: VOID_KW@120..125 "void" [] [Whitespace(" ")]
        5: COLON@125..127 ":" [] [Whitespace(" ")]
        6: TS_NUMBER_TYPE@127..133
          0: NUMBER_KW@127..133 "number" [] []
      6: SEMICOLON@133..134 ";" [] []
  3: EOF@134..135 "" [Newline("\n")] []
