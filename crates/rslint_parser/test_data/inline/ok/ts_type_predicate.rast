JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        TsTypeAliasStatement {
            type_token: TYPE_KW@0..5 "type" [] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@5..7 "A" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
            ty: TsFunctionType {
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@9..10 "(" [] [],
                    items: JsParameterList [
                        JsFormalParameter {
                            binding: JsIdentifierBinding {
                                name_token: IDENT@10..11 "a" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                    ],
                    r_paren_token: R_PAREN@11..13 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@13..16 "=>" [] [Whitespace(" ")],
                return_type: TsTypePredicate {
                    asserts_token: missing (optional),
                    parameter_name: JsReferenceIdentifier {
                        value_token: IDENT@16..18 "a" [] [Whitespace(" ")],
                    },
                    is_token: IS_KW@18..21 "is" [] [Whitespace(" ")],
                    ty: TsStringType {
                        string_token: STRING_KW@21..27 "string" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@27..28 ";" [] [],
        },
        TsTypeAliasStatement {
            type_token: TYPE_KW@28..34 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@34..36 "B" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@36..38 "=" [] [Whitespace(" ")],
            ty: TsFunctionType {
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@38..39 "(" [] [],
                    items: JsParameterList [
                        JsFormalParameter {
                            binding: JsIdentifierBinding {
                                name_token: IDENT@39..40 "a" [] [],
                            },
                            question_mark_token: missing (optional),
                            type_annotation: missing (optional),
                            initializer: missing (optional),
                        },
                    ],
                    r_paren_token: R_PAREN@40..42 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@42..45 "=>" [] [Whitespace(" ")],
                return_type: TsTypePredicate {
                    asserts_token: ASSERTS_KW@45..53 "asserts" [] [Whitespace(" ")],
                    parameter_name: JsReferenceIdentifier {
                        value_token: IDENT@53..55 "a" [] [Whitespace(" ")],
                    },
                    is_token: IS_KW@55..58 "is" [] [Whitespace(" ")],
                    ty: TsStringType {
                        string_token: STRING_KW@58..64 "string" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@64..65 ";" [] [],
        },
        TsTypeAliasStatement {
            type_token: TYPE_KW@65..71 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@71..79 "asserts" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@79..81 "=" [] [Whitespace(" ")],
            ty: TsStringType {
                string_token: STRING_KW@81..87 "string" [] [],
            },
            semicolon_token: SEMICOLON@87..88 ";" [] [],
        },
        TsTypeAliasStatement {
            type_token: TYPE_KW@88..94 "type" [Newline("\n")] [Whitespace(" ")],
            binding_identifier: TsIdentifierBinding {
                name_token: IDENT@94..96 "C" [] [Whitespace(" ")],
            },
            type_parameters: missing (optional),
            eq_token: EQ@96..98 "=" [] [Whitespace(" ")],
            ty: TsFunctionType {
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@98..99 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@99..101 ")" [] [Whitespace(" ")],
                },
                fat_arrow_token: FAT_ARROW@101..104 "=>" [] [Whitespace(" ")],
                return_type: TsReferenceType {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@104..111 "asserts" [] [],
                    },
                    type_arguments: missing (optional),
                },
            },
            semicolon_token: SEMICOLON@111..112 ";" [] [],
        },
    ],
    eof_token: EOF@112..113 "" [Newline("\n")] [],
}

0: JS_MODULE@0..113
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..112
    0: TS_TYPE_ALIAS_STATEMENT@0..28
      0: TYPE_KW@0..5 "type" [] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@5..7
        0: IDENT@5..7 "A" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@7..9 "=" [] [Whitespace(" ")]
      4: TS_FUNCTION_TYPE@9..27
        0: (empty)
        1: JS_PARAMETERS@9..13
          0: L_PAREN@9..10 "(" [] []
          1: JS_PARAMETER_LIST@10..11
            0: JS_FORMAL_PARAMETER@10..11
              0: JS_IDENTIFIER_BINDING@10..11
                0: IDENT@10..11 "a" [] []
              1: (empty)
              2: (empty)
              3: (empty)
          2: R_PAREN@11..13 ")" [] [Whitespace(" ")]
        2: FAT_ARROW@13..16 "=>" [] [Whitespace(" ")]
        3: TS_TYPE_PREDICATE@16..27
          0: (empty)
          1: JS_REFERENCE_IDENTIFIER@16..18
            0: IDENT@16..18 "a" [] [Whitespace(" ")]
          2: IS_KW@18..21 "is" [] [Whitespace(" ")]
          3: TS_STRING_TYPE@21..27
            0: STRING_KW@21..27 "string" [] []
      5: SEMICOLON@27..28 ";" [] []
    1: TS_TYPE_ALIAS_STATEMENT@28..65
      0: TYPE_KW@28..34 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@34..36
        0: IDENT@34..36 "B" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@36..38 "=" [] [Whitespace(" ")]
      4: TS_FUNCTION_TYPE@38..64
        0: (empty)
        1: JS_PARAMETERS@38..42
          0: L_PAREN@38..39 "(" [] []
          1: JS_PARAMETER_LIST@39..40
            0: JS_FORMAL_PARAMETER@39..40
              0: JS_IDENTIFIER_BINDING@39..40
                0: IDENT@39..40 "a" [] []
              1: (empty)
              2: (empty)
              3: (empty)
          2: R_PAREN@40..42 ")" [] [Whitespace(" ")]
        2: FAT_ARROW@42..45 "=>" [] [Whitespace(" ")]
        3: TS_TYPE_PREDICATE@45..64
          0: ASSERTS_KW@45..53 "asserts" [] [Whitespace(" ")]
          1: JS_REFERENCE_IDENTIFIER@53..55
            0: IDENT@53..55 "a" [] [Whitespace(" ")]
          2: IS_KW@55..58 "is" [] [Whitespace(" ")]
          3: TS_STRING_TYPE@58..64
            0: STRING_KW@58..64 "string" [] []
      5: SEMICOLON@64..65 ";" [] []
    2: TS_TYPE_ALIAS_STATEMENT@65..88
      0: TYPE_KW@65..71 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@71..79
        0: IDENT@71..79 "asserts" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@79..81 "=" [] [Whitespace(" ")]
      4: TS_STRING_TYPE@81..87
        0: STRING_KW@81..87 "string" [] []
      5: SEMICOLON@87..88 ";" [] []
    3: TS_TYPE_ALIAS_STATEMENT@88..112
      0: TYPE_KW@88..94 "type" [Newline("\n")] [Whitespace(" ")]
      1: TS_IDENTIFIER_BINDING@94..96
        0: IDENT@94..96 "C" [] [Whitespace(" ")]
      2: (empty)
      3: EQ@96..98 "=" [] [Whitespace(" ")]
      4: TS_FUNCTION_TYPE@98..111
        0: (empty)
        1: JS_PARAMETERS@98..101
          0: L_PAREN@98..99 "(" [] []
          1: JS_PARAMETER_LIST@99..99
          2: R_PAREN@99..101 ")" [] [Whitespace(" ")]
        2: FAT_ARROW@101..104 "=>" [] [Whitespace(" ")]
        3: TS_REFERENCE_TYPE@104..111
          0: JS_REFERENCE_IDENTIFIER@104..111
            0: IDENT@104..111 "asserts" [] []
          1: (empty)
      5: SEMICOLON@111..112 ";" [] []
  3: EOF@112..113 "" [Newline("\n")] []
