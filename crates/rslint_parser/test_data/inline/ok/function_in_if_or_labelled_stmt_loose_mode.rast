JsScript {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    statements: JsStatementList [
        JsLabeledStatement {
            label_token: IDENT@0..16 "label1" [Comments("// SCRIPT"), Newline("\n")] [],
            colon_token: COLON@16..18 ":" [] [Whitespace(" ")],
            body: JsFunctionDeclaration {
                async_token: missing (optional),
                function_token: FUNCTION_KW@18..27 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@27..28 "a" [] [],
                },
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@28..29 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@29..31 ")" [] [Whitespace(" ")],
                },
                return_type_annotation: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@31..32 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@32..33 "}" [] [],
                },
            },
        },
        JsIfStatement {
            if_token: IF_KW@33..37 "if" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@37..38 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@38..42 "true" [] [],
            },
            r_paren_token: R_PAREN@42..44 ")" [] [Whitespace(" ")],
            consequent: JsFunctionDeclaration {
                async_token: missing (optional),
                function_token: FUNCTION_KW@44..53 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@53..54 "b" [] [],
                },
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@54..55 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@55..57 ")" [] [Whitespace(" ")],
                },
                return_type_annotation: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@57..58 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@58..60 "}" [] [Whitespace(" ")],
                },
            },
            else_clause: JsElseClause {
                else_token: ELSE_KW@60..65 "else" [] [Whitespace(" ")],
                alternate: JsFunctionDeclaration {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@65..74 "function" [] [Whitespace(" ")],
                    star_token: missing (optional),
                    id: JsIdentifierBinding {
                        name_token: IDENT@74..75 "c" [] [],
                    },
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@75..76 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@76..78 ")" [] [Whitespace(" ")],
                    },
                    return_type_annotation: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@78..79 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@79..80 "}" [] [],
                    },
                },
            },
        },
        JsIfStatement {
            if_token: IF_KW@80..84 "if" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@84..85 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@85..89 "true" [] [],
            },
            r_paren_token: R_PAREN@89..91 ")" [] [Whitespace(" ")],
            consequent: JsFunctionDeclaration {
                async_token: missing (optional),
                function_token: FUNCTION_KW@91..100 "function" [] [Whitespace(" ")],
                star_token: missing (optional),
                id: JsIdentifierBinding {
                    name_token: IDENT@100..101 "d" [] [],
                },
                type_parameters: missing (optional),
                parameters: JsParameters {
                    l_paren_token: L_PAREN@101..102 "(" [] [],
                    items: JsParameterList [],
                    r_paren_token: R_PAREN@102..104 ")" [] [Whitespace(" ")],
                },
                return_type_annotation: missing (optional),
                body: JsFunctionBody {
                    l_curly_token: L_CURLY@104..105 "{" [] [],
                    directives: JsDirectiveList [],
                    statements: JsStatementList [],
                    r_curly_token: R_CURLY@105..106 "}" [] [],
                },
            },
            else_clause: missing (optional),
        },
        JsIfStatement {
            if_token: IF_KW@106..110 "if" [Newline("\n")] [Whitespace(" ")],
            l_paren_token: L_PAREN@110..111 "(" [] [],
            test: JsBooleanLiteralExpression {
                value_token: TRUE_KW@111..115 "true" [] [],
            },
            r_paren_token: R_PAREN@115..117 ")" [] [Whitespace(" ")],
            consequent: JsExpressionStatement {
                expression: JsStringLiteralExpression {
                    value_token: JS_STRING_LITERAL@117..123 "\"test\"" [] [],
                },
                semicolon_token: SEMICOLON@123..125 ";" [] [Whitespace(" ")],
            },
            else_clause: JsElseClause {
                else_token: ELSE_KW@125..130 "else" [] [Whitespace(" ")],
                alternate: JsFunctionDeclaration {
                    async_token: missing (optional),
                    function_token: FUNCTION_KW@130..139 "function" [] [Whitespace(" ")],
                    star_token: missing (optional),
                    id: JsIdentifierBinding {
                        name_token: IDENT@139..140 "e" [] [],
                    },
                    type_parameters: missing (optional),
                    parameters: JsParameters {
                        l_paren_token: L_PAREN@140..141 "(" [] [],
                        items: JsParameterList [],
                        r_paren_token: R_PAREN@141..143 ")" [] [Whitespace(" ")],
                    },
                    return_type_annotation: missing (optional),
                    body: JsFunctionBody {
                        l_curly_token: L_CURLY@143..144 "{" [] [],
                        directives: JsDirectiveList [],
                        statements: JsStatementList [],
                        r_curly_token: R_CURLY@144..145 "}" [] [],
                    },
                },
            },
        },
    ],
    eof_token: EOF@145..146 "" [Newline("\n")] [],
}

0: JS_SCRIPT@0..146
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_STATEMENT_LIST@0..145
    0: JS_LABELED_STATEMENT@0..33
      0: IDENT@0..16 "label1" [Comments("// SCRIPT"), Newline("\n")] []
      1: COLON@16..18 ":" [] [Whitespace(" ")]
      2: JS_FUNCTION_DECLARATION@18..33
        0: (empty)
        1: FUNCTION_KW@18..27 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@27..28
          0: IDENT@27..28 "a" [] []
        4: (empty)
        5: JS_PARAMETERS@28..31
          0: L_PAREN@28..29 "(" [] []
          1: JS_PARAMETER_LIST@29..29
          2: R_PAREN@29..31 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@31..33
          0: L_CURLY@31..32 "{" [] []
          1: JS_DIRECTIVE_LIST@32..32
          2: JS_STATEMENT_LIST@32..32
          3: R_CURLY@32..33 "}" [] []
    1: JS_IF_STATEMENT@33..80
      0: IF_KW@33..37 "if" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@37..38 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@38..42
        0: TRUE_KW@38..42 "true" [] []
      3: R_PAREN@42..44 ")" [] [Whitespace(" ")]
      4: JS_FUNCTION_DECLARATION@44..60
        0: (empty)
        1: FUNCTION_KW@44..53 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@53..54
          0: IDENT@53..54 "b" [] []
        4: (empty)
        5: JS_PARAMETERS@54..57
          0: L_PAREN@54..55 "(" [] []
          1: JS_PARAMETER_LIST@55..55
          2: R_PAREN@55..57 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@57..60
          0: L_CURLY@57..58 "{" [] []
          1: JS_DIRECTIVE_LIST@58..58
          2: JS_STATEMENT_LIST@58..58
          3: R_CURLY@58..60 "}" [] [Whitespace(" ")]
      5: JS_ELSE_CLAUSE@60..80
        0: ELSE_KW@60..65 "else" [] [Whitespace(" ")]
        1: JS_FUNCTION_DECLARATION@65..80
          0: (empty)
          1: FUNCTION_KW@65..74 "function" [] [Whitespace(" ")]
          2: (empty)
          3: JS_IDENTIFIER_BINDING@74..75
            0: IDENT@74..75 "c" [] []
          4: (empty)
          5: JS_PARAMETERS@75..78
            0: L_PAREN@75..76 "(" [] []
            1: JS_PARAMETER_LIST@76..76
            2: R_PAREN@76..78 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@78..80
            0: L_CURLY@78..79 "{" [] []
            1: JS_DIRECTIVE_LIST@79..79
            2: JS_STATEMENT_LIST@79..79
            3: R_CURLY@79..80 "}" [] []
    2: JS_IF_STATEMENT@80..106
      0: IF_KW@80..84 "if" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@84..85 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@85..89
        0: TRUE_KW@85..89 "true" [] []
      3: R_PAREN@89..91 ")" [] [Whitespace(" ")]
      4: JS_FUNCTION_DECLARATION@91..106
        0: (empty)
        1: FUNCTION_KW@91..100 "function" [] [Whitespace(" ")]
        2: (empty)
        3: JS_IDENTIFIER_BINDING@100..101
          0: IDENT@100..101 "d" [] []
        4: (empty)
        5: JS_PARAMETERS@101..104
          0: L_PAREN@101..102 "(" [] []
          1: JS_PARAMETER_LIST@102..102
          2: R_PAREN@102..104 ")" [] [Whitespace(" ")]
        6: (empty)
        7: JS_FUNCTION_BODY@104..106
          0: L_CURLY@104..105 "{" [] []
          1: JS_DIRECTIVE_LIST@105..105
          2: JS_STATEMENT_LIST@105..105
          3: R_CURLY@105..106 "}" [] []
      5: (empty)
    3: JS_IF_STATEMENT@106..145
      0: IF_KW@106..110 "if" [Newline("\n")] [Whitespace(" ")]
      1: L_PAREN@110..111 "(" [] []
      2: JS_BOOLEAN_LITERAL_EXPRESSION@111..115
        0: TRUE_KW@111..115 "true" [] []
      3: R_PAREN@115..117 ")" [] [Whitespace(" ")]
      4: JS_EXPRESSION_STATEMENT@117..125
        0: JS_STRING_LITERAL_EXPRESSION@117..123
          0: JS_STRING_LITERAL@117..123 "\"test\"" [] []
        1: SEMICOLON@123..125 ";" [] [Whitespace(" ")]
      5: JS_ELSE_CLAUSE@125..145
        0: ELSE_KW@125..130 "else" [] [Whitespace(" ")]
        1: JS_FUNCTION_DECLARATION@130..145
          0: (empty)
          1: FUNCTION_KW@130..139 "function" [] [Whitespace(" ")]
          2: (empty)
          3: JS_IDENTIFIER_BINDING@139..140
            0: IDENT@139..140 "e" [] []
          4: (empty)
          5: JS_PARAMETERS@140..143
            0: L_PAREN@140..141 "(" [] []
            1: JS_PARAMETER_LIST@141..141
            2: R_PAREN@141..143 ")" [] [Whitespace(" ")]
          6: (empty)
          7: JS_FUNCTION_BODY@143..145
            0: L_CURLY@143..144 "{" [] []
            1: JS_DIRECTIVE_LIST@144..144
            2: JS_STATEMENT_LIST@144..144
            3: R_CURLY@144..145 "}" [] []
  3: EOF@145..146 "" [Newline("\n")] []
