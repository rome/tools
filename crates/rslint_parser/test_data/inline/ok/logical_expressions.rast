JsRoot {
    interpreter_token: None,
    directives: [],
    statements: [
        JsExpressionStatement(
            JsExpressionStatement {
                expression: Ok(
                    JsLogicalExpression(
                        JsLogicalExpression {
                            left: Ok(
                                JsReferenceIdentifierExpression(
                                    JsReferenceIdentifierExpression {
                                        name_token: Ok(
                                            IDENT@0..4 "foo" [] [Whitespace(" ")],
                                        ),
                                    },
                                ),
                            ),
                            operator: Ok(
                                QUESTION2@4..7 "??" [] [Whitespace(" ")],
                            ),
                        },
                    ),
                ),
                semicolon_token: None,
            },
        ),
        JsExpressionStatement(
            JsExpressionStatement {
                expression: Ok(
                    JsLogicalExpression(
                        JsLogicalExpression {
                            left: Ok(
                                JsReferenceIdentifierExpression(
                                    JsReferenceIdentifierExpression {
                                        name_token: Ok(
                                            IDENT@10..13 "a" [Whitespace("\n")] [Whitespace(" ")],
                                        ),
                                    },
                                ),
                            ),
                            operator: Ok(
                                PIPE2@13..16 "||" [] [Whitespace(" ")],
                            ),
                        },
                    ),
                ),
                semicolon_token: None,
            },
        ),
        JsExpressionStatement(
            JsExpressionStatement {
                expression: Ok(
                    JsLogicalExpression(
                        JsLogicalExpression {
                            left: Ok(
                                JsReferenceIdentifierExpression(
                                    JsReferenceIdentifierExpression {
                                        name_token: Ok(
                                            IDENT@17..20 "a" [Whitespace("\n")] [Whitespace(" ")],
                                        ),
                                    },
                                ),
                            ),
                            operator: Ok(
                                AMP2@20..23 "&&" [] [Whitespace(" ")],
                            ),
                        },
                    ),
                ),
                semicolon_token: None,
            },
        ),
    ],
}

0: JS_ROOT@0..25
  0: (empty)
  1: LIST@0..0
  2: LIST@0..24
    0: JS_EXPRESSION_STATEMENT@0..10
      0: JS_LOGICAL_EXPRESSION@0..10
        0: JS_REFERENCE_IDENTIFIER_EXPRESSION@0..4
          0: IDENT@0..4 "foo" [] [Whitespace(" ")]
        1: QUESTION2@4..7 "??" [] [Whitespace(" ")]
        2: JS_REFERENCE_IDENTIFIER_EXPRESSION@7..10
          0: IDENT@7..10 "bar" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@10..17
      0: JS_LOGICAL_EXPRESSION@10..17
        0: JS_REFERENCE_IDENTIFIER_EXPRESSION@10..13
          0: IDENT@10..13 "a" [Whitespace("\n")] [Whitespace(" ")]
        1: PIPE2@13..16 "||" [] [Whitespace(" ")]
        2: JS_REFERENCE_IDENTIFIER_EXPRESSION@16..17
          0: IDENT@16..17 "b" [] []
      1: (empty)
    2: JS_EXPRESSION_STATEMENT@17..24
      0: JS_LOGICAL_EXPRESSION@17..24
        0: JS_REFERENCE_IDENTIFIER_EXPRESSION@17..20
          0: IDENT@17..20 "a" [Whitespace("\n")] [Whitespace(" ")]
        1: AMP2@20..23 "&&" [] [Whitespace(" ")]
        2: JS_REFERENCE_IDENTIFIER_EXPRESSION@23..24
          0: IDENT@23..24 "b" [] []
      1: (empty)
  3: EOF@24..25 "" [Whitespace("\n")] []
