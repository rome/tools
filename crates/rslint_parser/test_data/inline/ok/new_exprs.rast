JsRoot {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsExpressionStatement {
            expression: NewExpr {
                new_token: NEW_KW@0..4 "new" [] [Whitespace(" ")],
                type_args: missing (optional),
                object: JsReferenceIdentifierExpression {
                    name_token: IDENT@4..7 "Foo" [] [],
                },
                arguments: ArgList {
                    l_paren_token: L_PAREN@7..8 "(" [] [],
                    args: [],
                    r_paren_token: R_PAREN@8..9 ")" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: NewExpr {
                new_token: NEW_KW@9..14 "new" [Whitespace("\n")] [Whitespace(" ")],
                type_args: missing (optional),
                object: JsReferenceIdentifierExpression {
                    name_token: IDENT@14..17 "foo" [] [],
                },
                arguments: missing (required),
            },
            semicolon_token: SEMICOLON@17..18 ";" [] [],
        },
        JsExpressionStatement {
            expression: NewTarget {
                new_token: NEW_KW@18..22 "new" [Whitespace("\n")] [],
                dot_token: DOT@22..23 "." [] [],
                target_token: missing (required),
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: NewExpr {
                new_token: NEW_KW@29..34 "new" [Whitespace("\n")] [Whitespace(" ")],
                type_args: missing (optional),
                object: NewExpr {
                    new_token: NEW_KW@34..38 "new" [] [Whitespace(" ")],
                    type_args: missing (optional),
                    object: NewExpr {
                        new_token: NEW_KW@38..42 "new" [] [Whitespace(" ")],
                        type_args: missing (optional),
                        object: NewExpr {
                            new_token: NEW_KW@42..46 "new" [] [Whitespace(" ")],
                            type_args: missing (optional),
                            object: JsReferenceIdentifierExpression {
                                name_token: IDENT@46..49 "Foo" [] [],
                            },
                            arguments: ArgList {
                                l_paren_token: L_PAREN@49..50 "(" [] [],
                                args: [],
                                r_paren_token: R_PAREN@50..51 ")" [] [],
                            },
                        },
                        arguments: missing (required),
                    },
                    arguments: missing (required),
                },
                arguments: missing (required),
            },
            semicolon_token: SEMICOLON@51..52 ";" [] [],
        },
        JsExpressionStatement {
            expression: NewExpr {
                new_token: NEW_KW@52..57 "new" [Whitespace("\n")] [Whitespace(" ")],
                type_args: missing (optional),
                object: JsReferenceIdentifierExpression {
                    name_token: IDENT@57..60 "Foo" [] [],
                },
                arguments: ArgList {
                    l_paren_token: L_PAREN@60..61 "(" [] [],
                    args: [
                        JsReferenceIdentifierExpression {
                            name_token: IDENT@61..64 "bar" [] [],
                        },
                        COMMA@64..66 "," [] [Whitespace(" ")],
                        JsReferenceIdentifierExpression {
                            name_token: IDENT@66..69 "baz" [] [],
                        },
                        COMMA@69..71 "," [] [Whitespace(" ")],
                        JsBinaryExpression {
                            left: JsNumberLiteralExpression {
                                value_token: JS_NUMBER_LITERAL@71..73 "6" [] [Whitespace(" ")],
                            },
                            operator: PLUS@73..75 "+" [] [Whitespace(" ")],
                        },
                        COMMA@76..78 "," [] [Whitespace(" ")],
                        JsBinaryExpression {
                            left: JsComputedMemberExpression {
                                object: JsReferenceIdentifierExpression {
                                    name_token: IDENT@78..81 "foo" [] [],
                                },
                                optional_chain_token_token: missing (optional),
                                l_brack_token: L_BRACK@81..82 "[" [] [],
                                r_brack_token: R_BRACK@85..87 "]" [] [Whitespace(" ")],
                            },
                            operator: PLUS@87..89 "+" [] [Whitespace(" ")],
                        },
                    ],
                    r_paren_token: R_PAREN@111..112 ")" [] [],
                },
            },
            semicolon_token: missing (optional),
        },
    ],
}

0: JS_ROOT@0..113
  0: (empty)
  1: LIST@0..0
  2: LIST@0..112
    0: JS_EXPRESSION_STATEMENT@0..9
      0: NEW_EXPR@0..9
        0: NEW_KW@0..4 "new" [] [Whitespace(" ")]
        1: JS_REFERENCE_IDENTIFIER_EXPRESSION@4..7
          0: IDENT@4..7 "Foo" [] []
        2: ARG_LIST@7..9
          0: L_PAREN@7..8 "(" [] []
          1: LIST@8..8
          2: R_PAREN@8..9 ")" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@9..18
      0: NEW_EXPR@9..17
        0: NEW_KW@9..14 "new" [Whitespace("\n")] [Whitespace(" ")]
        1: JS_REFERENCE_IDENTIFIER_EXPRESSION@14..17
          0: IDENT@14..17 "foo" [] []
      1: SEMICOLON@17..18 ";" [] []
    2: JS_EXPRESSION_STATEMENT@18..29
      0: NEW_TARGET@18..29
        0: NEW_KW@18..22 "new" [Whitespace("\n")] []
        1: DOT@22..23 "." [] []
        2: IDENT@23..29 "target" [] []
      1: (empty)
    3: JS_EXPRESSION_STATEMENT@29..52
      0: NEW_EXPR@29..51
        0: NEW_KW@29..34 "new" [Whitespace("\n")] [Whitespace(" ")]
        1: NEW_EXPR@34..51
          0: NEW_KW@34..38 "new" [] [Whitespace(" ")]
          1: NEW_EXPR@38..51
            0: NEW_KW@38..42 "new" [] [Whitespace(" ")]
            1: NEW_EXPR@42..51
              0: NEW_KW@42..46 "new" [] [Whitespace(" ")]
              1: JS_REFERENCE_IDENTIFIER_EXPRESSION@46..49
                0: IDENT@46..49 "Foo" [] []
              2: ARG_LIST@49..51
                0: L_PAREN@49..50 "(" [] []
                1: LIST@50..50
                2: R_PAREN@50..51 ")" [] []
      1: SEMICOLON@51..52 ";" [] []
    4: JS_EXPRESSION_STATEMENT@52..112
      0: NEW_EXPR@52..112
        0: NEW_KW@52..57 "new" [Whitespace("\n")] [Whitespace(" ")]
        1: JS_REFERENCE_IDENTIFIER_EXPRESSION@57..60
          0: IDENT@57..60 "Foo" [] []
        2: ARG_LIST@60..112
          0: L_PAREN@60..61 "(" [] []
          1: LIST@61..111
            0: JS_REFERENCE_IDENTIFIER_EXPRESSION@61..64
              0: IDENT@61..64 "bar" [] []
            1: COMMA@64..66 "," [] [Whitespace(" ")]
            2: JS_REFERENCE_IDENTIFIER_EXPRESSION@66..69
              0: IDENT@66..69 "baz" [] []
            3: COMMA@69..71 "," [] [Whitespace(" ")]
            4: JS_BINARY_EXPRESSION@71..76
              0: JS_NUMBER_LITERAL_EXPRESSION@71..73
                0: JS_NUMBER_LITERAL@71..73 "6" [] [Whitespace(" ")]
              1: PLUS@73..75 "+" [] [Whitespace(" ")]
              2: JS_NUMBER_LITERAL_EXPRESSION@75..76
                0: JS_NUMBER_LITERAL@75..76 "6" [] []
            5: COMMA@76..78 "," [] [Whitespace(" ")]
            6: JS_BINARY_EXPRESSION@78..111
              0: JS_COMPUTED_MEMBER_EXPRESSION@78..87
                0: JS_REFERENCE_IDENTIFIER_EXPRESSION@78..81
                  0: IDENT@78..81 "foo" [] []
                1: L_BRACK@81..82 "[" [] []
                2: JS_REFERENCE_IDENTIFIER_EXPRESSION@82..85
                  0: IDENT@82..85 "bar" [] []
                3: R_BRACK@85..87 "]" [] [Whitespace(" ")]
              1: PLUS@87..89 "+" [] [Whitespace(" ")]
              2: JS_BINARY_EXPRESSION@89..111
                0: JS_ARROW_FUNCTION_EXPRESSION@89..101
                  0: JS_PARAMETER_LIST@89..95
                    0: L_PAREN@89..90 "(" [] []
                    1: LIST@90..93
                      0: SINGLE_PATTERN@90..93
                        0: NAME@90..93
                          0: IDENT@90..93 "foo" [] []
                    2: R_PAREN@93..95 ")" [] [Whitespace(" ")]
                  1: FAT_ARROW@95..98 "=>" [] [Whitespace(" ")]
                  2: JS_FUNCTION_BODY@98..101
                    0: L_CURLY@98..99 "{" [] []
                    1: LIST@99..99
                    2: LIST@99..99
                    3: R_CURLY@99..101 "}" [] [Whitespace(" ")]
                1: STAR@101..103 "*" [] [Whitespace(" ")]
                2: JS_STATIC_MEMBER_EXPRESSION@103..111
                  0: JS_REFERENCE_IDENTIFIER_EXPRESSION@103..106
                    0: IDENT@103..106 "foo" [] []
                  1: QUESTIONDOT@106..108 "?." [] []
                  2: JS_REFERENCE_IDENTIFIER_MEMBER@108..111
                    0: IDENT@108..111 "bar" [] []
          2: R_PAREN@111..112 ")" [] []
      1: (empty)
  3: EOF@112..113 "" [Whitespace("\n")] []
