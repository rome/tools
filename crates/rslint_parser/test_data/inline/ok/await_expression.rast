JsModule {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsFunctionDeclaration {
            async_token: ASYNC_KW@0..6 "async" [] [Whitespace(" ")],
            function_token: FUNCTION_KW@6..15 "function" [] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@15..19 "test" [] [],
            },
            type_parameters: missing (optional),
            parameter_list: JsParameterList {
                l_paren_token: L_PAREN@19..20 "(" [] [],
                parameters: [],
                r_paren_token: R_PAREN@20..22 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@22..23 "{" [] [],
                directives: [],
                statements: [
                    JsExpressionStatement {
                        expression: JsAwaitExpression {
                            await_token: AWAIT_KW@23..31 "await" [Whitespace("\n\t")] [Whitespace(" ")],
                            argument: CallExpr {
                                type_args: missing (optional),
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@31..36 "inner" [] [],
                                    },
                                },
                                arguments: ArgList {
                                    l_paren_token: L_PAREN@36..37 "(" [] [],
                                    args: [],
                                    r_paren_token: R_PAREN@37..38 ")" [] [],
                                },
                            },
                        },
                        semicolon_token: SEMICOLON@38..39 ";" [] [],
                    },
                    JsExpressionStatement {
                        expression: JsBinaryExpression {
                            left: JsAwaitExpression {
                                await_token: AWAIT_KW@39..48 "await" [Whitespace("\n\n\t")] [Whitespace(" ")],
                                argument: JsParenthesizedExpression {
                                    l_paren_token: L_PAREN@48..49 "(" [] [],
                                    expression: CallExpr {
                                        type_args: missing (optional),
                                        callee: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@49..54 "inner" [] [],
                                            },
                                        },
                                        arguments: ArgList {
                                            l_paren_token: L_PAREN@54..55 "(" [] [],
                                            args: [],
                                            r_paren_token: R_PAREN@55..56 ")" [] [],
                                        },
                                    },
                                    r_paren_token: R_PAREN@56..58 ")" [] [Whitespace(" ")],
                                },
                            },
                            operator: PLUS@58..60 "+" [] [Whitespace(" ")],
                        },
                        semicolon_token: SEMICOLON@73..74 ";" [] [],
                    },
                ],
                r_curly_token: R_CURLY@74..76 "}" [Whitespace("\n")] [],
            },
        },
        JsFunctionDeclaration {
            async_token: ASYNC_KW@76..84 "async" [Whitespace("\n\n")] [Whitespace(" ")],
            function_token: FUNCTION_KW@84..93 "function" [] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@93..98 "inner" [] [],
            },
            type_parameters: missing (optional),
            parameter_list: JsParameterList {
                l_paren_token: L_PAREN@98..99 "(" [] [],
                parameters: [],
                r_paren_token: R_PAREN@99..101 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@101..102 "{" [] [],
                directives: [],
                statements: [
                    JsReturnStatement {
                        return_token: RETURN_KW@102..111 "return" [Whitespace("\n\t")] [Whitespace(" ")],
                        argument: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@111..112 "4" [] [],
                        },
                        semicolon_token: SEMICOLON@112..113 ";" [] [],
                    },
                ],
                r_curly_token: R_CURLY@113..115 "}" [Whitespace("\n")] [],
            },
        },
    ],
}

0: JS_MODULE@0..116
  0: (empty)
  1: LIST@0..0
  2: LIST@0..115
    0: JS_FUNCTION_DECLARATION@0..76
      0: ASYNC_KW@0..6 "async" [] [Whitespace(" ")]
      1: FUNCTION_KW@6..15 "function" [] [Whitespace(" ")]
      2: JS_IDENTIFIER_BINDING@15..19
        0: IDENT@15..19 "test" [] []
      3: (empty)
      4: JS_PARAMETER_LIST@19..22
        0: L_PAREN@19..20 "(" [] []
        1: LIST@20..20
        2: R_PAREN@20..22 ")" [] [Whitespace(" ")]
      5: (empty)
      6: JS_FUNCTION_BODY@22..76
        0: L_CURLY@22..23 "{" [] []
        1: LIST@23..23
        2: LIST@23..74
          0: JS_EXPRESSION_STATEMENT@23..39
            0: JS_AWAIT_EXPRESSION@23..38
              0: AWAIT_KW@23..31 "await" [Whitespace("\n\t")] [Whitespace(" ")]
              1: CALL_EXPR@31..38
                0: JS_IDENTIFIER_EXPRESSION@31..36
                  0: JS_REFERENCE_IDENTIFIER@31..36
                    0: IDENT@31..36 "inner" [] []
                1: ARG_LIST@36..38
                  0: L_PAREN@36..37 "(" [] []
                  1: LIST@37..37
                  2: R_PAREN@37..38 ")" [] []
            1: SEMICOLON@38..39 ";" [] []
          1: JS_EXPRESSION_STATEMENT@39..74
            0: JS_BINARY_EXPRESSION@39..73
              0: JS_AWAIT_EXPRESSION@39..58
                0: AWAIT_KW@39..48 "await" [Whitespace("\n\n\t")] [Whitespace(" ")]
                1: JS_PARENTHESIZED_EXPRESSION@48..58
                  0: L_PAREN@48..49 "(" [] []
                  1: CALL_EXPR@49..56
                    0: JS_IDENTIFIER_EXPRESSION@49..54
                      0: JS_REFERENCE_IDENTIFIER@49..54
                        0: IDENT@49..54 "inner" [] []
                    1: ARG_LIST@54..56
                      0: L_PAREN@54..55 "(" [] []
                      1: LIST@55..55
                      2: R_PAREN@55..56 ")" [] []
                  2: R_PAREN@56..58 ")" [] [Whitespace(" ")]
              1: PLUS@58..60 "+" [] [Whitespace(" ")]
              2: JS_AWAIT_EXPRESSION@60..73
                0: AWAIT_KW@60..66 "await" [] [Whitespace(" ")]
                1: CALL_EXPR@66..73
                  0: JS_IDENTIFIER_EXPRESSION@66..71
                    0: JS_REFERENCE_IDENTIFIER@66..71
                      0: IDENT@66..71 "inner" [] []
                  1: ARG_LIST@71..73
                    0: L_PAREN@71..72 "(" [] []
                    1: LIST@72..72
                    2: R_PAREN@72..73 ")" [] []
            1: SEMICOLON@73..74 ";" [] []
        3: R_CURLY@74..76 "}" [Whitespace("\n")] []
    1: JS_FUNCTION_DECLARATION@76..115
      0: ASYNC_KW@76..84 "async" [Whitespace("\n\n")] [Whitespace(" ")]
      1: FUNCTION_KW@84..93 "function" [] [Whitespace(" ")]
      2: JS_IDENTIFIER_BINDING@93..98
        0: IDENT@93..98 "inner" [] []
      3: (empty)
      4: JS_PARAMETER_LIST@98..101
        0: L_PAREN@98..99 "(" [] []
        1: LIST@99..99
        2: R_PAREN@99..101 ")" [] [Whitespace(" ")]
      5: (empty)
      6: JS_FUNCTION_BODY@101..115
        0: L_CURLY@101..102 "{" [] []
        1: LIST@102..102
        2: LIST@102..113
          0: JS_RETURN_STATEMENT@102..113
            0: RETURN_KW@102..111 "return" [Whitespace("\n\t")] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@111..112
              0: JS_NUMBER_LITERAL@111..112 "4" [] []
            2: SEMICOLON@112..113 ";" [] []
        3: R_CURLY@113..115 "}" [Whitespace("\n")] []
  3: EOF@115..116 "" [Whitespace("\n")] []
