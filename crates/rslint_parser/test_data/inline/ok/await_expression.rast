JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsFunctionStatement {
            async_token: ASYNC_KW@0..6 "async" [] [Whitespace(" ")],
            function_token: FUNCTION_KW@6..15 "function" [] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@15..19 "test" [] [],
            },
            type_parameters: missing (optional),
            parameters: JsParameters {
                l_paren_token: L_PAREN@19..20 "(" [] [],
                items: JsParameterList [],
                r_paren_token: R_PAREN@20..22 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@22..23 "{" [] [],
                directives: JsDirectiveList [],
                statements: JsStatementList [
                    JsExpressionStatement {
                        expression: JsAwaitExpression {
                            await_token: AWAIT_KW@23..31 "await" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                            argument: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@31..36 "inner" [] [],
                                    },
                                },
                                optional_chain_token_token: missing (optional),
                                type_args: missing (optional),
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@36..37 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@37..38 ")" [] [],
                                },
                            },
                        },
                        semicolon_token: SEMICOLON@38..39 ";" [] [],
                    },
                    JsExpressionStatement {
                        expression: JsBinaryExpression {
                            left: JsAwaitExpression {
                                await_token: AWAIT_KW@39..47 "await" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                                argument: JsParenthesizedExpression {
                                    l_paren_token: L_PAREN@47..48 "(" [] [],
                                    expression: JsCallExpression {
                                        callee: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@48..53 "inner" [] [],
                                            },
                                        },
                                        optional_chain_token_token: missing (optional),
                                        type_args: missing (optional),
                                        arguments: JsCallArguments {
                                            l_paren_token: L_PAREN@53..54 "(" [] [],
                                            args: JsCallArgumentList [],
                                            r_paren_token: R_PAREN@54..55 ")" [] [],
                                        },
                                    },
                                    r_paren_token: R_PAREN@55..57 ")" [] [Whitespace(" ")],
                                },
                            },
                            operator: PLUS@57..59 "+" [] [Whitespace(" ")],
                            right: JsAwaitExpression {
                                await_token: AWAIT_KW@59..65 "await" [] [Whitespace(" ")],
                                argument: JsCallExpression {
                                    callee: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@65..70 "inner" [] [],
                                        },
                                    },
                                    optional_chain_token_token: missing (optional),
                                    type_args: missing (optional),
                                    arguments: JsCallArguments {
                                        l_paren_token: L_PAREN@70..71 "(" [] [],
                                        args: JsCallArgumentList [],
                                        r_paren_token: R_PAREN@71..72 ")" [] [],
                                    },
                                },
                            },
                        },
                        semicolon_token: SEMICOLON@72..73 ";" [] [],
                    },
                ],
                r_curly_token: R_CURLY@73..75 "}" [Newline("\n")] [],
            },
        },
        JsFunctionStatement {
            async_token: ASYNC_KW@75..82 "async" [Newline("\n")] [Whitespace(" ")],
            function_token: FUNCTION_KW@82..91 "function" [] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@91..96 "inner" [] [],
            },
            type_parameters: missing (optional),
            parameters: JsParameters {
                l_paren_token: L_PAREN@96..97 "(" [] [],
                items: JsParameterList [],
                r_paren_token: R_PAREN@97..99 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@99..100 "{" [] [],
                directives: JsDirectiveList [],
                statements: JsStatementList [
                    JsReturnStatement {
                        return_token: RETURN_KW@100..109 "return" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")],
                        argument: JsNumberLiteralExpression {
                            value_token: JS_NUMBER_LITERAL@109..110 "4" [] [],
                        },
                        semicolon_token: SEMICOLON@110..111 ";" [] [],
                    },
                ],
                r_curly_token: R_CURLY@111..113 "}" [Newline("\n")] [],
            },
        },
        JsExpressionStatement {
            expression: JsAwaitExpression {
                await_token: AWAIT_KW@113..120 "await" [Newline("\n")] [Whitespace(" ")],
                argument: JsCallExpression {
                    callee: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@120..124 "test" [] [],
                        },
                    },
                    optional_chain_token_token: missing (optional),
                    type_args: missing (optional),
                    arguments: JsCallArguments {
                        l_paren_token: L_PAREN@124..125 "(" [] [],
                        args: JsCallArgumentList [],
                        r_paren_token: R_PAREN@125..126 ")" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@126..127 ";" [] [],
        },
    ],
    eof_token: EOF@127..128 "" [Newline("\n")] [],
}

0: JS_MODULE@0..128
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..127
    0: JS_FUNCTION_STATEMENT@0..75
      0: ASYNC_KW@0..6 "async" [] [Whitespace(" ")]
      1: FUNCTION_KW@6..15 "function" [] [Whitespace(" ")]
      2: (empty)
      3: JS_IDENTIFIER_BINDING@15..19
        0: IDENT@15..19 "test" [] []
      4: (empty)
      5: JS_PARAMETERS@19..22
        0: L_PAREN@19..20 "(" [] []
        1: JS_PARAMETER_LIST@20..20
        2: R_PAREN@20..22 ")" [] [Whitespace(" ")]
      6: (empty)
      7: JS_FUNCTION_BODY@22..75
        0: L_CURLY@22..23 "{" [] []
        1: JS_DIRECTIVE_LIST@23..23
        2: JS_STATEMENT_LIST@23..73
          0: JS_EXPRESSION_STATEMENT@23..39
            0: JS_AWAIT_EXPRESSION@23..38
              0: AWAIT_KW@23..31 "await" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@31..38
                0: JS_IDENTIFIER_EXPRESSION@31..36
                  0: JS_REFERENCE_IDENTIFIER@31..36
                    0: IDENT@31..36 "inner" [] []
                1: (empty)
                2: (empty)
                3: JS_CALL_ARGUMENTS@36..38
                  0: L_PAREN@36..37 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@37..37
                  2: R_PAREN@37..38 ")" [] []
            1: SEMICOLON@38..39 ";" [] []
          1: JS_EXPRESSION_STATEMENT@39..73
            0: JS_BINARY_EXPRESSION@39..72
              0: JS_AWAIT_EXPRESSION@39..57
                0: AWAIT_KW@39..47 "await" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
                1: JS_PARENTHESIZED_EXPRESSION@47..57
                  0: L_PAREN@47..48 "(" [] []
                  1: JS_CALL_EXPRESSION@48..55
                    0: JS_IDENTIFIER_EXPRESSION@48..53
                      0: JS_REFERENCE_IDENTIFIER@48..53
                        0: IDENT@48..53 "inner" [] []
                    1: (empty)
                    2: (empty)
                    3: JS_CALL_ARGUMENTS@53..55
                      0: L_PAREN@53..54 "(" [] []
                      1: JS_CALL_ARGUMENT_LIST@54..54
                      2: R_PAREN@54..55 ")" [] []
                  2: R_PAREN@55..57 ")" [] [Whitespace(" ")]
              1: PLUS@57..59 "+" [] [Whitespace(" ")]
              2: JS_AWAIT_EXPRESSION@59..72
                0: AWAIT_KW@59..65 "await" [] [Whitespace(" ")]
                1: JS_CALL_EXPRESSION@65..72
                  0: JS_IDENTIFIER_EXPRESSION@65..70
                    0: JS_REFERENCE_IDENTIFIER@65..70
                      0: IDENT@65..70 "inner" [] []
                  1: (empty)
                  2: (empty)
                  3: JS_CALL_ARGUMENTS@70..72
                    0: L_PAREN@70..71 "(" [] []
                    1: JS_CALL_ARGUMENT_LIST@71..71
                    2: R_PAREN@71..72 ")" [] []
            1: SEMICOLON@72..73 ";" [] []
        3: R_CURLY@73..75 "}" [Newline("\n")] []
    1: JS_FUNCTION_STATEMENT@75..113
      0: ASYNC_KW@75..82 "async" [Newline("\n")] [Whitespace(" ")]
      1: FUNCTION_KW@82..91 "function" [] [Whitespace(" ")]
      2: (empty)
      3: JS_IDENTIFIER_BINDING@91..96
        0: IDENT@91..96 "inner" [] []
      4: (empty)
      5: JS_PARAMETERS@96..99
        0: L_PAREN@96..97 "(" [] []
        1: JS_PARAMETER_LIST@97..97
        2: R_PAREN@97..99 ")" [] [Whitespace(" ")]
      6: (empty)
      7: JS_FUNCTION_BODY@99..113
        0: L_CURLY@99..100 "{" [] []
        1: JS_DIRECTIVE_LIST@100..100
        2: JS_STATEMENT_LIST@100..111
          0: JS_RETURN_STATEMENT@100..111
            0: RETURN_KW@100..109 "return" [Newline("\n"), Whitespace("\t")] [Whitespace(" ")]
            1: JS_NUMBER_LITERAL_EXPRESSION@109..110
              0: JS_NUMBER_LITERAL@109..110 "4" [] []
            2: SEMICOLON@110..111 ";" [] []
        3: R_CURLY@111..113 "}" [Newline("\n")] []
    2: JS_EXPRESSION_STATEMENT@113..127
      0: JS_AWAIT_EXPRESSION@113..126
        0: AWAIT_KW@113..120 "await" [Newline("\n")] [Whitespace(" ")]
        1: JS_CALL_EXPRESSION@120..126
          0: JS_IDENTIFIER_EXPRESSION@120..124
            0: JS_REFERENCE_IDENTIFIER@120..124
              0: IDENT@120..124 "test" [] []
          1: (empty)
          2: (empty)
          3: JS_CALL_ARGUMENTS@124..126
            0: L_PAREN@124..125 "(" [] []
            1: JS_CALL_ARGUMENT_LIST@125..125
            2: R_PAREN@125..126 ")" [] []
      1: SEMICOLON@126..127 ";" [] []
  3: EOF@127..128 "" [Newline("\n")] []
