JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsExpressionStatement {
            expression: JsNumberLiteralExpression {
                value_token: JS_NUMBER_LITERAL@0..1 "5" [] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBooleanLiteralExpression {
                value_token: TRUE_KW@1..6 "true" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBooleanLiteralExpression {
                value_token: FALSE_KW@6..12 "false" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBigIntLiteralExpression {
                value_token: JS_BIG_INT_LITERAL@12..15 "5n" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsStringLiteralExpression {
                value_token: JS_STRING_LITERAL@15..21 "\"foo\"" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsStringLiteralExpression {
                value_token: JS_STRING_LITERAL@21..27 "'bar'" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsNullLiteralExpression {
                value_token: NULL_KW@27..32 "null" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsNumberLiteralExpression {
                value_token: JS_NUMBER_LITERAL@32..34 "0" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsNumberLiteralExpression {
                value_token: JS_NUMBER_LITERAL@34..38 "0.0" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBigIntLiteralExpression {
                value_token: JS_BIG_INT_LITERAL@38..41 "0n" [Newline("\n")] [],
            },
            semicolon_token: missing (optional),
        },
    ],
    eof_token: EOF@41..42 "" [Newline("\n")] [],
}

0: JS_MODULE@0..42
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..41
    0: JS_EXPRESSION_STATEMENT@0..1
      0: JS_NUMBER_LITERAL_EXPRESSION@0..1
        0: JS_NUMBER_LITERAL@0..1 "5" [] []
      1: (empty)
    1: JS_EXPRESSION_STATEMENT@1..6
      0: JS_BOOLEAN_LITERAL_EXPRESSION@1..6
        0: TRUE_KW@1..6 "true" [Newline("\n")] []
      1: (empty)
    2: JS_EXPRESSION_STATEMENT@6..12
      0: JS_BOOLEAN_LITERAL_EXPRESSION@6..12
        0: FALSE_KW@6..12 "false" [Newline("\n")] []
      1: (empty)
    3: JS_EXPRESSION_STATEMENT@12..15
      0: JS_BIG_INT_LITERAL_EXPRESSION@12..15
        0: JS_BIG_INT_LITERAL@12..15 "5n" [Newline("\n")] []
      1: (empty)
    4: JS_EXPRESSION_STATEMENT@15..21
      0: JS_STRING_LITERAL_EXPRESSION@15..21
        0: JS_STRING_LITERAL@15..21 "\"foo\"" [Newline("\n")] []
      1: (empty)
    5: JS_EXPRESSION_STATEMENT@21..27
      0: JS_STRING_LITERAL_EXPRESSION@21..27
        0: JS_STRING_LITERAL@21..27 "'bar'" [Newline("\n")] []
      1: (empty)
    6: JS_EXPRESSION_STATEMENT@27..32
      0: JS_NULL_LITERAL_EXPRESSION@27..32
        0: NULL_KW@27..32 "null" [Newline("\n")] []
      1: (empty)
    7: JS_EXPRESSION_STATEMENT@32..34
      0: JS_NUMBER_LITERAL_EXPRESSION@32..34
        0: JS_NUMBER_LITERAL@32..34 "0" [Newline("\n")] []
      1: (empty)
    8: JS_EXPRESSION_STATEMENT@34..38
      0: JS_NUMBER_LITERAL_EXPRESSION@34..38
        0: JS_NUMBER_LITERAL@34..38 "0.0" [Newline("\n")] []
      1: (empty)
    9: JS_EXPRESSION_STATEMENT@38..41
      0: JS_BIG_INT_LITERAL_EXPRESSION@38..41
        0: JS_BIG_INT_LITERAL@38..41 "0n" [Newline("\n")] []
      1: (empty)
  3: EOF@41..42 "" [Newline("\n")] []
