JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind: LET_KW@0..18 "let" [Comments("// TYPESCRIPT"), Newline("\n")] [Whitespace(" ")],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@18..19 "x" [] [],
                        },
                        excl_token: missing (optional),
                        type_annotation: TsTypeAnnotation {
                            colon_token: COLON@19..21 ":" [] [Whitespace(" ")],
                            ty: TsAnyType {
                                any_token: ANY_KW@21..25 "any" [] [Whitespace(" ")],
                            },
                        },
                        initializer: JsInitializerClause {
                            eq_token: EQ@25..27 "=" [] [Whitespace(" ")],
                            expression: JsStringLiteralExpression {
                                value_token: JS_STRING_LITERAL@27..35 "\"string\"" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@35..36 ";" [] [],
        },
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind: LET_KW@36..41 "let" [Newline("\n")] [Whitespace(" ")],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@41..43 "y" [] [Whitespace(" ")],
                        },
                        excl_token: missing (optional),
                        type_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@43..45 "=" [] [Whitespace(" ")],
                            expression: TsAsExpression {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@45..47 "x" [] [Whitespace(" ")],
                                    },
                                },
                                as_token: AS_KW@47..50 "as" [] [Whitespace(" ")],
                                ty: TsStringType {
                                    string_token: STRING_KW@50..56 "string" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@56..57 ";" [] [],
        },
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind: LET_KW@57..62 "let" [Newline("\n")] [Whitespace(" ")],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@62..64 "z" [] [Whitespace(" ")],
                        },
                        excl_token: missing (optional),
                        type_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@64..66 "=" [] [Whitespace(" ")],
                            expression: TsAsExpression {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@66..68 "x" [] [Whitespace(" ")],
                                    },
                                },
                                as_token: AS_KW@68..71 "as" [] [Whitespace(" ")],
                                ty: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@71..76 "const" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@76..77 ";" [] [],
        },
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind: LET_KW@77..82 "let" [Newline("\n")] [Whitespace(" ")],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@82..103 "not_an_as_expression" [] [Whitespace(" ")],
                        },
                        excl_token: missing (optional),
                        type_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@103..105 "=" [] [Whitespace(" ")],
                            expression: JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@105..106 "x" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsIdentifierExpression {
                name: JsReferenceIdentifier {
                    value_token: IDENT@106..109 "as" [Newline("\n")] [],
                },
            },
            semicolon_token: SEMICOLON@109..110 ";" [] [],
        },
        JsVariableStatement {
            declarations: JsVariableDeclarations {
                kind: LET_KW@110..115 "let" [Newline("\n")] [Whitespace(" ")],
                items: JsVariableDeclarationList [
                    JsVariableDeclaration {
                        id: JsIdentifierBinding {
                            name_token: IDENT@115..126 "precedence" [] [Whitespace(" ")],
                        },
                        excl_token: missing (optional),
                        type_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@126..128 "=" [] [Whitespace(" ")],
                            expression: TsAsExpression {
                                expression: TsAsExpression {
                                    expression: JsBinaryExpression {
                                        left: TsAsExpression {
                                            expression: JsStringLiteralExpression {
                                                value_token: JS_STRING_LITERAL@128..136 "\"hello\"" [] [Whitespace(" ")],
                                            },
                                            as_token: AS_KW@136..139 "as" [] [Whitespace(" ")],
                                            ty: TsReferenceType {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@139..145 "const" [] [Whitespace(" ")],
                                                },
                                                type_arguments: missing (optional),
                                            },
                                        },
                                        operator: PLUS@145..147 "+" [] [Whitespace(" ")],
                                        right: JsNumberLiteralExpression {
                                            value_token: JS_NUMBER_LITERAL@147..149 "3" [] [Whitespace(" ")],
                                        },
                                    },
                                    as_token: AS_KW@149..152 "as" [] [Whitespace(" ")],
                                    ty: TsNumberType {
                                        number_token: NUMBER_KW@152..159 "number" [] [Whitespace(" ")],
                                    },
                                },
                                as_token: AS_KW@159..162 "as" [] [Whitespace(" ")],
                                ty: TsNumberType {
                                    number_token: NUMBER_KW@162..168 "number" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@168..169 ";" [] [],
        },
    ],
    eof_token: EOF@169..170 "" [Newline("\n")] [],
}

0: JS_MODULE@0..170
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..169
    0: JS_VARIABLE_STATEMENT@0..36
      0: JS_VARIABLE_DECLARATIONS@0..35
        0: LET_KW@0..18 "let" [Comments("// TYPESCRIPT"), Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATION_LIST@18..35
          0: JS_VARIABLE_DECLARATION@18..35
            0: JS_IDENTIFIER_BINDING@18..19
              0: IDENT@18..19 "x" [] []
            1: (empty)
            2: TS_TYPE_ANNOTATION@19..25
              0: COLON@19..21 ":" [] [Whitespace(" ")]
              1: TS_ANY_TYPE@21..25
                0: ANY_KW@21..25 "any" [] [Whitespace(" ")]
            3: JS_INITIALIZER_CLAUSE@25..35
              0: EQ@25..27 "=" [] [Whitespace(" ")]
              1: JS_STRING_LITERAL_EXPRESSION@27..35
                0: JS_STRING_LITERAL@27..35 "\"string\"" [] []
      1: SEMICOLON@35..36 ";" [] []
    1: JS_VARIABLE_STATEMENT@36..57
      0: JS_VARIABLE_DECLARATIONS@36..56
        0: LET_KW@36..41 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATION_LIST@41..56
          0: JS_VARIABLE_DECLARATION@41..56
            0: JS_IDENTIFIER_BINDING@41..43
              0: IDENT@41..43 "y" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
            3: JS_INITIALIZER_CLAUSE@43..56
              0: EQ@43..45 "=" [] [Whitespace(" ")]
              1: TS_AS_EXPRESSION@45..56
                0: JS_IDENTIFIER_EXPRESSION@45..47
                  0: JS_REFERENCE_IDENTIFIER@45..47
                    0: IDENT@45..47 "x" [] [Whitespace(" ")]
                1: AS_KW@47..50 "as" [] [Whitespace(" ")]
                2: TS_STRING_TYPE@50..56
                  0: STRING_KW@50..56 "string" [] []
      1: SEMICOLON@56..57 ";" [] []
    2: JS_VARIABLE_STATEMENT@57..77
      0: JS_VARIABLE_DECLARATIONS@57..76
        0: LET_KW@57..62 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATION_LIST@62..76
          0: JS_VARIABLE_DECLARATION@62..76
            0: JS_IDENTIFIER_BINDING@62..64
              0: IDENT@62..64 "z" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
            3: JS_INITIALIZER_CLAUSE@64..76
              0: EQ@64..66 "=" [] [Whitespace(" ")]
              1: TS_AS_EXPRESSION@66..76
                0: JS_IDENTIFIER_EXPRESSION@66..68
                  0: JS_REFERENCE_IDENTIFIER@66..68
                    0: IDENT@66..68 "x" [] [Whitespace(" ")]
                1: AS_KW@68..71 "as" [] [Whitespace(" ")]
                2: TS_REFERENCE_TYPE@71..76
                  0: JS_REFERENCE_IDENTIFIER@71..76
                    0: IDENT@71..76 "const" [] []
                  1: (empty)
      1: SEMICOLON@76..77 ";" [] []
    3: JS_VARIABLE_STATEMENT@77..106
      0: JS_VARIABLE_DECLARATIONS@77..106
        0: LET_KW@77..82 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATION_LIST@82..106
          0: JS_VARIABLE_DECLARATION@82..106
            0: JS_IDENTIFIER_BINDING@82..103
              0: IDENT@82..103 "not_an_as_expression" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
            3: JS_INITIALIZER_CLAUSE@103..106
              0: EQ@103..105 "=" [] [Whitespace(" ")]
              1: JS_IDENTIFIER_EXPRESSION@105..106
                0: JS_REFERENCE_IDENTIFIER@105..106
                  0: IDENT@105..106 "x" [] []
      1: (empty)
    4: JS_EXPRESSION_STATEMENT@106..110
      0: JS_IDENTIFIER_EXPRESSION@106..109
        0: JS_REFERENCE_IDENTIFIER@106..109
          0: IDENT@106..109 "as" [Newline("\n")] []
      1: SEMICOLON@109..110 ";" [] []
    5: JS_VARIABLE_STATEMENT@110..169
      0: JS_VARIABLE_DECLARATIONS@110..168
        0: LET_KW@110..115 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATION_LIST@115..168
          0: JS_VARIABLE_DECLARATION@115..168
            0: JS_IDENTIFIER_BINDING@115..126
              0: IDENT@115..126 "precedence" [] [Whitespace(" ")]
            1: (empty)
            2: (empty)
            3: JS_INITIALIZER_CLAUSE@126..168
              0: EQ@126..128 "=" [] [Whitespace(" ")]
              1: TS_AS_EXPRESSION@128..168
                0: TS_AS_EXPRESSION@128..159
                  0: JS_BINARY_EXPRESSION@128..149
                    0: TS_AS_EXPRESSION@128..145
                      0: JS_STRING_LITERAL_EXPRESSION@128..136
                        0: JS_STRING_LITERAL@128..136 "\"hello\"" [] [Whitespace(" ")]
                      1: AS_KW@136..139 "as" [] [Whitespace(" ")]
                      2: TS_REFERENCE_TYPE@139..145
                        0: JS_REFERENCE_IDENTIFIER@139..145
                          0: IDENT@139..145 "const" [] [Whitespace(" ")]
                        1: (empty)
                    1: PLUS@145..147 "+" [] [Whitespace(" ")]
                    2: JS_NUMBER_LITERAL_EXPRESSION@147..149
                      0: JS_NUMBER_LITERAL@147..149 "3" [] [Whitespace(" ")]
                  1: AS_KW@149..152 "as" [] [Whitespace(" ")]
                  2: TS_NUMBER_TYPE@152..159
                    0: NUMBER_KW@152..159 "number" [] [Whitespace(" ")]
                1: AS_KW@159..162 "as" [] [Whitespace(" ")]
                2: TS_NUMBER_TYPE@162..168
                  0: NUMBER_KW@162..168 "number" [] []
      1: SEMICOLON@168..169 ";" [] []
  3: EOF@169..170 "" [Newline("\n")] []
