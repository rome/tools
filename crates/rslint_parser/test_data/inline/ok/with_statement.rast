JsScript {
    interpreter_token: missing (optional),
    directives: [],
    statements: [
        JsFunctionDeclaration {
            async_token: missing (optional),
            function_token: FUNCTION_KW@0..20 "function" [Comments("// SCRIPT"), Whitespace("\n\n")] [Whitespace(" ")],
            star_token: missing (optional),
            id: JsIdentifierBinding {
                name_token: IDENT@20..21 "f" [] [],
            },
            type_parameters: missing (optional),
            parameter_list: JsParameterList {
                l_paren_token: L_PAREN@21..22 "(" [] [],
                parameters: [
                    JsIdentifierBinding {
                        name_token: IDENT@22..23 "x" [] [],
                    },
                    COMMA@23..25 "," [] [Whitespace(" ")],
                    JsIdentifierBinding {
                        name_token: IDENT@25..26 "o" [] [],
                    },
                ],
                r_paren_token: R_PAREN@26..28 ")" [] [Whitespace(" ")],
            },
            return_type: missing (optional),
            body: JsFunctionBody {
                l_curly_token: L_CURLY@28..29 "{" [] [],
                directives: [],
                statements: [
                    JsWithStatement {
                        with_token: WITH_KW@29..36 "with" [Whitespace("\n\t")] [Whitespace(" ")],
                        l_paren_token: L_PAREN@36..37 "(" [] [],
                        object: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@37..38 "o" [] [],
                            },
                        },
                        r_paren_token: R_PAREN@38..40 ")" [] [Whitespace(" ")],
                        body: JsBlockStatement {
                            l_curly_token: L_CURLY@40..41 "{" [] [],
                            statements: [
                                JsExpressionStatement {
                                    expression: CallExpr {
                                        type_args: missing (optional),
                                        callee: JsStaticMemberExpression {
                                            object: JsIdentifierExpression {
                                                name: JsReferenceIdentifier {
                                                    value_token: IDENT@41..51 "console" [Whitespace("\n\t\t")] [],
                                                },
                                            },
                                            operator: DOT@51..52 "." [] [],
                                            member: JsName {
                                                value_token: IDENT@52..55 "log" [] [],
                                            },
                                        },
                                        arguments: ArgList {
                                            l_paren_token: L_PAREN@55..56 "(" [] [],
                                            args: [
                                                JsIdentifierExpression {
                                                    name: JsReferenceIdentifier {
                                                        value_token: IDENT@56..57 "x" [] [],
                                                    },
                                                },
                                            ],
                                            r_paren_token: R_PAREN@57..58 ")" [] [],
                                        },
                                    },
                                    semicolon_token: SEMICOLON@58..59 ";" [] [],
                                },
                            ],
                            r_curly_token: R_CURLY@59..62 "}" [Whitespace("\n\t")] [],
                        },
                    },
                ],
                r_curly_token: R_CURLY@62..64 "}" [Whitespace("\n")] [],
            },
        },
    ],
    eof_token: EOF@64..65 "" [Whitespace("\n")] [],
}

0: JS_SCRIPT@0..65
  0: (empty)
  1: LIST@0..0
  2: LIST@0..64
    0: JS_FUNCTION_DECLARATION@0..64
      0: (empty)
      1: FUNCTION_KW@0..20 "function" [Comments("// SCRIPT"), Whitespace("\n\n")] [Whitespace(" ")]
      2: (empty)
      3: JS_IDENTIFIER_BINDING@20..21
        0: IDENT@20..21 "f" [] []
      4: (empty)
      5: JS_PARAMETER_LIST@21..28
        0: L_PAREN@21..22 "(" [] []
        1: LIST@22..26
          0: JS_IDENTIFIER_BINDING@22..23
            0: IDENT@22..23 "x" [] []
          1: COMMA@23..25 "," [] [Whitespace(" ")]
          2: JS_IDENTIFIER_BINDING@25..26
            0: IDENT@25..26 "o" [] []
        2: R_PAREN@26..28 ")" [] [Whitespace(" ")]
      6: (empty)
      7: JS_FUNCTION_BODY@28..64
        0: L_CURLY@28..29 "{" [] []
        1: LIST@29..29
        2: LIST@29..62
          0: JS_WITH_STATEMENT@29..62
            0: WITH_KW@29..36 "with" [Whitespace("\n\t")] [Whitespace(" ")]
            1: L_PAREN@36..37 "(" [] []
            2: JS_IDENTIFIER_EXPRESSION@37..38
              0: JS_REFERENCE_IDENTIFIER@37..38
                0: IDENT@37..38 "o" [] []
            3: R_PAREN@38..40 ")" [] [Whitespace(" ")]
            4: JS_BLOCK_STATEMENT@40..62
              0: L_CURLY@40..41 "{" [] []
              1: LIST@41..59
                0: JS_EXPRESSION_STATEMENT@41..59
                  0: CALL_EXPR@41..58
                    0: JS_STATIC_MEMBER_EXPRESSION@41..55
                      0: JS_IDENTIFIER_EXPRESSION@41..51
                        0: JS_REFERENCE_IDENTIFIER@41..51
                          0: IDENT@41..51 "console" [Whitespace("\n\t\t")] []
                      1: DOT@51..52 "." [] []
                      2: JS_NAME@52..55
                        0: IDENT@52..55 "log" [] []
                    1: (empty)
                    2: ARG_LIST@55..58
                      0: L_PAREN@55..56 "(" [] []
                      1: LIST@56..57
                        0: JS_IDENTIFIER_EXPRESSION@56..57
                          0: JS_REFERENCE_IDENTIFIER@56..57
                            0: IDENT@56..57 "x" [] []
                      2: R_PAREN@57..58 ")" [] []
                  1: SEMICOLON@58..59 ";" [] []
              2: R_CURLY@59..62 "}" [Whitespace("\n\t")] []
        3: R_CURLY@62..64 "}" [Whitespace("\n")] []
  3: EOF@64..65 "" [Whitespace("\n")] []
