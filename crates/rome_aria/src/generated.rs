//! Generated file, do not edit by hand, see `xtask/codegen`

#![allow(clippy::enum_variant_names)]
use std::str::FromStr;
#[derive(Debug, Eq, PartialEq)]
pub enum AriaPropertiesEnum {
    AriaActivedescendant,
    AriaAtomic,
    AriaAutocomplete,
    AriaBusy,
    AriaChecked,
    AriaColcount,
    AriaColindex,
    AriaColspan,
    AriaControls,
    AriaCurrent,
    AriaDescribedby,
    AriaDetails,
    AriaDisabled,
    AriaDropeffect,
    AriaErrormessage,
    AriaExpanded,
    AriaFlowto,
    AriaGrabbed,
    AriaHaspopup,
    AriaHidden,
    AriaInvalid,
    AriaKeyshortcuts,
    AriaLabel,
    AriaLabelledby,
    AriaLevel,
    AriaLive,
    AriaModal,
    AriaMultiline,
    AriaMultiselectable,
    AriaOrientation,
    AriaOwns,
    AriaPlaceholder,
    AriaPosinset,
    AriaPressed,
    AriaReadonly,
    AriaRelevant,
    AriaRequired,
    AriaRoledescription,
    AriaRowcount,
    AriaRowindex,
    AriaRowspan,
    AriaSelected,
    AriaSetsize,
    AriaSort,
    AriaValuemax,
    AriaValuemin,
    AriaValuenow,
    AriaValuetext,
}
impl From<AriaPropertiesEnum> for &str {
    fn from(property: AriaPropertiesEnum) -> Self {
        match property {
            AriaPropertiesEnum::AriaActivedescendant => "aria-activedescendant",
            AriaPropertiesEnum::AriaAtomic => "aria-atomic",
            AriaPropertiesEnum::AriaAutocomplete => "aria-autocomplete",
            AriaPropertiesEnum::AriaBusy => "aria-busy",
            AriaPropertiesEnum::AriaChecked => "aria-checked",
            AriaPropertiesEnum::AriaColcount => "aria-colcount",
            AriaPropertiesEnum::AriaColindex => "aria-colindex",
            AriaPropertiesEnum::AriaColspan => "aria-colspan",
            AriaPropertiesEnum::AriaControls => "aria-controls",
            AriaPropertiesEnum::AriaCurrent => "aria-current",
            AriaPropertiesEnum::AriaDescribedby => "aria-describedby",
            AriaPropertiesEnum::AriaDetails => "aria-details",
            AriaPropertiesEnum::AriaDisabled => "aria-disabled",
            AriaPropertiesEnum::AriaDropeffect => "aria-dropeffect",
            AriaPropertiesEnum::AriaErrormessage => "aria-errormessage",
            AriaPropertiesEnum::AriaExpanded => "aria-expanded",
            AriaPropertiesEnum::AriaFlowto => "aria-flowto",
            AriaPropertiesEnum::AriaGrabbed => "aria-grabbed",
            AriaPropertiesEnum::AriaHaspopup => "aria-haspopup",
            AriaPropertiesEnum::AriaHidden => "aria-hidden",
            AriaPropertiesEnum::AriaInvalid => "aria-invalid",
            AriaPropertiesEnum::AriaKeyshortcuts => "aria-keyshortcuts",
            AriaPropertiesEnum::AriaLabel => "aria-label",
            AriaPropertiesEnum::AriaLabelledby => "aria-labelledby",
            AriaPropertiesEnum::AriaLevel => "aria-level",
            AriaPropertiesEnum::AriaLive => "aria-live",
            AriaPropertiesEnum::AriaModal => "aria-modal",
            AriaPropertiesEnum::AriaMultiline => "aria-multiline",
            AriaPropertiesEnum::AriaMultiselectable => "aria-multiselectable",
            AriaPropertiesEnum::AriaOrientation => "aria-orientation",
            AriaPropertiesEnum::AriaOwns => "aria-owns",
            AriaPropertiesEnum::AriaPlaceholder => "aria-placeholder",
            AriaPropertiesEnum::AriaPosinset => "aria-posinset",
            AriaPropertiesEnum::AriaPressed => "aria-pressed",
            AriaPropertiesEnum::AriaReadonly => "aria-readonly",
            AriaPropertiesEnum::AriaRelevant => "aria-relevant",
            AriaPropertiesEnum::AriaRequired => "aria-required",
            AriaPropertiesEnum::AriaRoledescription => "aria-roledescription",
            AriaPropertiesEnum::AriaRowcount => "aria-rowcount",
            AriaPropertiesEnum::AriaRowindex => "aria-rowindex",
            AriaPropertiesEnum::AriaRowspan => "aria-rowspan",
            AriaPropertiesEnum::AriaSelected => "aria-selected",
            AriaPropertiesEnum::AriaSetsize => "aria-setsize",
            AriaPropertiesEnum::AriaSort => "aria-sort",
            AriaPropertiesEnum::AriaValuemax => "aria-valuemax",
            AriaPropertiesEnum::AriaValuemin => "aria-valuemin",
            AriaPropertiesEnum::AriaValuenow => "aria-valuenow",
            AriaPropertiesEnum::AriaValuetext => "aria-valuetext",
        }
    }
}
impl FromStr for AriaPropertiesEnum {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "aria-activedescendant" => Ok(AriaPropertiesEnum::AriaActivedescendant),
            "aria-atomic" => Ok(AriaPropertiesEnum::AriaAtomic),
            "aria-autocomplete" => Ok(AriaPropertiesEnum::AriaAutocomplete),
            "aria-busy" => Ok(AriaPropertiesEnum::AriaBusy),
            "aria-checked" => Ok(AriaPropertiesEnum::AriaChecked),
            "aria-colcount" => Ok(AriaPropertiesEnum::AriaColcount),
            "aria-colindex" => Ok(AriaPropertiesEnum::AriaColindex),
            "aria-colspan" => Ok(AriaPropertiesEnum::AriaColspan),
            "aria-controls" => Ok(AriaPropertiesEnum::AriaControls),
            "aria-current" => Ok(AriaPropertiesEnum::AriaCurrent),
            "aria-describedby" => Ok(AriaPropertiesEnum::AriaDescribedby),
            "aria-details" => Ok(AriaPropertiesEnum::AriaDetails),
            "aria-disabled" => Ok(AriaPropertiesEnum::AriaDisabled),
            "aria-dropeffect" => Ok(AriaPropertiesEnum::AriaDropeffect),
            "aria-errormessage" => Ok(AriaPropertiesEnum::AriaErrormessage),
            "aria-expanded" => Ok(AriaPropertiesEnum::AriaExpanded),
            "aria-flowto" => Ok(AriaPropertiesEnum::AriaFlowto),
            "aria-grabbed" => Ok(AriaPropertiesEnum::AriaGrabbed),
            "aria-haspopup" => Ok(AriaPropertiesEnum::AriaHaspopup),
            "aria-hidden" => Ok(AriaPropertiesEnum::AriaHidden),
            "aria-invalid" => Ok(AriaPropertiesEnum::AriaInvalid),
            "aria-keyshortcuts" => Ok(AriaPropertiesEnum::AriaKeyshortcuts),
            "aria-label" => Ok(AriaPropertiesEnum::AriaLabel),
            "aria-labelledby" => Ok(AriaPropertiesEnum::AriaLabelledby),
            "aria-level" => Ok(AriaPropertiesEnum::AriaLevel),
            "aria-live" => Ok(AriaPropertiesEnum::AriaLive),
            "aria-modal" => Ok(AriaPropertiesEnum::AriaModal),
            "aria-multiline" => Ok(AriaPropertiesEnum::AriaMultiline),
            "aria-multiselectable" => Ok(AriaPropertiesEnum::AriaMultiselectable),
            "aria-orientation" => Ok(AriaPropertiesEnum::AriaOrientation),
            "aria-owns" => Ok(AriaPropertiesEnum::AriaOwns),
            "aria-placeholder" => Ok(AriaPropertiesEnum::AriaPlaceholder),
            "aria-posinset" => Ok(AriaPropertiesEnum::AriaPosinset),
            "aria-pressed" => Ok(AriaPropertiesEnum::AriaPressed),
            "aria-readonly" => Ok(AriaPropertiesEnum::AriaReadonly),
            "aria-relevant" => Ok(AriaPropertiesEnum::AriaRelevant),
            "aria-required" => Ok(AriaPropertiesEnum::AriaRequired),
            "aria-roledescription" => Ok(AriaPropertiesEnum::AriaRoledescription),
            "aria-rowcount" => Ok(AriaPropertiesEnum::AriaRowcount),
            "aria-rowindex" => Ok(AriaPropertiesEnum::AriaRowindex),
            "aria-rowspan" => Ok(AriaPropertiesEnum::AriaRowspan),
            "aria-selected" => Ok(AriaPropertiesEnum::AriaSelected),
            "aria-setsize" => Ok(AriaPropertiesEnum::AriaSetsize),
            "aria-sort" => Ok(AriaPropertiesEnum::AriaSort),
            "aria-valuemax" => Ok(AriaPropertiesEnum::AriaValuemax),
            "aria-valuemin" => Ok(AriaPropertiesEnum::AriaValuemin),
            "aria-valuenow" => Ok(AriaPropertiesEnum::AriaValuenow),
            "aria-valuetext" => Ok(AriaPropertiesEnum::AriaValuetext),
            _ => Err("aria property not implemented".to_string()),
        }
    }
}
impl AriaPropertiesEnum {
    pub fn as_str(&self) -> &str {
        match self {
            AriaPropertiesEnum::AriaActivedescendant => "aria-activedescendant",
            AriaPropertiesEnum::AriaAtomic => "aria-atomic",
            AriaPropertiesEnum::AriaAutocomplete => "aria-autocomplete",
            AriaPropertiesEnum::AriaBusy => "aria-busy",
            AriaPropertiesEnum::AriaChecked => "aria-checked",
            AriaPropertiesEnum::AriaColcount => "aria-colcount",
            AriaPropertiesEnum::AriaColindex => "aria-colindex",
            AriaPropertiesEnum::AriaColspan => "aria-colspan",
            AriaPropertiesEnum::AriaControls => "aria-controls",
            AriaPropertiesEnum::AriaCurrent => "aria-current",
            AriaPropertiesEnum::AriaDescribedby => "aria-describedby",
            AriaPropertiesEnum::AriaDetails => "aria-details",
            AriaPropertiesEnum::AriaDisabled => "aria-disabled",
            AriaPropertiesEnum::AriaDropeffect => "aria-dropeffect",
            AriaPropertiesEnum::AriaErrormessage => "aria-errormessage",
            AriaPropertiesEnum::AriaExpanded => "aria-expanded",
            AriaPropertiesEnum::AriaFlowto => "aria-flowto",
            AriaPropertiesEnum::AriaGrabbed => "aria-grabbed",
            AriaPropertiesEnum::AriaHaspopup => "aria-haspopup",
            AriaPropertiesEnum::AriaHidden => "aria-hidden",
            AriaPropertiesEnum::AriaInvalid => "aria-invalid",
            AriaPropertiesEnum::AriaKeyshortcuts => "aria-keyshortcuts",
            AriaPropertiesEnum::AriaLabel => "aria-label",
            AriaPropertiesEnum::AriaLabelledby => "aria-labelledby",
            AriaPropertiesEnum::AriaLevel => "aria-level",
            AriaPropertiesEnum::AriaLive => "aria-live",
            AriaPropertiesEnum::AriaModal => "aria-modal",
            AriaPropertiesEnum::AriaMultiline => "aria-multiline",
            AriaPropertiesEnum::AriaMultiselectable => "aria-multiselectable",
            AriaPropertiesEnum::AriaOrientation => "aria-orientation",
            AriaPropertiesEnum::AriaOwns => "aria-owns",
            AriaPropertiesEnum::AriaPlaceholder => "aria-placeholder",
            AriaPropertiesEnum::AriaPosinset => "aria-posinset",
            AriaPropertiesEnum::AriaPressed => "aria-pressed",
            AriaPropertiesEnum::AriaReadonly => "aria-readonly",
            AriaPropertiesEnum::AriaRelevant => "aria-relevant",
            AriaPropertiesEnum::AriaRequired => "aria-required",
            AriaPropertiesEnum::AriaRoledescription => "aria-roledescription",
            AriaPropertiesEnum::AriaRowcount => "aria-rowcount",
            AriaPropertiesEnum::AriaRowindex => "aria-rowindex",
            AriaPropertiesEnum::AriaRowspan => "aria-rowspan",
            AriaPropertiesEnum::AriaSelected => "aria-selected",
            AriaPropertiesEnum::AriaSetsize => "aria-setsize",
            AriaPropertiesEnum::AriaSort => "aria-sort",
            AriaPropertiesEnum::AriaValuemax => "aria-valuemax",
            AriaPropertiesEnum::AriaValuemin => "aria-valuemin",
            AriaPropertiesEnum::AriaValuenow => "aria-valuenow",
            AriaPropertiesEnum::AriaValuetext => "aria-valuetext",
        }
    }
}
#[derive(Debug, Eq, PartialEq)]
pub enum AriaPropertyTypeEnum {
    Boolean,
    Id,
    Idlist,
    Integer,
    Number,
    String,
    Token,
    Tokenlist,
    Tristate,
}
impl From<AriaPropertyTypeEnum> for &str {
    fn from(property: AriaPropertyTypeEnum) -> Self {
        match property {
            AriaPropertyTypeEnum::Boolean => "boolean",
            AriaPropertyTypeEnum::Id => "id",
            AriaPropertyTypeEnum::Idlist => "idlist",
            AriaPropertyTypeEnum::Integer => "integer",
            AriaPropertyTypeEnum::Number => "number",
            AriaPropertyTypeEnum::String => "string",
            AriaPropertyTypeEnum::Token => "token",
            AriaPropertyTypeEnum::Tokenlist => "tokenlist",
            AriaPropertyTypeEnum::Tristate => "tristate",
        }
    }
}
impl FromStr for AriaPropertyTypeEnum {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "boolean" => Ok(AriaPropertyTypeEnum::Boolean),
            "id" => Ok(AriaPropertyTypeEnum::Id),
            "idlist" => Ok(AriaPropertyTypeEnum::Idlist),
            "integer" => Ok(AriaPropertyTypeEnum::Integer),
            "number" => Ok(AriaPropertyTypeEnum::Number),
            "string" => Ok(AriaPropertyTypeEnum::String),
            "token" => Ok(AriaPropertyTypeEnum::Token),
            "tokenlist" => Ok(AriaPropertyTypeEnum::Tokenlist),
            "tristate" => Ok(AriaPropertyTypeEnum::Tristate),
            _ => Err("aria property not implemented".to_string()),
        }
    }
}
impl AriaPropertyTypeEnum {
    pub fn as_str(&self) -> &str {
        match self {
            AriaPropertyTypeEnum::Boolean => "boolean",
            AriaPropertyTypeEnum::Id => "id",
            AriaPropertyTypeEnum::Idlist => "idlist",
            AriaPropertyTypeEnum::Integer => "integer",
            AriaPropertyTypeEnum::Number => "number",
            AriaPropertyTypeEnum::String => "string",
            AriaPropertyTypeEnum::Token => "token",
            AriaPropertyTypeEnum::Tokenlist => "tokenlist",
            AriaPropertyTypeEnum::Tristate => "tristate",
        }
    }
}
#[derive(Debug, Eq, PartialEq)]
pub enum AriaWidgetRolesEnum {
    Alert,
    Alertdialog,
    Button,
    Checkbox,
    Dialog,
    Gridcell,
    Link,
    Log,
    Marquee,
    Menuitem,
    Menuitemcheckbox,
    Menuitemradio,
    Option,
    Progressbar,
    Radio,
    Scrollbar,
    Searchbox,
    Slider,
    Spinbutton,
    Status,
    Switch,
    Tab,
    Tabpanel,
    Textbox,
    Timer,
    Tooltip,
    Treeitem,
}
impl From<AriaWidgetRolesEnum> for &str {
    fn from(property: AriaWidgetRolesEnum) -> Self {
        match property {
            AriaWidgetRolesEnum::Alert => "alert",
            AriaWidgetRolesEnum::Alertdialog => "alertdialog",
            AriaWidgetRolesEnum::Button => "button",
            AriaWidgetRolesEnum::Checkbox => "checkbox",
            AriaWidgetRolesEnum::Dialog => "dialog",
            AriaWidgetRolesEnum::Gridcell => "gridcell",
            AriaWidgetRolesEnum::Link => "link",
            AriaWidgetRolesEnum::Log => "log",
            AriaWidgetRolesEnum::Marquee => "marquee",
            AriaWidgetRolesEnum::Menuitem => "menuitem",
            AriaWidgetRolesEnum::Menuitemcheckbox => "menuitemcheckbox",
            AriaWidgetRolesEnum::Menuitemradio => "menuitemradio",
            AriaWidgetRolesEnum::Option => "option",
            AriaWidgetRolesEnum::Progressbar => "progressbar",
            AriaWidgetRolesEnum::Radio => "radio",
            AriaWidgetRolesEnum::Scrollbar => "scrollbar",
            AriaWidgetRolesEnum::Searchbox => "searchbox",
            AriaWidgetRolesEnum::Slider => "slider",
            AriaWidgetRolesEnum::Spinbutton => "spinbutton",
            AriaWidgetRolesEnum::Status => "status",
            AriaWidgetRolesEnum::Switch => "switch",
            AriaWidgetRolesEnum::Tab => "tab",
            AriaWidgetRolesEnum::Tabpanel => "tabpanel",
            AriaWidgetRolesEnum::Textbox => "textbox",
            AriaWidgetRolesEnum::Timer => "timer",
            AriaWidgetRolesEnum::Tooltip => "tooltip",
            AriaWidgetRolesEnum::Treeitem => "treeitem",
        }
    }
}
impl FromStr for AriaWidgetRolesEnum {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "alert" => Ok(AriaWidgetRolesEnum::Alert),
            "alertdialog" => Ok(AriaWidgetRolesEnum::Alertdialog),
            "button" => Ok(AriaWidgetRolesEnum::Button),
            "checkbox" => Ok(AriaWidgetRolesEnum::Checkbox),
            "dialog" => Ok(AriaWidgetRolesEnum::Dialog),
            "gridcell" => Ok(AriaWidgetRolesEnum::Gridcell),
            "link" => Ok(AriaWidgetRolesEnum::Link),
            "log" => Ok(AriaWidgetRolesEnum::Log),
            "marquee" => Ok(AriaWidgetRolesEnum::Marquee),
            "menuitem" => Ok(AriaWidgetRolesEnum::Menuitem),
            "menuitemcheckbox" => Ok(AriaWidgetRolesEnum::Menuitemcheckbox),
            "menuitemradio" => Ok(AriaWidgetRolesEnum::Menuitemradio),
            "option" => Ok(AriaWidgetRolesEnum::Option),
            "progressbar" => Ok(AriaWidgetRolesEnum::Progressbar),
            "radio" => Ok(AriaWidgetRolesEnum::Radio),
            "scrollbar" => Ok(AriaWidgetRolesEnum::Scrollbar),
            "searchbox" => Ok(AriaWidgetRolesEnum::Searchbox),
            "slider" => Ok(AriaWidgetRolesEnum::Slider),
            "spinbutton" => Ok(AriaWidgetRolesEnum::Spinbutton),
            "status" => Ok(AriaWidgetRolesEnum::Status),
            "switch" => Ok(AriaWidgetRolesEnum::Switch),
            "tab" => Ok(AriaWidgetRolesEnum::Tab),
            "tabpanel" => Ok(AriaWidgetRolesEnum::Tabpanel),
            "textbox" => Ok(AriaWidgetRolesEnum::Textbox),
            "timer" => Ok(AriaWidgetRolesEnum::Timer),
            "tooltip" => Ok(AriaWidgetRolesEnum::Tooltip),
            "treeitem" => Ok(AriaWidgetRolesEnum::Treeitem),
            _ => Err("aria property not implemented".to_string()),
        }
    }
}
impl AriaWidgetRolesEnum {
    pub fn as_str(&self) -> &str {
        match self {
            AriaWidgetRolesEnum::Alert => "alert",
            AriaWidgetRolesEnum::Alertdialog => "alertdialog",
            AriaWidgetRolesEnum::Button => "button",
            AriaWidgetRolesEnum::Checkbox => "checkbox",
            AriaWidgetRolesEnum::Dialog => "dialog",
            AriaWidgetRolesEnum::Gridcell => "gridcell",
            AriaWidgetRolesEnum::Link => "link",
            AriaWidgetRolesEnum::Log => "log",
            AriaWidgetRolesEnum::Marquee => "marquee",
            AriaWidgetRolesEnum::Menuitem => "menuitem",
            AriaWidgetRolesEnum::Menuitemcheckbox => "menuitemcheckbox",
            AriaWidgetRolesEnum::Menuitemradio => "menuitemradio",
            AriaWidgetRolesEnum::Option => "option",
            AriaWidgetRolesEnum::Progressbar => "progressbar",
            AriaWidgetRolesEnum::Radio => "radio",
            AriaWidgetRolesEnum::Scrollbar => "scrollbar",
            AriaWidgetRolesEnum::Searchbox => "searchbox",
            AriaWidgetRolesEnum::Slider => "slider",
            AriaWidgetRolesEnum::Spinbutton => "spinbutton",
            AriaWidgetRolesEnum::Status => "status",
            AriaWidgetRolesEnum::Switch => "switch",
            AriaWidgetRolesEnum::Tab => "tab",
            AriaWidgetRolesEnum::Tabpanel => "tabpanel",
            AriaWidgetRolesEnum::Textbox => "textbox",
            AriaWidgetRolesEnum::Timer => "timer",
            AriaWidgetRolesEnum::Tooltip => "tooltip",
            AriaWidgetRolesEnum::Treeitem => "treeitem",
        }
    }
}
#[derive(Debug, Eq, PartialEq)]
pub enum AriaAbstractRolesEnum {
    Command,
    Composite,
    Input,
    Landmark,
    Range,
    Roletype,
    Section,
    Sectionhead,
    Select,
    Structure,
    Widget,
    Window,
}
impl From<AriaAbstractRolesEnum> for &str {
    fn from(property: AriaAbstractRolesEnum) -> Self {
        match property {
            AriaAbstractRolesEnum::Command => "command",
            AriaAbstractRolesEnum::Composite => "composite",
            AriaAbstractRolesEnum::Input => "input",
            AriaAbstractRolesEnum::Landmark => "landmark",
            AriaAbstractRolesEnum::Range => "range",
            AriaAbstractRolesEnum::Roletype => "roletype",
            AriaAbstractRolesEnum::Section => "section",
            AriaAbstractRolesEnum::Sectionhead => "sectionhead",
            AriaAbstractRolesEnum::Select => "select",
            AriaAbstractRolesEnum::Structure => "structure",
            AriaAbstractRolesEnum::Widget => "widget",
            AriaAbstractRolesEnum::Window => "window",
        }
    }
}
impl FromStr for AriaAbstractRolesEnum {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "command" => Ok(AriaAbstractRolesEnum::Command),
            "composite" => Ok(AriaAbstractRolesEnum::Composite),
            "input" => Ok(AriaAbstractRolesEnum::Input),
            "landmark" => Ok(AriaAbstractRolesEnum::Landmark),
            "range" => Ok(AriaAbstractRolesEnum::Range),
            "roletype" => Ok(AriaAbstractRolesEnum::Roletype),
            "section" => Ok(AriaAbstractRolesEnum::Section),
            "sectionhead" => Ok(AriaAbstractRolesEnum::Sectionhead),
            "select" => Ok(AriaAbstractRolesEnum::Select),
            "structure" => Ok(AriaAbstractRolesEnum::Structure),
            "widget" => Ok(AriaAbstractRolesEnum::Widget),
            "window" => Ok(AriaAbstractRolesEnum::Window),
            _ => Err("aria property not implemented".to_string()),
        }
    }
}
impl AriaAbstractRolesEnum {
    pub fn as_str(&self) -> &str {
        match self {
            AriaAbstractRolesEnum::Command => "command",
            AriaAbstractRolesEnum::Composite => "composite",
            AriaAbstractRolesEnum::Input => "input",
            AriaAbstractRolesEnum::Landmark => "landmark",
            AriaAbstractRolesEnum::Range => "range",
            AriaAbstractRolesEnum::Roletype => "roletype",
            AriaAbstractRolesEnum::Section => "section",
            AriaAbstractRolesEnum::Sectionhead => "sectionhead",
            AriaAbstractRolesEnum::Select => "select",
            AriaAbstractRolesEnum::Structure => "structure",
            AriaAbstractRolesEnum::Widget => "widget",
            AriaAbstractRolesEnum::Window => "window",
        }
    }
}
#[derive(Debug, Eq, PartialEq)]
pub enum AriaDocumentStructureRolesEnum {
    Article,
    Cell,
    Columnheader,
    Definition,
    Directory,
    Document,
    Feed,
    Figure,
    Group,
    Heading,
    Img,
    List,
    Listitem,
    Math,
    None,
    Note,
    Presentation,
    Region,
    Row,
    Rowgroup,
    Rowheader,
    Separator,
    Table,
    Term,
    Toolbar,
}
impl From<AriaDocumentStructureRolesEnum> for &str {
    fn from(property: AriaDocumentStructureRolesEnum) -> Self {
        match property {
            AriaDocumentStructureRolesEnum::Article => "article",
            AriaDocumentStructureRolesEnum::Cell => "cell",
            AriaDocumentStructureRolesEnum::Columnheader => "columnheader",
            AriaDocumentStructureRolesEnum::Definition => "definition",
            AriaDocumentStructureRolesEnum::Directory => "directory",
            AriaDocumentStructureRolesEnum::Document => "document",
            AriaDocumentStructureRolesEnum::Feed => "feed",
            AriaDocumentStructureRolesEnum::Figure => "figure",
            AriaDocumentStructureRolesEnum::Group => "group",
            AriaDocumentStructureRolesEnum::Heading => "heading",
            AriaDocumentStructureRolesEnum::Img => "img",
            AriaDocumentStructureRolesEnum::List => "list",
            AriaDocumentStructureRolesEnum::Listitem => "listitem",
            AriaDocumentStructureRolesEnum::Math => "math",
            AriaDocumentStructureRolesEnum::None => "none",
            AriaDocumentStructureRolesEnum::Note => "note",
            AriaDocumentStructureRolesEnum::Presentation => "presentation",
            AriaDocumentStructureRolesEnum::Region => "region",
            AriaDocumentStructureRolesEnum::Row => "row",
            AriaDocumentStructureRolesEnum::Rowgroup => "rowgroup",
            AriaDocumentStructureRolesEnum::Rowheader => "rowheader",
            AriaDocumentStructureRolesEnum::Separator => "separator",
            AriaDocumentStructureRolesEnum::Table => "table",
            AriaDocumentStructureRolesEnum::Term => "term",
            AriaDocumentStructureRolesEnum::Toolbar => "toolbar",
        }
    }
}
impl FromStr for AriaDocumentStructureRolesEnum {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "article" => Ok(AriaDocumentStructureRolesEnum::Article),
            "cell" => Ok(AriaDocumentStructureRolesEnum::Cell),
            "columnheader" => Ok(AriaDocumentStructureRolesEnum::Columnheader),
            "definition" => Ok(AriaDocumentStructureRolesEnum::Definition),
            "directory" => Ok(AriaDocumentStructureRolesEnum::Directory),
            "document" => Ok(AriaDocumentStructureRolesEnum::Document),
            "feed" => Ok(AriaDocumentStructureRolesEnum::Feed),
            "figure" => Ok(AriaDocumentStructureRolesEnum::Figure),
            "group" => Ok(AriaDocumentStructureRolesEnum::Group),
            "heading" => Ok(AriaDocumentStructureRolesEnum::Heading),
            "img" => Ok(AriaDocumentStructureRolesEnum::Img),
            "list" => Ok(AriaDocumentStructureRolesEnum::List),
            "listitem" => Ok(AriaDocumentStructureRolesEnum::Listitem),
            "math" => Ok(AriaDocumentStructureRolesEnum::Math),
            "none" => Ok(AriaDocumentStructureRolesEnum::None),
            "note" => Ok(AriaDocumentStructureRolesEnum::Note),
            "presentation" => Ok(AriaDocumentStructureRolesEnum::Presentation),
            "region" => Ok(AriaDocumentStructureRolesEnum::Region),
            "row" => Ok(AriaDocumentStructureRolesEnum::Row),
            "rowgroup" => Ok(AriaDocumentStructureRolesEnum::Rowgroup),
            "rowheader" => Ok(AriaDocumentStructureRolesEnum::Rowheader),
            "separator" => Ok(AriaDocumentStructureRolesEnum::Separator),
            "table" => Ok(AriaDocumentStructureRolesEnum::Table),
            "term" => Ok(AriaDocumentStructureRolesEnum::Term),
            "toolbar" => Ok(AriaDocumentStructureRolesEnum::Toolbar),
            _ => Err("aria property not implemented".to_string()),
        }
    }
}
impl AriaDocumentStructureRolesEnum {
    pub fn as_str(&self) -> &str {
        match self {
            AriaDocumentStructureRolesEnum::Article => "article",
            AriaDocumentStructureRolesEnum::Cell => "cell",
            AriaDocumentStructureRolesEnum::Columnheader => "columnheader",
            AriaDocumentStructureRolesEnum::Definition => "definition",
            AriaDocumentStructureRolesEnum::Directory => "directory",
            AriaDocumentStructureRolesEnum::Document => "document",
            AriaDocumentStructureRolesEnum::Feed => "feed",
            AriaDocumentStructureRolesEnum::Figure => "figure",
            AriaDocumentStructureRolesEnum::Group => "group",
            AriaDocumentStructureRolesEnum::Heading => "heading",
            AriaDocumentStructureRolesEnum::Img => "img",
            AriaDocumentStructureRolesEnum::List => "list",
            AriaDocumentStructureRolesEnum::Listitem => "listitem",
            AriaDocumentStructureRolesEnum::Math => "math",
            AriaDocumentStructureRolesEnum::None => "none",
            AriaDocumentStructureRolesEnum::Note => "note",
            AriaDocumentStructureRolesEnum::Presentation => "presentation",
            AriaDocumentStructureRolesEnum::Region => "region",
            AriaDocumentStructureRolesEnum::Row => "row",
            AriaDocumentStructureRolesEnum::Rowgroup => "rowgroup",
            AriaDocumentStructureRolesEnum::Rowheader => "rowheader",
            AriaDocumentStructureRolesEnum::Separator => "separator",
            AriaDocumentStructureRolesEnum::Table => "table",
            AriaDocumentStructureRolesEnum::Term => "term",
            AriaDocumentStructureRolesEnum::Toolbar => "toolbar",
        }
    }
}
