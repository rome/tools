//! A crate for generated Syntax node definitions and utility macros.
//! Both rslint_lexer and rslint_parser rely on these definitions, therefore
//! they are wrapped in this crate to prevent cyclic dependencies

#[macro_use]
mod generated;

pub use self::generated::SyntaxKind;
use self::generated::SyntaxKind::*;

impl From<u16> for SyntaxKind {
	fn from(d: u16) -> SyntaxKind {
		assert!(d <= (SyntaxKind::__LAST as u16));
		unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }
	}
}

impl From<SyntaxKind> for u16 {
	fn from(k: SyntaxKind) -> u16 {
		k as u16
	}
}

impl SyntaxKind {
	pub fn is_trivia(self) -> bool {
		matches!(self, SyntaxKind::WHITESPACE | SyntaxKind::COMMENT)
	}
}

impl rome_rowan::SyntaxKind for SyntaxKind {
	fn is_unknown(&self) -> bool {
		matches!(
			self,
			JS_UNKNOWN_STATEMENT
				| JS_UNKNOWN_MODIFIER
				| JS_UNKNOWN_BINDING
				| JS_UNKNOWN_MEMBER
				| JS_UNKNOWN_EXPRESSION
				| JS_UNKNOWN_IMPORT_ASSERTION_ENTRY
				| JS_UNKNOWN_NAMED_IMPORT_SPECIFIER
				| JS_UNKNOWN_ASSIGNMENT
		)
	}

	fn to_unknown(&self) -> SyntaxKind {
		match self {
			JS_BLOCK_STATEMENT
			| EXPORT_DECL
			| EXPORT_DEFAULT_DECL
			| EXPORT_WILDCARD
			| FOR_STMT
			| JS_BREAK_STATEMENT
			| JS_CLASS_DECLARATION
			| JS_CONTINUE_STATEMENT
			| JS_DEBUGGER_STATEMENT
			| JS_DO_WHILE_STATEMENT
			| JS_EMPTY_STATEMENT
			| JS_EXPRESSION_STATEMENT
			| JS_FOR_IN_STATEMENT
			| JS_FOR_OF_STATEMENT
			| JS_FUNCTION_DECLARATION
			| JS_IF_STATEMENT
			| JS_IMPORT
			| JS_LABELED_STATEMENT
			| JS_RETURN_STATEMENT
			| JS_SWITCH_STATEMENT
			| JS_THROW_STATEMENT
			| JS_TRY_FINALLY_STATEMENT
			| JS_TRY_STATEMENT
			| JS_VARIABLE_STATEMENT
			| JS_WHILE_STATEMENT
			| JS_WITH_STATEMENT
			| JS_UNKNOWN_STATEMENT => JS_UNKNOWN_STATEMENT,

			CALL_EXPR
			| IMPORT_META
			| JS_ARRAY_EXPRESSION
			| JS_ARROW_FUNCTION_EXPRESSION
			| JS_ASSIGNMENT_EXPRESSION
			| JS_AWAIT_EXPRESSION
			| JS_BIG_INT_LITERAL_EXPRESSION
			| JS_BINARY_EXPRESSION
			| JS_BOOLEAN_LITERAL_EXPRESSION
			| JS_CLASS_EXPRESSION
			| JS_COMPUTED_MEMBER_EXPRESSION
			| JS_CONDITIONAL_EXPRESSION
			| JS_FUNCTION_EXPRESSION
			| JS_IDENTIFIER_EXPRESSION
			| JS_IMPORT_CALL_EXPRESSION
			| JS_LOGICAL_EXPRESSION
			| JS_NULL_LITERAL_EXPRESSION
			| JS_NUMBER_LITERAL_EXPRESSION
			| JS_OBJECT_EXPRESSION
			| JS_PARENTHESIZED_EXPRESSION
			| JS_POST_UPDATE_EXPRESSION
			| JS_PRE_UPDATE_EXPRESSION
			| JS_REGEX_LITERAL_EXPRESSION
			| JS_SEQUENCE_EXPRESSION
			| JS_STATIC_MEMBER_EXPRESSION
			| JS_STRING_LITERAL_EXPRESSION
			| JS_SUPER_EXPRESSION
			| JS_THIS_EXPRESSION
			| JS_UNARY_EXPRESSION
			| JS_YIELD_EXPRESSION
			| NEW_EXPR
			| NEW_TARGET
			| TEMPLATE
			| JS_UNKNOWN_EXPRESSION => JS_UNKNOWN_EXPRESSION,

			JS_OBJECT_BINDING_PATTERN
			| JS_ARRAY_BINDING_PATTERN
			| JS_ARRAY_BINDING_PATTERN_REST_ELEMENT
			| JS_BINDING_PATTERN_WITH_DEFAULT
			| JS_IDENTIFIER_BINDING
			| JS_OBJECT_BINDING_PATTERN_PROPERTY
			| JS_OBJECT_BINDING_PATTERN_REST
			| JS_OBJECT_BINDING_PATTERN_SHORTHAND_PROPERTY
			| JS_UNKNOWN_BINDING => JS_UNKNOWN_BINDING,

			JS_CONSTRUCTOR_CLASS_MEMBER
			| JS_EMPTY_CLASS_MEMBER
			| JS_GETTER_CLASS_MEMBER
			| JS_GETTER_OBJECT_MEMBER
			| JS_METHOD_CLASS_MEMBER
			| JS_METHOD_OBJECT_MEMBER
			| JS_PRIVATE_CLASS_MEMBER_NAME
			| JS_PROPERTY_CLASS_MEMBER
			| JS_PROPERTY_OBJECT_MEMBER
			| JS_SETTER_CLASS_MEMBER
			| JS_SETTER_OBJECT_MEMBER
			| TS_INDEX_SIGNATURE
			| JS_SHORTHAND_PROPERTY_OBJECT_MEMBER
			| JS_UNKNOWN_MEMBER => JS_UNKNOWN_MEMBER,

			JS_ARRAY_ASSIGNMENT_PATTERN
			| JS_ARRAY_ASSIGNMENT_PATTERN_REST_ELEMENT
			| JS_COMPUTED_MEMBER_ASSIGNMENT
			| JS_IDENTIFIER_ASSIGNMENT
			| JS_OBJECT_ASSIGNMENT_PATTERN
			| JS_OBJECT_ASSIGNMENT_PATTERN_PROPERTY
			| JS_OBJECT_ASSIGNMENT_PATTERN_REST
			| JS_OBJECT_ASSIGNMENT_PATTERN_SHORTHAND_PROPERTY
			| JS_PARENTHESIZED_ASSIGNMENT
			| JS_STATIC_MEMBER_ASSIGNMENT
			| JS_UNKNOWN_ASSIGNMENT => JS_UNKNOWN_ASSIGNMENT,

			JS_NAMED_IMPORT_SPECIFIER
			| JS_SHORTHAND_NAMED_IMPORT_SPECIFIER
			| JS_UNKNOWN_NAMED_IMPORT_SPECIFIER => JS_UNKNOWN_NAMED_IMPORT_SPECIFIER,

			JS_IMPORT_ASSERTION_ENTRY | JS_UNKNOWN_IMPORT_ASSERTION_ENTRY => {
				JS_UNKNOWN_IMPORT_ASSERTION_ENTRY
			}
			_ => JS_UNKNOWN,
		}
	}
}
