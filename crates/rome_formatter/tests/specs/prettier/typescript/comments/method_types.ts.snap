---
source: crates/rome_formatter/tests/prettier_tests.rs
assertion_line: 144
expression: method_types.ts

---
# Input
```js
interface foo1 {
  bar3/* foo */ (/* baz */) // bat
  bar/* foo */ ? /* bar */ (/* baz */) /* bat */;
  bar2/* foo */ (/* baz */) /* bat */
}

interface foo2 {
  bar/* foo */ ? /* bar */ (bar: /* baz */ string): /* bat */ string;
}

interface foo3 {
  /* foo */ (/* bar */): /* baz */ string;
}

interface foo4 {
  /* foo */ (bar: /* bar */ string): /* baz */ string;
}

interface foo5 {
  /* foo */ new /* bar */  (a: /* baz */ string): /* bat */ string
}

interface foo6 {
  /* foo */ new /* bar */ (/* baz */): /* bat */ string
}

type foo7 = /* foo */ (/* bar */) /* baz */ => void

type foo8 = /* foo */ (a: /* bar */ string) /* baz */ => void

let foo9: new /* foo */ (/* bar */) /* baz */ => string;

let foo10: new /* foo */ (a: /* bar */ string) /* baz */ => string;

abstract class Test {
  abstract foo12 /* foo */ (a: /* bar */ string): /* baz */ void

  abstract foo13 /* foo */ (/* bar */) /* baz */
}

```

# Output
```js
interface foo1 {
  bar3( /* baz */ ), /* foo */ // bat
  bar?( /* baz */ ), /* foo */ /* bar */ /* bat */
  bar2( /* baz */ ), /* foo */ /* bat */
}

interface foo2 {
  bar?(bar: /* baz */ string): string, /* foo */ /* bar */ /* bat */
}

interface foo3 {
  /* foo */ ( /* bar */ ): string, /* baz */
}

interface foo4 {
  /* foo */ (bar: /* bar */ string): string, /* baz */
}

interface foo5 {
  /* foo */ new(a: /* baz */ string): string, /* bar */ /* bat */
}

interface foo6 {
  /* foo */ new( /* baz */ ): string, /* bar */ /* bat */
}

type foo7 = /* foo */ ( /* bar */ ) /* baz */ => void;

type foo8 = /* foo */ (a: /* bar */ string) /* baz */ => void;

let foo9: new /* foo */ ( /* bar */ ) /* baz */ => string;

let foo10: new /* foo */ (a: /* bar */ string) /* baz */ => string;

abstract class Test {
  abstract foo12 /* foo */ (a: /* bar */ string): /* baz */ void;

  abstract foo13 /* foo */ ( /* bar */ ) /* baz */ ;
}

```


