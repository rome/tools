---
source: crates/rome_formatter/tests/prettier_tests.rs
assertion_line: 125
expression: continue-and-break-comment-without-blocks.js

---
# Input
```js
for(;;) continue
// comment
;

for (;;) break
// comment
;

for (const f of []) continue
// comment
;

for (const f of []) break
// comment
;

for (const f in {}) continue
// comment
;

for (const f in {}) break
// comment
;

for(;;) continue // comment
;

for (;;) break // comment
;

for (const f of []) continue // comment
;

for (const f of []) break // comment
;

for (const f in {}) continue // comment
;

for (const f in {}) break // comment
;

for(;;) continue /* comment */
;

for (;;) break /* comment */
;

for (const f of []) continue /* comment */
;

for (const f of []) break /* comment */
;

for (const f in {}) continue /* comment */
;

for (const f in {}) break /* comment */
;

for(;;) continue
/* comment */
;

for (;;) break
/* comment */
;

for (const f of []) continue
/* comment */
;

for (const f of []) break
/* comment */
;

for (const f in {}) continue
/* comment */
;

for (const f in {}) break
/* comment */
;

label1: for (;;) continue label1 /* comment */
;

label1: for (;;) continue label1
/* comment */
;

label1: for (;;) continue label1 // comment
;

label1: for (;;) continue label1
// comment
;

```

# Output
```js
for (;;) continue // comment
;

for (;;) break // comment
;

for (const f of []) continue // comment
;

for (const f of []) break // comment
;

for (const f in {}) continue // comment
;

for (const f in {}) break // comment
;

for (;;) continue; // comment

for (;;) break; // comment

for (const f of []) continue; // comment

for (const f of []) break; // comment

for (const f in {}) continue; // comment

for (const f in {}) break; // comment

for (;;) continue /* comment */ ;

for (;;) break /* comment */ ;

for (const f of []) continue; /* comment */

for (const f of []) break; /* comment */

for (const f in {}) continue; /* comment */

for (const f in {}) break; /* comment */

for (;;) continue /* comment */
;

for (;;) break /* comment */
;

for (const f of []) continue /* comment */
;

for (const f of []) break /* comment */
;

for (const f in {}) continue /* comment */
;

for (const f in {}) break /* comment */
;

label1: for (;;) continue label1 /* comment */ ;

label1: for (;;) continue label1 /* comment */
;

label1: for (;;) continue label1; // comment

label1: for (;;) continue label1 // comment
;

```


