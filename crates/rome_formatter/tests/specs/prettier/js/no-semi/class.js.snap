---
source: crates/rome_formatter/tests/prettier_tests.rs
assertion_line: 121
expression: class.js

---
# Input
```js
// TODO: upgrade parser
// class A {
//   async; // The semicolon is *not* necessary
//   x(){}
// }
// class B {
//   static; // The semicolon *is* necessary
//   x(){}
// }

class C1 {
  get; // The semicolon *is* necessary
  x(){}
}
class C2 {
  get = () => {}; // The semicolon is *not* necessary
  x(){}
}
class C3 {
  set; // The semicolon *is* necessary
  x(){}
}
class C4 {
  set = () => {}; // The semicolon is *not* necessary
  x(){}
}



class A1 {
  a = 0;
  [b](){}

  c = 0;
  *d(){}

  e = 0;
  [f] = 0

  // none of the semicolons above this comment can be omitted.
  // none of the semicolons below this comment are necessary.

  q() {};
  [h](){}

  p() {};
  *i(){}

  a = 1;
  get ['y']() {}

  a = 1;
  static ['y']() {}

  a = 1;
  set ['z'](z) {}

  a = 1;
  async ['a']() {}

  a = 1;
  async *g() {}

  a = 0;
  b = 1;
}

class A2 {
  a = 0;
  [b](){}

  c = 0;
  *d(){}

  e = 0;
  [f] = 0

  // none of the semicolons above this comment can be omitted.
  // none of the semicolons below this comment are necessary.

  q() {};
  [h](){}

  p() {};
  *i(){}

  a = 1;
  get ['y']() {}

  a = 1;
  static ['y']() {}

  a = 1;
  set ['z'](z) {}

  a = 1;
  async ['a']() {}

  a = 1;
  async *g() {}

  a = 0;
  b = 1;
}

// being first/last shouldn't break things
class G1 {
  x = 1
}
class G2 {
  x() {}
}
class G3 {
  *x() {}
}
class G4 {
  [x] = 1
}

```

# Output
```js
// TODO: upgrade parser
// class A {
//   async; // The semicolon is *not* necessary
//   x(){}
// }
// class B {
//   static; // The semicolon *is* necessary
//   x(){}
// }

class C1 {
  get; // The semicolon *is* necessary
  x(){}
}
class C2 {
  get = () => {}
// The semicolon is *not* necessary
x();
{}

}
class C3 {
  set; // The semicolon *is* necessary
  x(){}
}
class C4 {
  set = () => {}
// The semicolon is *not* necessary
x();
{}

}

class A1 {
  a = 0;
  [b]() {}

  c = 0;
  *d() {}

  e = 0;
  [f] = 0;

  // none of the semicolons above this comment can be omitted.
  // none of the semicolons below this comment are necessary.

  q() {}
  [h]() {}

  p() {}
  *i() {}

  a = 1;
  get ["y"]() {}

  a = 1;
  static ["y"]() {}

  a = 1;
  set ["z"](z) {}

  a = 1;
  async ["a"]() {}

  a = 1;
  async *g() {}

  a = 0;
  b = 1;
}

class A2 {
  a = 0;
  [b]() {}

  c = 0;
  *d() {}

  e = 0;
  [f] = 0;

  // none of the semicolons above this comment can be omitted.
  // none of the semicolons below this comment are necessary.

  q() {}
  [h]() {}

  p() {}
  *i() {}

  a = 1;
  get ["y"]() {}

  a = 1;
  static ["y"]() {}

  a = 1;
  set ["z"](z) {}

  a = 1;
  async ["a"]() {}

  a = 1;
  async *g() {}

  a = 0;
  b = 1;
}

// being first/last shouldn't break things
class G1 {
  x = 1;
}
class G2 {
  x() {}
}
class G3 {
  *x() {}
}
class G4 {
  [x] = 1;
}

```

# Errors
```
error[SyntaxError]: expected an identifier, a string literal, a number literal, a private field name, or a computed name but instead found ';'
   ┌─ class.js:12:6
   │
12 │   get; // The semicolon *is* necessary
   │      ^ Expected an identifier, a string literal, a number literal, a private field name, or a computed name here

error[SyntaxError]: expected an identifier, a string literal, a number literal, a private field name, or a computed name but instead found '='
   ┌─ class.js:16:7
   │
16 │   get = () => {}; // The semicolon is *not* necessary
   │       ^ Expected an identifier, a string literal, a number literal, a private field name, or a computed name here

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ class.js:17:6
   │
17 │   x(){}
   │   ---^
   │   │  │
   │   │  An explicit or implicit semicolon is expected here...
   │   ...Which is required to end this statement

error[SyntaxError]: expected a statement but instead found '}'
   ┌─ class.js:18:1
   │
18 │ }
   │ ^ Expected a statement here

error[SyntaxError]: expected an identifier, a string literal, a number literal, a private field name, or a computed name but instead found ';'
   ┌─ class.js:20:6
   │
20 │   set; // The semicolon *is* necessary
   │      ^ Expected an identifier, a string literal, a number literal, a private field name, or a computed name here

error[SyntaxError]: expected an identifier, a string literal, a number literal, a private field name, or a computed name but instead found '='
   ┌─ class.js:24:7
   │
24 │   set = () => {}; // The semicolon is *not* necessary
   │       ^ Expected an identifier, a string literal, a number literal, a private field name, or a computed name here

error[SyntaxError]: Expected a semicolon or an implicit semicolon after a statement, but found none
   ┌─ class.js:25:6
   │
25 │   x(){}
   │   ---^
   │   │  │
   │   │  An explicit or implicit semicolon is expected here...
   │   ...Which is required to end this statement

error[SyntaxError]: expected a statement but instead found '}'
   ┌─ class.js:26:1
   │
26 │ }
   │ ^ Expected a statement here


```


