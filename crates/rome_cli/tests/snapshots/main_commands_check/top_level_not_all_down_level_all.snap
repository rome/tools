---
source: crates/rome_cli/tests/snap_test.rs
expression: content
---
## `rome.json`

```json
{
  "linter": {
    "rules": {
      "all": false,
      "style": {
        "all": true
      }
    }
  }
}
```

## `fix.js`

```js

    function f() {arguments;}
    const FOO = "FOO";
    var x, y;
    
```

# Termination Message

```block
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks
  


```

# Emitted Messages

```block
fix.js:4:5 lint/style/useSingleVarDeclarator  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Declare variables separately
  
    2 │     function f() {arguments;}
    3 │     const FOO = "FOO";
  > 4 │     var x, y;
      │     ^^^^^^^^^
    5 │     
  
  i Suggested fix: Break out into multiple declarations
  
    2 2 │       function f() {arguments;}
    3 3 │       const FOO = "FOO";
    4   │ - ····var·x,·y;
      4 │ + ····var·x;
      5 │ + ····var·y;
    5 6 │       
  

```

```block
fix.js:2:19 lint/style/noArguments ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Use the rest parameters instead of arguments.
  
  > 2 │     function f() {arguments;}
      │                   ^^^^^^^^^
    3 │     const FOO = "FOO";
    4 │     var x, y;
  
  i arguments does not have Array.prototype methods and can be inconvenient to use.
  

```

```block
fix.js:4:5 lint/style/noVar  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Use let or const instead of var.
  
    2 │     function f() {arguments;}
    3 │     const FOO = "FOO";
  > 4 │     var x, y;
      │     ^^^^^^^^
    5 │     
  
  i A variable declared with var is accessible in the whole module. Thus, the variable can be accessed before its initialization and outside the block where it is declared.
  
  i See MDN web docs for more details.
  
  i Suggested fix: Use 'let' instead.
  
    2 2 │       function f() {arguments;}
    3 3 │       const FOO = "FOO";
    4   │ - ····var·x,·y;
      4 │ + ····let·x,·y;
    5 5 │       
  

```

```block
fix.js lint ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Fixes applied to the file, but there are still diagnostics to address.
  

```

```block
fix.js format ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  i Formatter would have printed the following content:
  
    1   │ - 
    2   │ - ····function·f()·{arguments;}
    3   │ - ····const·FOO·=·"FOO";
    4   │ - ····var·x,·y;
    5   │ - ····
      1 │ + function·f()·{
      2 │ + → arguments;
      3 │ + }
      4 │ + const·FOO·=·"FOO";
      5 │ + var·x,·y;
      6 │ + 
  

```

```block
check ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Some errors were emitted while running checks
  

```

```block
Checked 1 file(s) in <TIME>
```


