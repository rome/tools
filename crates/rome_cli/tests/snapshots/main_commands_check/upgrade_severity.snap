---
source: crates/rome_cli/tests/snap_test.rs
expression: content
---
## `rome.json`

```json
{
  "linter": {
    "rules": {
        "recommended": true,
        "nursery": {
            "noUnreachable": "error",
            "noUnusedVariables": "error"
        }
    }
  }
}
```

## `file.js`

```js
function f() {
    for (;;) {
        continue;
        break;
    }
}

```

# Termination Message

```block
errors where emitted while running checks
```

# Emitted Messages

```block
file.js:4:9 lint/nursery/noUnreachable ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This code will never be reached ...
  
    2 │     for (;;) {
    3 │         continue;
  > 4 │         break;
      │         ^^^^^^
    5 │     }
    6 │ }
  
  i ... because this statement will continue the loop beforehand
  
    1 │ function f() {
    2 │     for (;;) {
  > 3 │         continue;
      │         ^^^^^^^^^
    4 │         break;
    5 │     }
  

```

```block
file.js:1:10 lint/nursery/noUnusedVariables  FIXABLE  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × This function is unused.
  
  > 1 │ function f() {
      │          ^
    2 │     for (;;) {
    3 │         continue;
  
  i Unused variables usually are result of incomplete refactoring, typos and other source of bugs.
  
  i Suggested fix: Prepend f with an underscore
  
    1   │ - function·f()·{
      1 │ + function·_f()·{
    2 2 │       for (;;) {
    3 3 │           continue;
  

```


