Program {
  corrupt: false
  diagnostics: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'module'
  syntax: Array [
    'jsx'
    'flow'
  ]
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 0
      index: 49
      line: 4
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  comments: Array [
    CommentLine {
      value: ' @flow'
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 8
          index: 8
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
    }
  ]
  body: Array [
    ExpressionStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 18
          index: 27
          line: 2
        }
        start: Object {
          column: 0
          index: 9
          line: 2
        }
      }
      leadingComments: Array [
        CommentLine {
          value: ' @flow'
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 8
              index: 8
              line: 1
            }
            start: Object {
              column: 0
              index: 0
              line: 1
            }
          }
        }
      ]
      expression: ArrowFunctionExpression {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 17
            index: 26
            line: 2
          }
          start: Object {
            column: 0
            index: 9
            line: 2
          }
        }
        body: BlockStatement {
          body: Array []
          directives: Array []
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 17
              index: 26
              line: 2
            }
            start: Object {
              column: 15
              index: 24
              line: 2
            }
          }
        }
        leadingComments: Array [
          CommentLine {
            value: ' @flow'
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 8
                index: 8
                line: 1
              }
              start: Object {
                column: 0
                index: 0
                line: 1
              }
            }
          }
        ]
        head: FunctionHead {
          async: true
          hasHoistedVars: false
          params: Array []
          predicate: undefined
          rest: undefined
          returnType: undefined
          thisType: undefined
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 15
              index: 24
              line: 2
            }
            start: Object {
              column: 0
              index: 9
              line: 2
            }
          }
          typeParameters: FlowTypeParameterDeclaration {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 9
                index: 18
                line: 2
              }
              start: Object {
                column: 6
                index: 15
                line: 2
              }
            }
            params: Array [
              FlowTypeParameter {
                name: 'T'
                bound: undefined
                default: undefined
                variance: undefined
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 8
                    index: 17
                    line: 2
                  }
                  start: Object {
                    column: 7
                    index: 16
                    line: 2
                  }
                }
              }
            ]
          }
        }
      }
    }
    ExpressionStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 20
          index: 48
          line: 3
        }
        start: Object {
          column: 0
          index: 28
          line: 3
        }
      }
      expression: ArrowFunctionExpression {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 20
            index: 48
            line: 3
          }
          start: Object {
            column: 0
            index: 28
            line: 3
          }
        }
        body: BlockStatement {
          body: Array []
          directives: Array []
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 20
              index: 48
              line: 3
            }
            start: Object {
              column: 18
              index: 46
              line: 3
            }
          }
        }
        head: FunctionHead {
          async: true
          hasHoistedVars: false
          params: Array []
          predicate: undefined
          rest: undefined
          thisType: undefined
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 18
              index: 46
              line: 3
            }
            start: Object {
              column: 0
              index: 28
              line: 3
            }
          }
          returnType: FlowGenericTypeAnnotation {
            id: ReferenceIdentifier {
              name: 'T'
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 14
                  index: 42
                  line: 3
                }
                start: Object {
                  column: 13
                  index: 41
                  line: 3
                }
              }
            }
            typeParameters: undefined
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 14
                index: 42
                line: 3
              }
              start: Object {
                column: 13
                index: 41
                line: 3
              }
            }
          }
          typeParameters: FlowTypeParameterDeclaration {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 9
                index: 37
                line: 3
              }
              start: Object {
                column: 6
                index: 34
                line: 3
              }
            }
            params: Array [
              FlowTypeParameter {
                name: 'T'
                bound: undefined
                default: undefined
                variance: undefined
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 8
                    index: 36
                    line: 3
                  }
                  start: Object {
                    column: 7
                    index: 35
                    line: 3
                  }
                }
              }
            ]
          }
        }
      }
    }
  ]
}