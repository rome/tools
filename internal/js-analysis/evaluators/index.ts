/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import Hub from "../Hub";
import {Scope} from "../scopes";
import {AnyNode} from "@internal/ast";
import T from "../types/T";
import {ExtendedMap} from "@internal/collections";

const evaluators: ExtendedMap<
	string,
	(node: AnyNode, scope: Scope, hub: Hub) => void | undefined | T
> = new ExtendedMap("evaluators");
export default evaluators;

/* GENERATED:START(hash:d0a409df473136fa1f0904bc4401b258c7f9020c,id:main) Everything below is automatically generated. DO NOT MODIFY. Run `./rome run scripts/generated-files/ast` to update. */
import JSAmbiguousFlowTypeCastExpression from "./temp/JSAmbiguousFlowTypeCastExpression";
evaluators.set(
	"JSAmbiguousFlowTypeCastExpression",
	JSAmbiguousFlowTypeCastExpression,
);
import JSArrayExpression from "./expressions/JSArrayExpression";
evaluators.set("JSArrayExpression", JSArrayExpression);
import JSArrayHole from "./auxiliary/JSArrayHole";
evaluators.set("JSArrayHole", JSArrayHole);
import JSArrowFunctionExpression from "./expressions/JSArrowFunctionExpression";
evaluators.set("JSArrowFunctionExpression", JSArrowFunctionExpression);
import JSAssignmentArrayPattern from "./patterns/JSAssignmentArrayPattern";
evaluators.set("JSAssignmentArrayPattern", JSAssignmentArrayPattern);
import JSAssignmentAssignmentPattern from "./patterns/JSAssignmentAssignmentPattern";
evaluators.set("JSAssignmentAssignmentPattern", JSAssignmentAssignmentPattern);
import JSAssignmentExpression from "./expressions/JSAssignmentExpression";
evaluators.set("JSAssignmentExpression", JSAssignmentExpression);
import JSAssignmentIdentifier from "./patterns/JSAssignmentIdentifier";
evaluators.set("JSAssignmentIdentifier", JSAssignmentIdentifier);
import JSAssignmentObjectPattern from "./patterns/JSAssignmentObjectPattern";
evaluators.set("JSAssignmentObjectPattern", JSAssignmentObjectPattern);
import JSAssignmentObjectPatternProperty from "./patterns/JSAssignmentObjectPatternProperty";
evaluators.set(
	"JSAssignmentObjectPatternProperty",
	JSAssignmentObjectPatternProperty,
);
import JSAwaitExpression from "./expressions/JSAwaitExpression";
evaluators.set("JSAwaitExpression", JSAwaitExpression);
import JSBigIntLiteral from "./literals/JSBigIntLiteral";
evaluators.set("JSBigIntLiteral", JSBigIntLiteral);
import JSBinaryExpression from "./expressions/JSBinaryExpression";
evaluators.set("JSBinaryExpression", JSBinaryExpression);
import JSBindingArrayPattern from "./patterns/JSBindingArrayPattern";
evaluators.set("JSBindingArrayPattern", JSBindingArrayPattern);
import JSBindingAssignmentPattern from "./patterns/JSBindingAssignmentPattern";
evaluators.set("JSBindingAssignmentPattern", JSBindingAssignmentPattern);
import JSBindingIdentifier from "./patterns/JSBindingIdentifier";
evaluators.set("JSBindingIdentifier", JSBindingIdentifier);
import JSBindingObjectPattern from "./patterns/JSBindingObjectPattern";
evaluators.set("JSBindingObjectPattern", JSBindingObjectPattern);
import JSBindingObjectPatternProperty from "./patterns/JSBindingObjectPatternProperty";
evaluators.set("JSBindingObjectPatternProperty", JSBindingObjectPatternProperty);
import JSBlockStatement from "./statements/JSBlockStatement";
evaluators.set("JSBlockStatement", JSBlockStatement);
import JSBooleanLiteral from "./literals/JSBooleanLiteral";
evaluators.set("JSBooleanLiteral", JSBooleanLiteral);
import JSBreakStatement from "./statements/JSBreakStatement";
evaluators.set("JSBreakStatement", JSBreakStatement);
import JSCallExpression from "./expressions/JSCallExpression";
evaluators.set("JSCallExpression", JSCallExpression);
import JSCatchClause from "./auxiliary/JSCatchClause";
evaluators.set("JSCatchClause", JSCatchClause);
import JSClassDeclaration from "./classes/JSClassDeclaration";
evaluators.set("JSClassDeclaration", JSClassDeclaration);
import JSClassExpression from "./classes/JSClassExpression";
evaluators.set("JSClassExpression", JSClassExpression);
import JSClassHead from "./classes/JSClassHead";
evaluators.set("JSClassHead", JSClassHead);
import JSClassMethod from "./classes/JSClassMethod";
evaluators.set("JSClassMethod", JSClassMethod);
import JSClassPrivateMethod from "./classes/JSClassPrivateMethod";
evaluators.set("JSClassPrivateMethod", JSClassPrivateMethod);
import JSClassPrivateProperty from "./classes/JSClassPrivateProperty";
evaluators.set("JSClassPrivateProperty", JSClassPrivateProperty);
import JSClassProperty from "./classes/JSClassProperty";
evaluators.set("JSClassProperty", JSClassProperty);
import JSClassPropertyMeta from "./classes/JSClassPropertyMeta";
evaluators.set("JSClassPropertyMeta", JSClassPropertyMeta);
import JSComputedMemberProperty from "./auxiliary/JSComputedMemberProperty";
evaluators.set("JSComputedMemberProperty", JSComputedMemberProperty);
import JSComputedPropertyKey from "./objects/JSComputedPropertyKey";
evaluators.set("JSComputedPropertyKey", JSComputedPropertyKey);
import JSConditionalExpression from "./expressions/JSConditionalExpression";
evaluators.set("JSConditionalExpression", JSConditionalExpression);
import JSContinueStatement from "./statements/JSContinueStatement";
evaluators.set("JSContinueStatement", JSContinueStatement);
import JSDebuggerStatement from "./statements/JSDebuggerStatement";
evaluators.set("JSDebuggerStatement", JSDebuggerStatement);
import JSDirective from "./core/JSDirective";
evaluators.set("JSDirective", JSDirective);
import JSDoExpression from "./expressions/JSDoExpression";
evaluators.set("JSDoExpression", JSDoExpression);
import JSDoWhileStatement from "./statements/JSDoWhileStatement";
evaluators.set("JSDoWhileStatement", JSDoWhileStatement);
import JSEmptyStatement from "./statements/JSEmptyStatement";
evaluators.set("JSEmptyStatement", JSEmptyStatement);
import JSExportAllDeclaration from "./modules/JSExportAllDeclaration";
evaluators.set("JSExportAllDeclaration", JSExportAllDeclaration);
import JSExportDefaultDeclaration from "./modules/JSExportDefaultDeclaration";
evaluators.set("JSExportDefaultDeclaration", JSExportDefaultDeclaration);
import JSExportDefaultSpecifier from "./modules/JSExportDefaultSpecifier";
evaluators.set("JSExportDefaultSpecifier", JSExportDefaultSpecifier);
import JSExportExternalDeclaration from "./modules/JSExportExternalDeclaration";
evaluators.set("JSExportExternalDeclaration", JSExportExternalDeclaration);
import JSExportExternalSpecifier from "./modules/JSExportExternalSpecifier";
evaluators.set("JSExportExternalSpecifier", JSExportExternalSpecifier);
import JSExportLocalDeclaration from "./modules/JSExportLocalDeclaration";
evaluators.set("JSExportLocalDeclaration", JSExportLocalDeclaration);
import JSExportLocalSpecifier from "./modules/JSExportLocalSpecifier";
evaluators.set("JSExportLocalSpecifier", JSExportLocalSpecifier);
import JSExportNamespaceSpecifier from "./modules/JSExportNamespaceSpecifier";
evaluators.set("JSExportNamespaceSpecifier", JSExportNamespaceSpecifier);
import JSExpressionStatement from "./statements/JSExpressionStatement";
evaluators.set("JSExpressionStatement", JSExpressionStatement);
import JSForInStatement from "./statements/JSForInStatement";
evaluators.set("JSForInStatement", JSForInStatement);
import JSForOfStatement from "./statements/JSForOfStatement";
evaluators.set("JSForOfStatement", JSForOfStatement);
import JSForStatement from "./statements/JSForStatement";
evaluators.set("JSForStatement", JSForStatement);
import JSFunctionDeclaration from "./statements/JSFunctionDeclaration";
evaluators.set("JSFunctionDeclaration", JSFunctionDeclaration);
import JSFunctionExpression from "./expressions/JSFunctionExpression";
evaluators.set("JSFunctionExpression", JSFunctionExpression);
import JSFunctionHead from "./auxiliary/JSFunctionHead";
evaluators.set("JSFunctionHead", JSFunctionHead);
import JSIdentifier from "./auxiliary/JSIdentifier";
evaluators.set("JSIdentifier", JSIdentifier);
import JSIfStatement from "./statements/JSIfStatement";
evaluators.set("JSIfStatement", JSIfStatement);
import JSImportCall from "./modules/JSImportCall";
evaluators.set("JSImportCall", JSImportCall);
import JSImportDeclaration from "./modules/JSImportDeclaration";
evaluators.set("JSImportDeclaration", JSImportDeclaration);
import JSImportDefaultSpecifier from "./modules/JSImportDefaultSpecifier";
evaluators.set("JSImportDefaultSpecifier", JSImportDefaultSpecifier);
import JSImportNamespaceSpecifier from "./modules/JSImportNamespaceSpecifier";
evaluators.set("JSImportNamespaceSpecifier", JSImportNamespaceSpecifier);
import JSImportSpecifier from "./modules/JSImportSpecifier";
evaluators.set("JSImportSpecifier", JSImportSpecifier);
import JSImportSpecifierLocal from "./modules/JSImportSpecifierLocal";
evaluators.set("JSImportSpecifierLocal", JSImportSpecifierLocal);
import JSInterpreterDirective from "./core/JSInterpreterDirective";
evaluators.set("JSInterpreterDirective", JSInterpreterDirective);
import JSLabeledStatement from "./statements/JSLabeledStatement";
evaluators.set("JSLabeledStatement", JSLabeledStatement);
import JSLogicalExpression from "./expressions/JSLogicalExpression";
evaluators.set("JSLogicalExpression", JSLogicalExpression);
import JSMemberExpression from "./expressions/JSMemberExpression";
evaluators.set("JSMemberExpression", JSMemberExpression);
import JSMetaProperty from "./expressions/JSMetaProperty";
evaluators.set("JSMetaProperty", JSMetaProperty);
import JSNewExpression from "./expressions/JSNewExpression";
evaluators.set("JSNewExpression", JSNewExpression);
import JSNullLiteral from "./literals/JSNullLiteral";
evaluators.set("JSNullLiteral", JSNullLiteral);
import JSNumericLiteral from "./literals/JSNumericLiteral";
evaluators.set("JSNumericLiteral", JSNumericLiteral);
import JSObjectExpression from "./objects/JSObjectExpression";
evaluators.set("JSObjectExpression", JSObjectExpression);
import JSObjectMethod from "./objects/JSObjectMethod";
evaluators.set("JSObjectMethod", JSObjectMethod);
import JSObjectProperty from "./objects/JSObjectProperty";
evaluators.set("JSObjectProperty", JSObjectProperty);
import JSOptionalCallExpression from "./expressions/JSOptionalCallExpression";
evaluators.set("JSOptionalCallExpression", JSOptionalCallExpression);
import JSPatternMeta from "./patterns/JSPatternMeta";
evaluators.set("JSPatternMeta", JSPatternMeta);
import JSPrivateName from "./classes/JSPrivateName";
evaluators.set("JSPrivateName", JSPrivateName);
import JSReferenceIdentifier from "./expressions/JSReferenceIdentifier";
evaluators.set("JSReferenceIdentifier", JSReferenceIdentifier);
import JSRegExpAlternation from "./regex/JSRegExpAlternation";
evaluators.set("JSRegExpAlternation", JSRegExpAlternation);
import JSRegExpAnyCharacter from "./regex/JSRegExpAnyCharacter";
evaluators.set("JSRegExpAnyCharacter", JSRegExpAnyCharacter);
import JSRegExpCharacter from "./regex/JSRegExpCharacter";
evaluators.set("JSRegExpCharacter", JSRegExpCharacter);
import JSRegExpCharSet from "./regex/JSRegExpCharSet";
evaluators.set("JSRegExpCharSet", JSRegExpCharSet);
import JSRegExpCharSetRange from "./regex/JSRegExpCharSetRange";
evaluators.set("JSRegExpCharSetRange", JSRegExpCharSetRange);
import JSRegExpControlCharacter from "./regex/JSRegExpControlCharacter";
evaluators.set("JSRegExpControlCharacter", JSRegExpControlCharacter);
import JSRegExpDigitCharacter from "./regex/JSRegExpDigitCharacter";
evaluators.set("JSRegExpDigitCharacter", JSRegExpDigitCharacter);
import JSRegExpEndCharacter from "./regex/JSRegExpEndCharacter";
evaluators.set("JSRegExpEndCharacter", JSRegExpEndCharacter);
import JSRegExpGroupCapture from "./regex/JSRegExpGroupCapture";
evaluators.set("JSRegExpGroupCapture", JSRegExpGroupCapture);
import JSRegExpGroupNonCapture from "./regex/JSRegExpGroupNonCapture";
evaluators.set("JSRegExpGroupNonCapture", JSRegExpGroupNonCapture);
import JSRegExpLiteral from "./literals/JSRegExpLiteral";
evaluators.set("JSRegExpLiteral", JSRegExpLiteral);
import JSRegExpNamedBackReference from "./regex/JSRegExpNamedBackReference";
evaluators.set("JSRegExpNamedBackReference", JSRegExpNamedBackReference);
import JSRegExpNonDigitCharacter from "./regex/JSRegExpNonDigitCharacter";
evaluators.set("JSRegExpNonDigitCharacter", JSRegExpNonDigitCharacter);
import JSRegExpNonWhiteSpaceCharacter from "./regex/JSRegExpNonWhiteSpaceCharacter";
evaluators.set("JSRegExpNonWhiteSpaceCharacter", JSRegExpNonWhiteSpaceCharacter);
import JSRegExpNonWordBoundaryCharacter from "./regex/JSRegExpNonWordBoundaryCharacter";
evaluators.set(
	"JSRegExpNonWordBoundaryCharacter",
	JSRegExpNonWordBoundaryCharacter,
);
import JSRegExpNonWordCharacter from "./regex/JSRegExpNonWordCharacter";
evaluators.set("JSRegExpNonWordCharacter", JSRegExpNonWordCharacter);
import JSRegExpNumericBackReference from "./regex/JSRegExpNumericBackReference";
evaluators.set("JSRegExpNumericBackReference", JSRegExpNumericBackReference);
import JSRegExpQuantified from "./regex/JSRegExpQuantified";
evaluators.set("JSRegExpQuantified", JSRegExpQuantified);
import JSRegExpStartCharacter from "./regex/JSRegExpStartCharacter";
evaluators.set("JSRegExpStartCharacter", JSRegExpStartCharacter);
import JSRegExpSubExpression from "./regex/JSRegExpSubExpression";
evaluators.set("JSRegExpSubExpression", JSRegExpSubExpression);
import JSRegExpWhiteSpaceCharacter from "./regex/JSRegExpWhiteSpaceCharacter";
evaluators.set("JSRegExpWhiteSpaceCharacter", JSRegExpWhiteSpaceCharacter);
import JSRegExpWordBoundaryCharacter from "./regex/JSRegExpWordBoundaryCharacter";
evaluators.set("JSRegExpWordBoundaryCharacter", JSRegExpWordBoundaryCharacter);
import JSRegExpWordCharacter from "./regex/JSRegExpWordCharacter";
evaluators.set("JSRegExpWordCharacter", JSRegExpWordCharacter);
import JSReturnStatement from "./statements/JSReturnStatement";
evaluators.set("JSReturnStatement", JSReturnStatement);
import JSRoot from "./core/JSRoot";
evaluators.set("JSRoot", JSRoot);
import JSSequenceExpression from "./expressions/JSSequenceExpression";
evaluators.set("JSSequenceExpression", JSSequenceExpression);
import JSSpreadElement from "./auxiliary/JSSpreadElement";
evaluators.set("JSSpreadElement", JSSpreadElement);
import JSSpreadProperty from "./objects/JSSpreadProperty";
evaluators.set("JSSpreadProperty", JSSpreadProperty);
import JSStaticMemberProperty from "./auxiliary/JSStaticMemberProperty";
evaluators.set("JSStaticMemberProperty", JSStaticMemberProperty);
import JSStaticPropertyKey from "./objects/JSStaticPropertyKey";
evaluators.set("JSStaticPropertyKey", JSStaticPropertyKey);
import JSStringLiteral from "./literals/JSStringLiteral";
evaluators.set("JSStringLiteral", JSStringLiteral);
import JSSuper from "./expressions/JSSuper";
evaluators.set("JSSuper", JSSuper);
import JSSwitchCase from "./auxiliary/JSSwitchCase";
evaluators.set("JSSwitchCase", JSSwitchCase);
import JSSwitchStatement from "./statements/JSSwitchStatement";
evaluators.set("JSSwitchStatement", JSSwitchStatement);
import JSTaggedTemplateExpression from "./expressions/JSTaggedTemplateExpression";
evaluators.set("JSTaggedTemplateExpression", JSTaggedTemplateExpression);
import JSTemplateElement from "./auxiliary/JSTemplateElement";
evaluators.set("JSTemplateElement", JSTemplateElement);
import JSTemplateLiteral from "./literals/JSTemplateLiteral";
evaluators.set("JSTemplateLiteral", JSTemplateLiteral);
import JSThisExpression from "./expressions/JSThisExpression";
evaluators.set("JSThisExpression", JSThisExpression);
import JSThrowStatement from "./statements/JSThrowStatement";
evaluators.set("JSThrowStatement", JSThrowStatement);
import JSTryStatement from "./statements/JSTryStatement";
evaluators.set("JSTryStatement", JSTryStatement);
import JSUnaryExpression from "./expressions/JSUnaryExpression";
evaluators.set("JSUnaryExpression", JSUnaryExpression);
import JSUpdateExpression from "./expressions/JSUpdateExpression";
evaluators.set("JSUpdateExpression", JSUpdateExpression);
import JSVariableDeclaration from "./auxiliary/JSVariableDeclaration";
evaluators.set("JSVariableDeclaration", JSVariableDeclaration);
import JSVariableDeclarationStatement from "./statements/JSVariableDeclarationStatement";
evaluators.set("JSVariableDeclarationStatement", JSVariableDeclarationStatement);
import JSVariableDeclarator from "./auxiliary/JSVariableDeclarator";
evaluators.set("JSVariableDeclarator", JSVariableDeclarator);
import JSWhileStatement from "./statements/JSWhileStatement";
evaluators.set("JSWhileStatement", JSWhileStatement);
import JSWithStatement from "./statements/JSWithStatement";
evaluators.set("JSWithStatement", JSWithStatement);
import JSXAttribute from "./jsx/JSXAttribute";
evaluators.set("JSXAttribute", JSXAttribute);
import JSXElement from "./jsx/JSXElement";
evaluators.set("JSXElement", JSXElement);
import JSXEmptyExpression from "./jsx/JSXEmptyExpression";
evaluators.set("JSXEmptyExpression", JSXEmptyExpression);
import JSXExpressionContainer from "./jsx/JSXExpressionContainer";
evaluators.set("JSXExpressionContainer", JSXExpressionContainer);
import JSXFragment from "./jsx/JSXFragment";
evaluators.set("JSXFragment", JSXFragment);
import JSXIdentifier from "./jsx/JSXIdentifier";
evaluators.set("JSXIdentifier", JSXIdentifier);
import JSXMemberExpression from "./jsx/JSXMemberExpression";
evaluators.set("JSXMemberExpression", JSXMemberExpression);
import JSXNamespacedName from "./jsx/JSXNamespacedName";
evaluators.set("JSXNamespacedName", JSXNamespacedName);
import JSXReferenceIdentifier from "./jsx/JSXReferenceIdentifier";
evaluators.set("JSXReferenceIdentifier", JSXReferenceIdentifier);
import JSXSpreadAttribute from "./jsx/JSXSpreadAttribute";
evaluators.set("JSXSpreadAttribute", JSXSpreadAttribute);
import JSXSpreadChild from "./jsx/JSXSpreadChild";
evaluators.set("JSXSpreadChild", JSXSpreadChild);
import JSXText from "./jsx/JSXText";
evaluators.set("JSXText", JSXText);
import JSYieldExpression from "./expressions/JSYieldExpression";
evaluators.set("JSYieldExpression", JSYieldExpression);
import TSAnyKeywordTypeAnnotation from "./typescript/TSAnyKeywordTypeAnnotation";
evaluators.set("TSAnyKeywordTypeAnnotation", TSAnyKeywordTypeAnnotation);
import TSArrayType from "./typescript/TSArrayType";
evaluators.set("TSArrayType", TSArrayType);
import TSAsExpression from "./typescript/TSAsExpression";
evaluators.set("TSAsExpression", TSAsExpression);
import TSAssignmentAsExpression from "./typescript/TSAssignmentAsExpression";
evaluators.set("TSAssignmentAsExpression", TSAssignmentAsExpression);
import TSAssignmentNonNullExpression from "./typescript/TSAssignmentNonNullExpression";
evaluators.set("TSAssignmentNonNullExpression", TSAssignmentNonNullExpression);
import TSAssignmentTypeAssertion from "./typescript/TSAssignmentTypeAssertion";
evaluators.set("TSAssignmentTypeAssertion", TSAssignmentTypeAssertion);
import TSBigIntKeywordTypeAnnotation from "./typescript/TSBigIntKeywordTypeAnnotation";
evaluators.set("TSBigIntKeywordTypeAnnotation", TSBigIntKeywordTypeAnnotation);
import TSBigIntLiteralTypeAnnotation from "./typescript/TSBigIntLiteralTypeAnnotation";
evaluators.set("TSBigIntLiteralTypeAnnotation", TSBigIntLiteralTypeAnnotation);
import TSBooleanKeywordTypeAnnotation from "./typescript/TSBooleanKeywordTypeAnnotation";
evaluators.set("TSBooleanKeywordTypeAnnotation", TSBooleanKeywordTypeAnnotation);
import TSBooleanLiteralTypeAnnotation from "./typescript/TSBooleanLiteralTypeAnnotation";
evaluators.set("TSBooleanLiteralTypeAnnotation", TSBooleanLiteralTypeAnnotation);
import TSCallSignatureDeclaration from "./typescript/TSCallSignatureDeclaration";
evaluators.set("TSCallSignatureDeclaration", TSCallSignatureDeclaration);
import TSConditionalType from "./typescript/TSConditionalType";
evaluators.set("TSConditionalType", TSConditionalType);
import TSConstKeyword from "./typescript/TSConstKeyword";
evaluators.set("TSConstKeyword", TSConstKeyword);
import TSConstructorType from "./typescript/TSConstructorType";
evaluators.set("TSConstructorType", TSConstructorType);
import TSConstructSignatureDeclaration from "./typescript/TSConstructSignatureDeclaration";
evaluators.set(
	"TSConstructSignatureDeclaration",
	TSConstructSignatureDeclaration,
);
import TSDeclareFunction from "./typescript/TSDeclareFunction";
evaluators.set("TSDeclareFunction", TSDeclareFunction);
import TSDeclareMethod from "./typescript/TSDeclareMethod";
evaluators.set("TSDeclareMethod", TSDeclareMethod);
import TSEmptyKeywordTypeAnnotation from "./typescript/TSEmptyKeywordTypeAnnotation";
evaluators.set("TSEmptyKeywordTypeAnnotation", TSEmptyKeywordTypeAnnotation);
import TSEnumDeclaration from "./typescript/TSEnumDeclaration";
evaluators.set("TSEnumDeclaration", TSEnumDeclaration);
import TSEnumMember from "./typescript/TSEnumMember";
evaluators.set("TSEnumMember", TSEnumMember);
import TSExportAssignment from "./typescript/TSExportAssignment";
evaluators.set("TSExportAssignment", TSExportAssignment);
import TSExpressionWithTypeArguments from "./typescript/TSExpressionWithTypeArguments";
evaluators.set("TSExpressionWithTypeArguments", TSExpressionWithTypeArguments);
import TSExternalModuleReference from "./typescript/TSExternalModuleReference";
evaluators.set("TSExternalModuleReference", TSExternalModuleReference);
import TSFunctionType from "./typescript/TSFunctionType";
evaluators.set("TSFunctionType", TSFunctionType);
import TSImportEqualsDeclaration from "./typescript/TSImportEqualsDeclaration";
evaluators.set("TSImportEqualsDeclaration", TSImportEqualsDeclaration);
import TSImportType from "./typescript/TSImportType";
evaluators.set("TSImportType", TSImportType);
import TSIndexedAccessType from "./typescript/TSIndexedAccessType";
evaluators.set("TSIndexedAccessType", TSIndexedAccessType);
import TSIndexSignature from "./typescript/TSIndexSignature";
evaluators.set("TSIndexSignature", TSIndexSignature);
import TSInferType from "./typescript/TSInferType";
evaluators.set("TSInferType", TSInferType);
import TSInterfaceBody from "./typescript/TSInterfaceBody";
evaluators.set("TSInterfaceBody", TSInterfaceBody);
import TSInterfaceDeclaration from "./typescript/TSInterfaceDeclaration";
evaluators.set("TSInterfaceDeclaration", TSInterfaceDeclaration);
import TSIntersectionTypeAnnotation from "./typescript/TSIntersectionTypeAnnotation";
evaluators.set("TSIntersectionTypeAnnotation", TSIntersectionTypeAnnotation);
import TSMappedType from "./typescript/TSMappedType";
evaluators.set("TSMappedType", TSMappedType);
import TSMethodSignature from "./typescript/TSMethodSignature";
evaluators.set("TSMethodSignature", TSMethodSignature);
import TSMixedKeywordTypeAnnotation from "./typescript/TSMixedKeywordTypeAnnotation";
evaluators.set("TSMixedKeywordTypeAnnotation", TSMixedKeywordTypeAnnotation);
import TSModuleBlock from "./typescript/TSModuleBlock";
evaluators.set("TSModuleBlock", TSModuleBlock);
import TSModuleDeclaration from "./typescript/TSModuleDeclaration";
evaluators.set("TSModuleDeclaration", TSModuleDeclaration);
import TSNamespaceExportDeclaration from "./typescript/TSNamespaceExportDeclaration";
evaluators.set("TSNamespaceExportDeclaration", TSNamespaceExportDeclaration);
import TSNeverKeywordTypeAnnotation from "./typescript/TSNeverKeywordTypeAnnotation";
evaluators.set("TSNeverKeywordTypeAnnotation", TSNeverKeywordTypeAnnotation);
import TSNonNullExpression from "./typescript/TSNonNullExpression";
evaluators.set("TSNonNullExpression", TSNonNullExpression);
import TSNullKeywordTypeAnnotation from "./typescript/TSNullKeywordTypeAnnotation";
evaluators.set("TSNullKeywordTypeAnnotation", TSNullKeywordTypeAnnotation);
import TSNumberKeywordTypeAnnotation from "./typescript/TSNumberKeywordTypeAnnotation";
evaluators.set("TSNumberKeywordTypeAnnotation", TSNumberKeywordTypeAnnotation);
import TSNumericLiteralTypeAnnotation from "./typescript/TSNumericLiteralTypeAnnotation";
evaluators.set("TSNumericLiteralTypeAnnotation", TSNumericLiteralTypeAnnotation);
import TSObjectKeywordTypeAnnotation from "./typescript/TSObjectKeywordTypeAnnotation";
evaluators.set("TSObjectKeywordTypeAnnotation", TSObjectKeywordTypeAnnotation);
import TSObjectTypeAnnotation from "./typescript/TSObjectTypeAnnotation";
evaluators.set("TSObjectTypeAnnotation", TSObjectTypeAnnotation);
import TSParenthesizedType from "./typescript/TSParenthesizedType";
evaluators.set("TSParenthesizedType", TSParenthesizedType);
import TSPropertySignature from "./typescript/TSPropertySignature";
evaluators.set("TSPropertySignature", TSPropertySignature);
import TSQualifiedName from "./typescript/TSQualifiedName";
evaluators.set("TSQualifiedName", TSQualifiedName);
import TSSignatureDeclarationMeta from "./typescript/TSSignatureDeclarationMeta";
evaluators.set("TSSignatureDeclarationMeta", TSSignatureDeclarationMeta);
import TSStringKeywordTypeAnnotation from "./typescript/TSStringKeywordTypeAnnotation";
evaluators.set("TSStringKeywordTypeAnnotation", TSStringKeywordTypeAnnotation);
import TSStringLiteralTypeAnnotation from "./typescript/TSStringLiteralTypeAnnotation";
evaluators.set("TSStringLiteralTypeAnnotation", TSStringLiteralTypeAnnotation);
import TSSymbolKeywordTypeAnnotation from "./typescript/TSSymbolKeywordTypeAnnotation";
evaluators.set("TSSymbolKeywordTypeAnnotation", TSSymbolKeywordTypeAnnotation);
import TSTemplateLiteralTypeAnnotation from "./typescript/TSTemplateLiteralTypeAnnotation";
evaluators.set(
	"TSTemplateLiteralTypeAnnotation",
	TSTemplateLiteralTypeAnnotation,
);
import TSThisType from "./typescript/TSThisType";
evaluators.set("TSThisType", TSThisType);
import TSTupleElement from "./typescript/TSTupleElement";
evaluators.set("TSTupleElement", TSTupleElement);
import TSTupleType from "./typescript/TSTupleType";
evaluators.set("TSTupleType", TSTupleType);
import TSTypeAlias from "./typescript/TSTypeAlias";
evaluators.set("TSTypeAlias", TSTypeAlias);
import TSTypeAssertion from "./typescript/TSTypeAssertion";
evaluators.set("TSTypeAssertion", TSTypeAssertion);
import TSTypeOperator from "./typescript/TSTypeOperator";
evaluators.set("TSTypeOperator", TSTypeOperator);
import TSTypeParameter from "./typescript/TSTypeParameter";
evaluators.set("TSTypeParameter", TSTypeParameter);
import TSTypeParameterDeclaration from "./typescript/TSTypeParameterDeclaration";
evaluators.set("TSTypeParameterDeclaration", TSTypeParameterDeclaration);
import TSTypeParameterInstantiation from "./typescript/TSTypeParameterInstantiation";
evaluators.set("TSTypeParameterInstantiation", TSTypeParameterInstantiation);
import TSTypePredicate from "./typescript/TSTypePredicate";
evaluators.set("TSTypePredicate", TSTypePredicate);
import TSTypeQuery from "./typescript/TSTypeQuery";
evaluators.set("TSTypeQuery", TSTypeQuery);
import TSTypeReference from "./typescript/TSTypeReference";
evaluators.set("TSTypeReference", TSTypeReference);
import TSUndefinedKeywordTypeAnnotation from "./typescript/TSUndefinedKeywordTypeAnnotation";
evaluators.set(
	"TSUndefinedKeywordTypeAnnotation",
	TSUndefinedKeywordTypeAnnotation,
);
import TSUnionTypeAnnotation from "./typescript/TSUnionTypeAnnotation";
evaluators.set("TSUnionTypeAnnotation", TSUnionTypeAnnotation);
import TSUnknownKeywordTypeAnnotation from "./typescript/TSUnknownKeywordTypeAnnotation";
evaluators.set("TSUnknownKeywordTypeAnnotation", TSUnknownKeywordTypeAnnotation);
import TSVoidKeywordTypeAnnotation from "./typescript/TSVoidKeywordTypeAnnotation";
evaluators.set("TSVoidKeywordTypeAnnotation", TSVoidKeywordTypeAnnotation);
/* GENERATED:END(id:main) */
