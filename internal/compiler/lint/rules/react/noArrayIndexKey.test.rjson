filename = "file.tsx"
invalid = [
	"""
		React.Children.map(this.props.children, (child, index) => (
			React.cloneElement(child, { key: index })
		))
	""",
	"""
		React.Children.map(this.props.children, function (child, index) {
			return React.cloneElement(child, { key: index })
		})
	""",
	"""
		React.Children.map(this.props.children, function (child, index) {
			const foo = React.cloneElement(child, { key: index })
			return foo;
		})
	""",
	"""
		Children.map(this.props.children, (child, index) => (
			cloneElement(child, { key: index })
		))
	""",
	"""
		Children.map(this.props.children, function (child, index) {
			return cloneElement(child, { key: index })
		})
	""",
	"""
		Children.map(this.props.children, function (child, index) {
			const foo = cloneElement(child, { key: index })
			return foo;
		})
	""",
	"""
		Children.map(this.props.children, (child, index) => (
			React.cloneElement(child, { key: index })
		))
	""",
	"""
		React.Children.map(this.props.children, (child, index) => (
			cloneElement(child, { key: index })
		))
	""",
	"""
		React.Children.forEach(this.props.children, (child, index) => (
			React.cloneElement(child, { key: index })
		))
	""",
	"""
		React.Children.forEach(this.props.children, function (child, index) {
			return React.cloneElement(child, { key: index })
		})
	""",
	"""
		React.Children.forEach(this.props.children, function (child, index) {
			const foo = React.cloneElement(child, { key: index })
			return foo;
		})
	""",
	"""
		Children.forEach(this.props.children, (child, index) => (
			cloneElement(child, { key: index })
		))
	""",
	"""
		Children.forEach(this.props.children, function (child, index) {
			return cloneElement(child, { key: index })
		})
	""",
	"""
		Children.forEach(this.props.children, function (child, index) {
			const foo = cloneElement(child, { key: index })
			return foo;
		})
	""",
	"""
		Children.forEach(this.props.children, (child, index) => (
			React.cloneElement(child, { key: index })
		))
	""",
	"""
		React.Children.forEach(this.props.children, (child, index) => (
			cloneElement(child, { key: index })
		))
	""",
	"""
		things.map((thing, index) => (
			<Hello key={index} />
		));
	""",
	"""
		things.map(function(thing, index) {
			return (<Hello key={index} />);
		});
	""",
	"""
		things.map((thing, index) => (
			React.cloneElement(thing, { key: index })
		));
	""",
	"""
		things.map((thing, index) => (
			cloneElement(thing, { key: index })
		));
	""",
	"""
		things.map(function(thing, index){
			return cloneElement(thing, { key: index })
		});
	""",
	"""
		things.forEach((thing, index) => {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.forEach(function(thing, index) {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.filter((thing, index) => {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.some((thing, index) => {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.every((thing, index) => {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.find((thing, index) => {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.findIndex((thing, index) => {
			otherThings.push(<Hello key={index} />);
		});
	""",
	"""
		things.reduce((collection, thing, index) => (
			collection.concat(<Hello key={index} />)
		), []);
	""",
	"""
		things.reduce(function(collection, thing, index) {
			return collection.concat(<Hello key={index} />)
		}, []);
	""",
	"""
		things.reduceRight((collection, thing, index) => (
			collection.concat(<Hello key={index} />)
		), []);
	""",
	"""
		things.reduceRight(function(collection, thing, index) {
			return collection.concat(<Hello key={index} />)
		}, []);
	""",
]
valid = [
	"""
		things.map((thing) => (
			<Hello key={thing.id} />
		));
	""",
	"""
		things.map(function(thing) {
			return <Hello key={thing.id} />
		});
	""",
	"""
		things.map((thing) => (
			React.cloneElement(thing, { key: thing.id })
		));
	""",
	"""
		things.map(function(thing) {
			return React.cloneElement(thing, { key: thing.id })
		});
	""",
	"""
		things.forEach((thing) => {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.forEach(function(thing) {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.filter((thing) => {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.filter(function(thing) {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.some((thing) => {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.some(function(thing) {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.every((thing) => {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.every(function(thing) {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.find((thing) => {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.find(function(thing) {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.findIndex((thing) => {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.findIndex(function(thing) {
			otherThings.push(<Hello key={thing.id} />);
		});
	""",
	"""
		things.reduce((collection, thing) => (
			collection.concat(<Hello key={thing.id} />)
		), []);
	""",
	"""
		things.reduce(function(collection, thing) {
			return collection.concat(<Hello key={thing.id} />)
		}, []);
	""",
	"""
		things.reduceRight((collection, thing) => (
			collection.concat(<Hello key={thing.id} />)
		), []);
	""",
	"""
		things.reduceRight(function(collection, thing) {
			return collection.concat(<Hello key={thing.id} />)
		}, []);
	""",
]
