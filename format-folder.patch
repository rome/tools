From 8a724165569993b942bec7ea63cac375faa54881 Mon Sep 17 00:00:00 2001
From: Daniel Frederico Lins Leite <xunilrj@hotmail.com>
Date: Thu, 13 Jan 2022 14:32:07 -0300
Subject: [PATCH] poc to format a dir

---
 Cargo.lock                  | 73 +++++++++++++++++++++++++++++++++
 crates/rome_cli/Cargo.toml  |  4 ++
 crates/rome_cli/src/lib.rs  | 80 ++++++++++++++++++++++++++++++++++---
 crates/rome_core/src/lib.rs |  6 +++
 4 files changed, 157 insertions(+), 6 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 2bca4b770..4db0cffc8 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -301,6 +301,20 @@ dependencies = [
  "itertools",
 ]
 
+[[package]]
+name = "crossbeam"
+version = "0.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4ae5588f6b3c3cb05239e90bd110f257254aecd01e4635400391aeae07497845"
+dependencies = [
+ "cfg-if",
+ "crossbeam-channel",
+ "crossbeam-deque",
+ "crossbeam-epoch",
+ "crossbeam-queue",
+ "crossbeam-utils",
+]
+
 [[package]]
 name = "crossbeam-channel"
 version = "0.5.2"
@@ -335,6 +349,16 @@ dependencies = [
  "scopeguard",
 ]
 
+[[package]]
+name = "crossbeam-queue"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b979d76c9fcb84dffc80a73f7290da0f83e4c95773494674cb44b76d13a7a110"
+dependencies = [
+ "cfg-if",
+ "crossbeam-utils",
+]
+
 [[package]]
 name = "crossbeam-utils"
 version = "0.8.6"
@@ -459,6 +483,10 @@ version = "0.10.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5d04dafd11240188e146b6f6476a898004cace3be31d4ec5e08e216bf4947ac0"
 dependencies = [
+ "futures-core",
+ "futures-sink",
+ "nanorand",
+ "pin-project",
  "spin 0.9.2",
 ]
 
@@ -562,8 +590,10 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "418d37c8b1d42553c93648be529cb70f920d3baf8ef469b74b9638df426e0b4c"
 dependencies = [
  "cfg-if",
+ "js-sys",
  "libc",
  "wasi",
+ "wasm-bindgen",
 ]
 
 [[package]]
@@ -745,6 +775,16 @@ dependencies = [
  "wasm-bindgen",
 ]
 
+[[package]]
+name = "jwalk"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "172752e853a067cbce46427de8470ddf308af7fd8ceaf9b682ef31a5021b6bb9"
+dependencies = [
+ "crossbeam",
+ "rayon",
+]
+
 [[package]]
 name = "lazy_static"
 version = "1.4.0"
@@ -907,6 +947,15 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "nanorand"
+version = "0.6.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "729eb334247daa1803e0a094d0a5c55711b85571179f5ec6e53eccfdf7008958"
+dependencies = [
+ "getrandom",
+]
+
 [[package]]
 name = "ntapi"
 version = "0.3.6"
@@ -1029,6 +1078,26 @@ version = "0.3.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "28b9b4df73455c861d7cbf8be42f01d3b373ed7f02e378d55fa84eafc6f638b1"
 
+[[package]]
+name = "pin-project"
+version = "1.0.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "58ad3879ad3baf4e44784bc6a718a8698867bb991f8ce24d1bcbe2cfb4c3a75e"
+dependencies = [
+ "pin-project-internal",
+]
+
+[[package]]
+name = "pin-project-internal"
+version = "1.0.10"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "744b6f092ba29c3650faf274db506afd39944f48420f6c86b17cfe0ee1cb36bb"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
 [[package]]
 name = "pin-project-lite"
 version = "0.2.8"
@@ -1248,9 +1317,13 @@ name = "rome_cli"
 version = "0.0.0"
 dependencies = [
  "clap 3.0.9",
+ "flume",
+ "jwalk",
+ "num_cpus",
  "rome_core",
  "rome_formatter",
  "rome_path",
+ "timing",
 ]
 
 [[package]]
diff --git a/crates/rome_cli/Cargo.toml b/crates/rome_cli/Cargo.toml
index 97e76d59d..ff3200540 100644
--- a/crates/rome_cli/Cargo.toml
+++ b/crates/rome_cli/Cargo.toml
@@ -10,3 +10,7 @@ rome_formatter = { path = "../rome_formatter" }
 rome_core = { path = "../rome_core", version = "0.0.0" }
 rome_path = { path = "../rome_path", version = "0.0.0" }
 clap = {version = "3.0.9", features = ["cargo"]}
+jwalk = "0.6.0"
+timing = "0.2.3"
+flume = "0.10.9"
+num_cpus = "1.13.1"
diff --git a/crates/rome_cli/src/lib.rs b/crates/rome_cli/src/lib.rs
index 83bf1c739..2c3ec3149 100644
--- a/crates/rome_cli/src/lib.rs
+++ b/crates/rome_cli/src/lib.rs
@@ -47,7 +47,6 @@ pub fn run_cli() {
                 ),
         );
 
-    let rome_app = create_app();
 
     match cli_app.get_matches().subcommand().unwrap() {
         ("format", matches) => {
@@ -65,9 +64,78 @@ pub fn run_cli() {
                 })
                 .unwrap_or_default();
 
-            let mut file = RomePath::new(input).deduce_handler(&rome_app);
-            format_file_and_save(&mut file, FormatOptions::new(options));
-        }
-        _ => unreachable!("clap should ensure we don't get here"),
-    }
+			match std::fs::metadata(input) {
+				Ok(metadata) => {
+					if metadata.is_dir() {
+						let cpus = num_cpus::get();
+
+						std::panic::set_hook(Box::new(|_info| {
+							// do nothing
+						}));
+
+						let (s, r) = flume::unbounded();
+						println!("walking: {}", input);
+						let formatall = timing::start();
+
+						let walker = jwalk::WalkDir::new(input);
+						let h = std::thread::spawn(move || {
+							let walktimer = timing::start();
+							for entry in walker {
+								let input = entry.unwrap();
+								let path = input.path();
+								if path.is_dir() {
+									continue;;
+								}
+
+								let ext = path.extension()
+									.and_then(|x| x.to_str())
+									.unwrap_or("");
+								if ext == "js" {
+									let input = input.path();
+									let input = input.display().to_string();
+									s.send(input);
+								}
+							}
+							println!("walk took {:?}", walktimer.stop());
+							drop(s);
+						});
+
+						let mut handles = vec![];
+						for _ in 0..cpus {
+							let h = std::thread::spawn({
+								let r = r.clone();
+								let options = options.clone(); 
+								move || {
+									let app = create_app();
+									while let Ok(input) = r.recv() {
+										std::panic::catch_unwind(|| {
+											let mut file = RomePath::new(&input).deduce_handler(&app);
+											format_file_and_save(&mut file, FormatOptions::new(options.clone()));
+										});
+									}
+							}});
+							handles.push(h);
+						}
+
+						while let Some(h) = handles.pop() {
+							h.join();
+						}
+
+						println!("took {:?} using {}", formatall.stop(), cpus);
+					} else {
+    					let rome_app = create_app();
+						let mut file = RomePath::new(input).deduce_handler(&rome_app);
+						format_file_and_save(&mut file, FormatOptions::new(options.clone()));
+					}
+				},
+				Err(_) => todo!(),
+			}
+		}
+		// Thanks to the settings AppSettings::SubcommandRequiredElseHelp we should not be there
+		_ => clap::Error::with_description(
+			"Sub command not found".to_string(),
+			clap::ErrorKind::InvalidSubcommand,
+		)
+		.exit(),
+	}
 }
diff --git a/crates/rome_core/src/lib.rs b/crates/rome_core/src/lib.rs
index 0b560234b..b050d84e4 100644
--- a/crates/rome_core/src/lib.rs
+++ b/crates/rome_core/src/lib.rs
@@ -12,6 +12,12 @@ pub struct App {
     unknown_handler: Box<dyn ExtensionHandler>,
 }
 
+impl std::panic::RefUnwindSafe for App {
+
+}
+
+unsafe impl Sync for App {}
+
 impl Default for App {
     fn default() -> Self {
         let mut map: Handlers = HashMap::new();
-- 
2.33.0.windows.2

